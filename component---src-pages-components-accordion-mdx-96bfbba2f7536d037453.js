(window.webpackJsonp=window.webpackJsonp||[]).push([[10],{"4AS7":function(e,n){e.exports='function CustomToggle({ children, eventKey }) {\n  const decoratedOnClick = useAccordionToggle(eventKey, () =>\n    console.log(\'totally custom!\'),\n  );\n\n  return (\n    <button\n      type="button"\n      style={{ backgroundColor: \'pink\' }}\n      onClick={decoratedOnClick}\n    >\n      {children}\n    </button>\n  );\n}\n\nfunction Example() {\n  return (\n    <Accordion defaultActiveKey="0">\n      <Card>\n        <Card.Header>\n          <CustomToggle eventKey="0">Click me!</CustomToggle>\n        </Card.Header>\n        <Accordion.Collapse eventKey="0">\n          <Card.Body>Hello! I\'m the body</Card.Body>\n        </Accordion.Collapse>\n      </Card>\n      <Card>\n        <Card.Header>\n          <CustomToggle eventKey="1">Click me!</CustomToggle>\n        </Card.Header>\n        <Accordion.Collapse eventKey="1">\n          <Card.Body>Hello! I\'m another body</Card.Body>\n        </Accordion.Collapse>\n      </Card>\n    </Accordion>\n  );\n}\n\nrender(<Example />);\n'},"8Sn+":function(e,n){e.exports='function ContextAwareToggle({ children, eventKey, callback }) {\n  const currentEventKey = useContext(AccordionContext);\n\n  const decoratedOnClick = useAccordionToggle(\n    eventKey,\n    () => callback && callback(eventKey),\n  );\n\n  const isCurrentEventKey = currentEventKey === eventKey;\n\n  return (\n    <button\n      type="button"\n      style={{ backgroundColor: isCurrentEventKey ? \'pink\' : \'lavender\' }}\n      onClick={decoratedOnClick}\n    >\n      {children}\n    </button>\n  );\n}\n\nfunction Example() {\n  return (\n    <Accordion defaultActiveKey="0">\n      <Card>\n        <Card.Header>\n          <ContextAwareToggle eventKey="0">Click me!</ContextAwareToggle>\n        </Card.Header>\n        <Accordion.Collapse eventKey="0">\n          <Card.Body>Hello! I\'m the body</Card.Body>\n        </Accordion.Collapse>\n      </Card>\n      <Card>\n        <Card.Header>\n          <ContextAwareToggle eventKey="1">Click me!</ContextAwareToggle>\n        </Card.Header>\n        <Accordion.Collapse eventKey="1">\n          <Card.Body>Hello! I\'m another body</Card.Body>\n        </Accordion.Collapse>\n      </Card>\n    </Accordion>\n  );\n}\n\nrender(<Example />);\n'},GsbF:function(e,n){e.exports='<Accordion defaultActiveKey="0">\n  <Card>\n    <Accordion.Toggle as={Card.Header} eventKey="0">\n      Click me!\n    </Accordion.Toggle>\n    <Accordion.Collapse eventKey="0">\n      <Card.Body>Hello! I\'m the body</Card.Body>\n    </Accordion.Collapse>\n  </Card>\n  <Card>\n    <Accordion.Toggle as={Card.Header} eventKey="1">\n      Click me!\n    </Accordion.Toggle>\n    <Accordion.Collapse eventKey="1">\n      <Card.Body>Hello! I\'m another body</Card.Body>\n    </Accordion.Collapse>\n  </Card>\n</Accordion>;\n'},Q6D8:function(e,n,o){e.exports={callout:"Callout-styles-module--callout--1_K3h",warning:"Callout-styles-module--warning--39Zw- Callout-styles-module--callout--1_K3h",danger:"Callout-styles-module--danger--19388 Callout-styles-module--callout--1_K3h"}},d3um:function(e,n,o){"use strict";o.r(n),o.d(n,"query",(function(){return A})),o.d(n,"_frontmatter",(function(){return x})),o.d(n,"default",(function(){return v}));o("rGqo"),o("yt8O"),o("Btvt"),o("RW0V"),o("91GP"),o("mXGw");var t=o("7ljp"),a=o("Snbm"),d=(o("h55t"),o("vXRK")),c=o("1u5/"),r=o("yEIy"),l=o.n(r),i=o("j80X"),s=o.n(i),C=o("GsbF"),m=o.n(C),u=o("4AS7"),y=o.n(u),p=o("8Sn+"),g=o.n(p);var A="3321543001",x={},b={query:A,_frontmatter:x},h=a.a;function v(e){var n=e.components,o=function(e,n){if(null==e)return{};var o,t,a={},d=Object.keys(e);for(t=0;t<d.length;t++)o=d[t],n.indexOf(o)>=0||(a[o]=e[o]);return a}(e,["components"]);return Object(t.mdx)(h,Object.assign({},b,o,{components:n,mdxType:"MDXLayout"}),Object(t.mdx)("h1",{id:"accordion"},"Accordion"),Object(t.mdx)("p",{className:"lead"},"Accordions provide a way to restrict Card components to only open one at a time."),Object(t.mdx)("h2",{id:"examples"},"Examples"),Object(t.mdx)("p",null,"Accordions use Card components to provide styling of the Accordion components.\nUse AccordionToggle to provide a button that switches between each AccordionCollapse component."),Object(t.mdx)("h3",{id:"basic-example"},"Basic Example"),Object(t.mdx)(c.a,{codeText:l.a,mdxType:"ReactPlayground"}),Object(t.mdx)("h3",{id:"fully-collapsed-state"},"Fully Collapsed State"),Object(t.mdx)("p",null,"If you want your Accordion to start in a fully-collapsed state, then simply don't pass in a ",Object(t.mdx)("inlineCode",{parentName:"p"},"defaultActiveKey")," prop to ",Object(t.mdx)("inlineCode",{parentName:"p"},"Accordion"),"."),Object(t.mdx)(c.a,{codeText:s.a,mdxType:"ReactPlayground"}),Object(t.mdx)("h3",{id:"entire-header-clickable"},"Entire Header Clickable"),Object(t.mdx)("p",null,"Each of the Card components in the Accordion can have their entire header clickable, by setting the AccordionToggle's\nunderlying component to be a CardHeader component."),Object(t.mdx)(c.a,{codeText:m.a,mdxType:"ReactPlayground"}),Object(t.mdx)("h3",{id:"custom-toggle"},"Custom Toggle"),Object(t.mdx)("p",null,"You can now hook into the Accordion toggle functionality via ",Object(t.mdx)("inlineCode",{parentName:"p"},"useAccordionToggle")," to make custom toggle components."),Object(t.mdx)(c.a,{codeText:y.a,mdxType:"ReactPlayground"}),Object(t.mdx)("h3",{id:"custom-toggle-with-expansion-awareness"},"Custom Toggle with Expansion Awareness"),Object(t.mdx)("p",null,"You may wish to have different styles for the toggle if it's associated section is expanded,\nthis can be achieved with a custom toggle that is context aware and also takes advantage of the ",Object(t.mdx)("inlineCode",{parentName:"p"},"useAccordionToggle")," hook."),Object(t.mdx)(c.a,{codeText:g.a,mdxType:"ReactPlayground"}),Object(t.mdx)("h2",{id:"api"},"API"),Object(t.mdx)(d.a,{metadata:o.data.Accordion,mdxType:"ComponentApi"}),Object(t.mdx)(d.a,{metadata:o.data.AccordionToggle,exportedBy:o.data.Accordion,mdxType:"ComponentApi"}),Object(t.mdx)(d.a,{metadata:o.data.AccordionCollapse,exportedBy:o.data.Accordion,mdxType:"ComponentApi"}),Object(t.mdx)("h3",{id:"useaccordiontoggle"},"useAccordionToggle"),Object(t.mdx)("pre",null,Object(t.mdx)("code",Object.assign({parentName:"pre"},{className:"language-js"}),"import { useAccordionToggle } from 'react-bootstrap/AccordionToggle';\n\nconst decoratedOnClick = useAccordionToggle(eventKey, onClick);\n")))}v.isMDXComponent=!0},h55t:function(e,n,o){"use strict";var t=o("mXGw"),a=o.n(t),d=o("Q6D8");n.a=function(e){var n=e.title,o=e.children,t=e.theme;return a.a.createElement("aside",{role:"note",className:d[t||"warning"]},n&&a.a.createElement("header",{className:"h5"},n),a.a.createElement("div",null,o))}},j80X:function(e,n){e.exports='<Accordion>\n  <Card>\n    <Card.Header>\n      <Accordion.Toggle as={Button} variant="link" eventKey="0">\n        Click me!\n      </Accordion.Toggle>\n    </Card.Header>\n    <Accordion.Collapse eventKey="0">\n      <Card.Body>Hello! I\'m the body</Card.Body>\n    </Accordion.Collapse>\n  </Card>\n  <Card>\n    <Card.Header>\n      <Accordion.Toggle as={Button} variant="link" eventKey="1">\n        Click me!\n      </Accordion.Toggle>\n    </Card.Header>\n    <Accordion.Collapse eventKey="1">\n      <Card.Body>Hello! I\'m another body</Card.Body>\n    </Accordion.Collapse>\n  </Card>\n</Accordion>;\n'},yEIy:function(e,n){e.exports='<Accordion defaultActiveKey="0">\n  <Card>\n    <Card.Header>\n      <Accordion.Toggle as={Button} variant="link" eventKey="0">\n        Click me!\n      </Accordion.Toggle>\n    </Card.Header>\n    <Accordion.Collapse eventKey="0">\n      <Card.Body>Hello! I\'m the body</Card.Body>\n    </Accordion.Collapse>\n  </Card>\n  <Card>\n    <Card.Header>\n      <Accordion.Toggle as={Button} variant="link" eventKey="1">\n        Click me!\n      </Accordion.Toggle>\n    </Card.Header>\n    <Accordion.Collapse eventKey="1">\n      <Card.Body>Hello! I\'m another body</Card.Body>\n    </Accordion.Collapse>\n  </Card>\n</Accordion>;\n'}}]);
//# sourceMappingURL=component---src-pages-components-accordion-mdx-96bfbba2f7536d037453.js.map