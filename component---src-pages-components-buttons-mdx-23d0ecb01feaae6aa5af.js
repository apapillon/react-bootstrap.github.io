(window.webpackJsonp=window.webpackJsonp||[]).push([[15],{"0t76":function(n,t){n.exports='<>\n  <Button variant="primary" size="lg" disabled>\n    Primary button\n  </Button>{\' \'}\n  <Button variant="secondary" size="lg" disabled>\n    Button\n  </Button>{\' \'}\n  <Button href="#" variant="secondary" size="lg" disabled>\n    Link\n  </Button>\n</>;\n'},KfWW:function(n,t){n.exports='<>\n  <Button variant="primary" size="lg" active>\n    Primary button\n  </Button>{\' \'}\n  <Button variant="secondary" size="lg" active>\n    Button\n  </Button>\n</>;\n'},LvAG:function(n,t){n.exports='<>\n  <Button variant="outline-primary">Primary</Button>{\' \'}\n  <Button variant="outline-secondary">Secondary</Button>{\' \'}\n  <Button variant="outline-success">Success</Button>{\' \'}\n  <Button variant="outline-warning">Warning</Button>{\' \'}\n  <Button variant="outline-danger">Danger</Button>{\' \'}\n  <Button variant="outline-info">Info</Button>{\' \'}\n  <Button variant="outline-light">Light</Button>{\' \'}\n  <Button variant="outline-dark">Dark</Button>\n</>;\n'},UbFe:function(n,t){n.exports='<>\n  <Button href="#">Link</Button> <Button type="submit">Button</Button>{\' \'}\n  <Button as="input" type="button" value="Input" />{\' \'}\n  <Button as="input" type="submit" value="Submit" />{\' \'}\n  <Button as="input" type="reset" value="Reset" />\n</>;\n'},"ek+U":function(n,t){n.exports='<>\n  <div className="mb-2">\n    <Button variant="primary" size="lg">\n      Large button\n    </Button>{\' \'}\n    <Button variant="secondary" size="lg">\n      Large button\n    </Button>\n  </div>\n  <div>\n    <Button variant="primary" size="sm">\n      Small button\n    </Button>{\' \'}\n    <Button variant="secondary" size="sm">\n      Small button\n    </Button>\n  </div>\n</>;\n'},"nej/":function(n,t,e){"use strict";e.r(t),e.d(t,"_frontmatter",(function(){return z})),e.d(t,"default",(function(){return A}));var o=e("rePB"),a=e("zLVn"),i=(e("mXGw"),e("7ljp")),r=e("Snbm"),u=e("vXRK"),d=e("1u5/"),l=e("KfWW"),c=e.n(l),s=e("r3EZ"),p=e.n(s),m=e("0t76"),g=e.n(m),b=e("wo1U"),x=e.n(b),B=e("LvAG"),h=e.n(B),y=e("ek+U"),v=e.n(y),O=e("UbFe"),j=e.n(O),T=e("qqYD"),f=e.n(T),k=e("xrn6"),C=e.n(k),w=e("zpsc"),N=e.n(w),R=e("xFKm"),P=e.n(R);function L(n,t){var e=Object.keys(n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(n);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(n,t).enumerable}))),e.push.apply(e,o)}return e}function G(n){for(var t=1;t<arguments.length;t++){var e=null!=arguments[t]?arguments[t]:{};t%2?L(Object(e),!0).forEach((function(t){Object(o.a)(n,t,e[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(n,Object.getOwnPropertyDescriptors(e)):L(Object(e)).forEach((function(t){Object.defineProperty(n,t,Object.getOwnPropertyDescriptor(e,t))}))}return n}var z={},S={query:"2396275245",_frontmatter:z},D=r.a;function A(n){var t=n.components,e=Object(a.a)(n,["components"]);return Object(i.mdx)(D,G(G(G({},S),e),{},{components:t,mdxType:"MDXLayout"}),Object(i.mdx)("h1",G({},{id:"buttons"}),"Buttons"),Object(i.mdx)("p",{className:"lead"},"Custom button styles for actions in forms, dialogs, and more with support for multiple sizes, states, and more."),Object(i.mdx)("h2",G({},{id:"examples"}),"Examples"),Object(i.mdx)("p",null,"Use any of the available button style types to quickly create a styled\nbutton. Just modify the ",Object(i.mdx)("inlineCode",{parentName:"p"},"variant")," prop."),Object(i.mdx)(d.a,{codeText:P.a,mdxType:"ReactPlayground"}),Object(i.mdx)("h3",G({},{id:"outline-buttons"}),"Outline buttons"),Object(i.mdx)("p",null,"For a lighter touch, Buttons also come in ",Object(i.mdx)("inlineCode",{parentName:"p"},"outline-*"),"\nvariants with no background color."),Object(i.mdx)(d.a,{codeText:h.a,mdxType:"ReactPlayground"}),Object(i.mdx)("h2",G({},{id:"button-tags"}),"Button tags"),Object(i.mdx)("p",null,"Normally ",Object(i.mdx)("inlineCode",{parentName:"p"},"<Button>")," components will render a HTML\n",Object(i.mdx)("inlineCode",{parentName:"p"},"<button>")," element. However you can render whatever you'd\nlike, adding a ",Object(i.mdx)("inlineCode",{parentName:"p"},"href")," prop will automatically render an\n",Object(i.mdx)("inlineCode",{parentName:"p"},"<a />")," element. You can use the ",Object(i.mdx)("inlineCode",{parentName:"p"},"as")," prop to\nrender whatever your heart desires. React Bootstrap will take care of\nthe proper ARIA roles for you."),Object(i.mdx)(d.a,{codeText:j.a,mdxType:"ReactPlayground"}),Object(i.mdx)("h2",G({},{id:"sizes"}),"Sizes"),Object(i.mdx)("p",null,"Fancy larger or smaller buttons? Add ",Object(i.mdx)("inlineCode",{parentName:"p"},'size="lg"'),",\n",Object(i.mdx)("inlineCode",{parentName:"p"},'size="sm"')," for additional sizes."),Object(i.mdx)(d.a,{codeText:v.a,mdxType:"ReactPlayground"}),Object(i.mdx)("h2",G({},{id:"block-buttons"}),"Block buttons"),Object(i.mdx)("p",null,"Create responsive stacks of full-width, “block buttons” like those in Bootstrap 4\nwith a mix of our display and gap utilities. "),Object(i.mdx)(d.a,{codeText:p.a,mdxType:"ReactPlayground"}),Object(i.mdx)("h2",G({},{id:"active-state"}),"Active state"),Object(i.mdx)("p",null,"To set a button's active state simply set the component's\n",Object(i.mdx)("inlineCode",{parentName:"p"},"active")," prop."),Object(i.mdx)(d.a,{codeText:c.a,mdxType:"ReactPlayground"}),Object(i.mdx)("h3",G({},{id:"disabled-state"}),"Disabled state"),Object(i.mdx)("p",null,"Make buttons look inactive by adding the ",Object(i.mdx)("inlineCode",{parentName:"p"},"disabled")," prop to."),Object(i.mdx)(d.a,{codeText:g.a,mdxType:"ReactPlayground"}),Object(i.mdx)("p",null,"Watch out! ",Object(i.mdx)("inlineCode",{parentName:"p"},"<a>")," elements don't naturally support a\n",Object(i.mdx)("inlineCode",{parentName:"p"},"disabled")," attribute. In browsers that support it this is handled with a\n",Object(i.mdx)("inlineCode",{parentName:"p"},"point-events: none")," style but not all browsers support it\nyet."),Object(i.mdx)("p",null,"React Bootstrap will prevent any ",Object(i.mdx)("inlineCode",{parentName:"p"},"onClick")," handlers from\nfiring regardless of the rendered element."),Object(i.mdx)("h2",G({},{id:"button-loading-state"}),"Button loading state"),Object(i.mdx)("p",null,"When activating an asynchronous action from a button it is a good UX\npattern to give the user feedback as to the loading state, this can\neasily be done by updating your ",Object(i.mdx)("inlineCode",{parentName:"p"},"<Button />"),"s\nprops from a state change like below."),Object(i.mdx)(d.a,{codeText:x.a,mdxType:"ReactPlayground"}),Object(i.mdx)("h2",G({},{id:"checkbox--radio"}),"Checkbox / Radio"),Object(i.mdx)("p",null,"Buttons can also be used to style ",Object(i.mdx)("inlineCode",{parentName:"p"},"checkbox")," and\n",Object(i.mdx)("inlineCode",{parentName:"p"},"radio")," form elements. This is helpful when you want a toggle\nbutton that works neatly inside an HTML form."),Object(i.mdx)(d.a,{codeText:f.a,mdxType:"ReactPlayground"}),Object(i.mdx)("p",null,"The above handles styling, But requires manually controlling the\n",Object(i.mdx)("inlineCode",{parentName:"p"},"checked")," state for each radio or checkbox in the group."),Object(i.mdx)("p",null,"For a nicer experience with checked state management use the\n",Object(i.mdx)("inlineCode",{parentName:"p"},"<ToggleButtonGroup>")," instead of a ",Object(i.mdx)("inlineCode",{parentName:"p"},"<ButtonGroup>")," component.\nThe group behaves as a form component, where the ",Object(i.mdx)("inlineCode",{parentName:"p"},"value")," is an array of the selected\n",Object(i.mdx)("inlineCode",{parentName:"p"},"value"),"s for a named checkbox group or the single toggled\n",Object(i.mdx)("inlineCode",{parentName:"p"},"value")," in a similarly named radio group."),Object(i.mdx)("h4",G({},{id:"uncontrolled"}),"Uncontrolled"),Object(i.mdx)(d.a,{codeText:N.a,mdxType:"ReactPlayground"}),Object(i.mdx)("h4",G({},{id:"controlled"}),"Controlled"),Object(i.mdx)(d.a,{codeText:C.a,mdxType:"ReactPlayground"}),Object(i.mdx)("h2",G({},{id:"api"}),"API"),Object(i.mdx)(u.a,{metadata:e.data.Button,mdxType:"ComponentApi"}),Object(i.mdx)(u.a,{metadata:e.data.ToggleButtonGroup,mdxType:"ComponentApi"}),Object(i.mdx)(u.a,{metadata:e.data.ToggleButton,mdxType:"ComponentApi"}))}A.isMDXComponent=!0},qqYD:function(n,t){n.exports='function ToggleButtonExample() {\n  const [checked, setChecked] = useState(false);\n  const [radioValue, setRadioValue] = useState(\'1\');\n\n  const radios = [\n    { name: \'Active\', value: \'1\' },\n    { name: \'Radio\', value: \'2\' },\n    { name: \'Radio\', value: \'3\' },\n  ];\n\n  return (\n    <>\n      <ButtonGroup className="mb-2">\n        <ToggleButton\n          id="toggle-check"\n          type="checkbox"\n          variant="secondary"\n          checked={checked}\n          value="1"\n          onChange={(e) => setChecked(e.currentTarget.checked)}\n        >\n          Checked\n        </ToggleButton>\n      </ButtonGroup>\n      <br />\n      <ButtonGroup className="mb-2">\n        {radios.map((radio, idx) => (\n          <ToggleButton\n            key={idx}\n            id={`radio-${idx}`}\n            type="radio"\n            variant="secondary"\n            name="radio"\n            value={radio.value}\n            checked={radioValue === radio.value}\n            onChange={(e) => setRadioValue(e.currentTarget.value)}\n          >\n            {radio.name}\n          </ToggleButton>\n        ))}\n      </ButtonGroup>\n      <br />\n      <ToggleButton\n        className="mb-2"\n        id="toggle-check"\n        type="checkbox"\n        variant="outline-primary"\n        checked={checked}\n        value="1"\n        onChange={(e) => setChecked(e.currentTarget.checked)}\n      >\n        Checked\n      </ToggleButton>\n      <br />\n      <ButtonGroup>\n        {radios.map((radio, idx) => (\n          <ToggleButton\n            key={idx}\n            id={`radio-${idx}`}\n            type="radio"\n            variant={idx % 2 ? \'outline-success\' : \'outline-danger\'}\n            name="radio"\n            value={radio.value}\n            checked={radioValue === radio.value}\n            onChange={(e) => setRadioValue(e.currentTarget.value)}\n          >\n            {radio.name}\n          </ToggleButton>\n        ))}\n      </ButtonGroup>\n    </>\n  );\n}\n\nrender(<ToggleButtonExample />);\n'},r3EZ:function(n,t){n.exports='<div className="d-grid gap-2">\n  <Button variant="primary" size="lg">\n    Block level button\n  </Button>\n  <Button variant="secondary" size="lg">\n    Block level button\n  </Button>\n</div>;\n'},wo1U:function(n,t){n.exports="function simulateNetworkRequest() {\n  return new Promise((resolve) => setTimeout(resolve, 2000));\n}\n\nfunction LoadingButton() {\n  const [isLoading, setLoading] = useState(false);\n\n  useEffect(() => {\n    if (isLoading) {\n      simulateNetworkRequest().then(() => {\n        setLoading(false);\n      });\n    }\n  }, [isLoading]);\n\n  const handleClick = () => setLoading(true);\n\n  return (\n    <Button\n      variant=\"primary\"\n      disabled={isLoading}\n      onClick={!isLoading ? handleClick : null}\n    >\n      {isLoading ? 'Loading…' : 'Click to load'}\n    </Button>\n  );\n}\n\nrender(<LoadingButton />);\n"},xFKm:function(n,t){n.exports='<>\n  <Button variant="primary">Primary</Button>{\' \'}\n  <Button variant="secondary">Secondary</Button>{\' \'}\n  <Button variant="success">Success</Button>{\' \'}\n  <Button variant="warning">Warning</Button>{\' \'}\n  <Button variant="danger">Danger</Button> <Button variant="info">Info</Button>{\' \'}\n  <Button variant="light">Light</Button> <Button variant="dark">Dark</Button>{\' \'}\n  <Button variant="link">Link</Button>\n</>;\n'},xrn6:function(n,t){n.exports='function ToggleButtonGroupControlled() {\n  const [value, setValue] = useState([1, 3]);\n\n  /*\n   * The second argument that will be passed to\n   * `handleChange` from `ToggleButtonGroup`\n   * is the SyntheticEvent object, but we are\n   * not using it in this example so we will omit it.\n   */\n  const handleChange = (val) => setValue(val);\n\n  return (\n    <ToggleButtonGroup type="checkbox" value={value} onChange={handleChange}>\n      <ToggleButton id="tbg-btn-1" value={1}>\n        Option 1\n      </ToggleButton>\n      <ToggleButton id="tbg-btn-2" value={2}>\n        Option 2\n      </ToggleButton>\n      <ToggleButton id="tbg-btn-3" value={3}>\n        Option 3\n      </ToggleButton>\n    </ToggleButtonGroup>\n  );\n}\n\nrender(<ToggleButtonGroupControlled />);\n'},zpsc:function(n,t){n.exports='<>\n  <ToggleButtonGroup type="checkbox" defaultValue={[1, 3]} className="mb-2">\n    <ToggleButton id="tbg-check-1" value={1}>\n      Checkbox 1 (pre-checked)\n    </ToggleButton>\n    <ToggleButton id="tbg-check-2" value={2}>\n      Checkbox 2\n    </ToggleButton>\n    <ToggleButton id="tbg-check-3" value={3}>\n      Checkbox 3 (pre-checked)\n    </ToggleButton>\n  </ToggleButtonGroup>\n  <br />\n  <ToggleButtonGroup type="radio" name="options" defaultValue={1}>\n    <ToggleButton id="tbg-radio-1" value={1}>\n      Radio 1 (pre-checked)\n    </ToggleButton>\n    <ToggleButton id="tbg-radio-2" value={2}>\n      Radio 2\n    </ToggleButton>\n    <ToggleButton id="tbg-radio-3" value={3}>\n      Radio 3\n    </ToggleButton>\n  </ToggleButtonGroup>\n</>;\n'}}]);
//# sourceMappingURL=component---src-pages-components-buttons-mdx-23d0ecb01feaae6aa5af.js.map