(window.webpackJsonp=window.webpackJsonp||[]).push([[15],{"0t76":function(t,n){t.exports='<>\n  <Button variant="primary" size="lg" disabled>\n    Primary button\n  </Button>{\' \'}\n  <Button variant="secondary" size="lg" disabled>\n    Button\n  </Button>{\' \'}\n  <Button href="#" variant="secondary" size="lg" disabled>\n    Link\n  </Button>\n</>;\n'},KfWW:function(t,n){t.exports='<>\n  <Button variant="primary" size="lg" active>\n    Primary button\n  </Button>{\' \'}\n  <Button variant="secondary" size="lg" active>\n    Button\n  </Button>\n</>;\n'},LvAG:function(t,n){t.exports='<>\n  <Button variant="outline-primary">Primary</Button>{\' \'}\n  <Button variant="outline-secondary">Secondary</Button>{\' \'}\n  <Button variant="outline-success">Success</Button>{\' \'}\n  <Button variant="outline-warning">Warning</Button>{\' \'}\n  <Button variant="outline-danger">Danger</Button>{\' \'}\n  <Button variant="outline-info">Info</Button>{\' \'}\n  <Button variant="outline-light">Light</Button>{\' \'}\n  <Button variant="outline-dark">Dark</Button>\n</>;\n'},UbFe:function(t,n){t.exports='<>\n  <Button href="#">Link</Button> <Button type="submit">Button</Button>{\' \'}\n  <Button as="input" type="button" value="Input" />{\' \'}\n  <Button as="input" type="submit" value="Submit" />{\' \'}\n  <Button as="input" type="reset" value="Reset" />\n</>;\n'},"ek+U":function(t,n){t.exports='<>\n  <div className="mb-2">\n    <Button variant="primary" size="lg">\n      Large button\n    </Button>{\' \'}\n    <Button variant="secondary" size="lg">\n      Large button\n    </Button>\n  </div>\n  <div>\n    <Button variant="primary" size="sm">\n      Small button\n    </Button>{\' \'}\n    <Button variant="secondary" size="sm">\n      Small button\n    </Button>\n  </div>\n</>;\n'},"nej/":function(t,n,e){"use strict";e.r(n),e.d(n,"query",(function(){return R})),e.d(n,"_frontmatter",(function(){return L})),e.d(n,"default",(function(){return P}));e("rGqo"),e("yt8O"),e("Btvt"),e("RW0V"),e("91GP"),e("mXGw");var o=e("7ljp"),a=e("Snbm"),i=e("vXRK"),u=e("1u5/"),r=e("KfWW"),l=e.n(r),d=e("r3EZ"),c=e.n(d),s=e("0t76"),p=e.n(s),m=e("wo1U"),g=e.n(m),b=e("LvAG"),B=e.n(b),x=e("ek+U"),h=e.n(x),y=e("UbFe"),v=e.n(y),O=e("qqYD"),T=e.n(O),j=e("xrn6"),f=e.n(j),k=e("zpsc"),C=e.n(k),w=e("xFKm"),N=e.n(w);var R="377994179",L={},G={query:R,_frontmatter:L},z=a.a;function P(t){var n=t.components,e=function(t,n){if(null==t)return{};var e,o,a={},i=Object.keys(t);for(o=0;o<i.length;o++)e=i[o],n.indexOf(e)>=0||(a[e]=t[e]);return a}(t,["components"]);return Object(o.mdx)(z,Object.assign({},G,e,{components:n,mdxType:"MDXLayout"}),Object(o.mdx)("h1",{id:"buttons"},"Buttons"),Object(o.mdx)("p",{className:"lead"},"Custom button styles for actions in forms, dialogs, and more with support for multiple sizes, states, and more."),Object(o.mdx)("h2",{id:"examples"},"Examples"),Object(o.mdx)("p",null,"Use any of the available button style types to quickly create a styled\nbutton. Just modify the ",Object(o.mdx)("inlineCode",{parentName:"p"},"variant")," prop."),Object(o.mdx)(u.a,{codeText:N.a,mdxType:"ReactPlayground"}),Object(o.mdx)("h3",{id:"outline-buttons"},"Outline buttons"),Object(o.mdx)("p",null,"For a lighter touch, Buttons also come in ",Object(o.mdx)("inlineCode",{parentName:"p"},"outline-*"),"\nvariants with no background color."),Object(o.mdx)(u.a,{codeText:B.a,mdxType:"ReactPlayground"}),Object(o.mdx)("h2",{id:"button-tags"},"Button tags"),Object(o.mdx)("p",null,"Normally ",Object(o.mdx)("inlineCode",{parentName:"p"},"<Button>")," components will render a HTML\n",Object(o.mdx)("inlineCode",{parentName:"p"},"<button>")," element. However you can render whatever you'd\nlike, adding a ",Object(o.mdx)("inlineCode",{parentName:"p"},"href")," prop will automatically render an\n",Object(o.mdx)("inlineCode",{parentName:"p"},"<a />")," element. You can use the ",Object(o.mdx)("inlineCode",{parentName:"p"},"as")," prop to\nrender whatever your heart desires. React Bootstrap will take care of\nthe proper ARIA roles for you."),Object(o.mdx)(u.a,{codeText:v.a,mdxType:"ReactPlayground"}),Object(o.mdx)("h2",{id:"sizes"},"Sizes"),Object(o.mdx)("p",null,"Fancy larger or smaller buttons? Add ",Object(o.mdx)("inlineCode",{parentName:"p"},'size="lg"'),",\n",Object(o.mdx)("inlineCode",{parentName:"p"},'size="sm"')," for additional sizes."),Object(o.mdx)(u.a,{codeText:h.a,mdxType:"ReactPlayground"}),Object(o.mdx)("p",null,"Create block level buttons—those that span the full width of a parent—by\nadding ",Object(o.mdx)("inlineCode",{parentName:"p"},"block")),Object(o.mdx)(u.a,{codeText:c.a,mdxType:"ReactPlayground"}),Object(o.mdx)("h2",{id:"active-state"},"Active state"),Object(o.mdx)("p",null,"To set a button's active state simply set the component's\n",Object(o.mdx)("inlineCode",{parentName:"p"},"active")," prop."),Object(o.mdx)(u.a,{codeText:l.a,mdxType:"ReactPlayground"}),Object(o.mdx)("h3",{id:"disabled-state"},"Disabled state"),Object(o.mdx)("p",null,"Make buttons look inactive by adding the ",Object(o.mdx)("inlineCode",{parentName:"p"},"disabled")," prop to."),Object(o.mdx)(u.a,{codeText:p.a,mdxType:"ReactPlayground"}),Object(o.mdx)("p",null,"Watch out! ",Object(o.mdx)("inlineCode",{parentName:"p"},"<a>")," elements don't naturally support a\n",Object(o.mdx)("inlineCode",{parentName:"p"},"disabled")," attribute. In browsers that support it this is handled with a\n",Object(o.mdx)("inlineCode",{parentName:"p"},"point-events: none")," style but not all browsers support it\nyet."),Object(o.mdx)("p",null,"React Bootstrap will prevent any ",Object(o.mdx)("inlineCode",{parentName:"p"},"onClick")," handlers from\nfiring regardless of the rendered element."),Object(o.mdx)("h2",{id:"button-loading-state"},"Button loading state"),Object(o.mdx)("p",null,"When activating an asynchronous action from a button it is a good UX\npattern to give the user feedback as to the loading state, this can\neasily be done by updating your ",Object(o.mdx)("inlineCode",{parentName:"p"},"<Button />"),"s\nprops from a state change like below."),Object(o.mdx)(u.a,{codeText:g.a,mdxType:"ReactPlayground"}),Object(o.mdx)("h2",{id:"checkbox--radio"},"Checkbox / Radio"),Object(o.mdx)("p",null,"Buttons can also be used to style ",Object(o.mdx)("inlineCode",{parentName:"p"},"checkbox")," and\n",Object(o.mdx)("inlineCode",{parentName:"p"},"radio")," form elements. This is helpful when you want a toggle\nbutton that works neatly inside an HTML form."),Object(o.mdx)(u.a,{codeText:T.a,mdxType:"ReactPlayground"}),Object(o.mdx)("p",null,"The above handles styling, But requires manually controlling the\n",Object(o.mdx)("inlineCode",{parentName:"p"},"checked")," state for each radio or checkbox in the group."),Object(o.mdx)("p",null,"For a nicer experience with checked state management use the\n",Object(o.mdx)("inlineCode",{parentName:"p"},"<ToggleButtonGroup>")," instead of a ",Object(o.mdx)("inlineCode",{parentName:"p"},"<ButtonGroup toggle>")," component.\nThe group behaves as a form component, where the ",Object(o.mdx)("inlineCode",{parentName:"p"},"value")," is an array of the selected\n",Object(o.mdx)("inlineCode",{parentName:"p"},"value"),"s for a named checkbox group or the single toggled\n",Object(o.mdx)("inlineCode",{parentName:"p"},"value")," in a similarly named radio group."),Object(o.mdx)("h4",{id:"uncontrolled"},"Uncontrolled"),Object(o.mdx)(u.a,{codeText:C.a,mdxType:"ReactPlayground"}),Object(o.mdx)("h4",{id:"controlled"},"Controlled"),Object(o.mdx)(u.a,{codeText:f.a,mdxType:"ReactPlayground"}),Object(o.mdx)("h2",{id:"api"},"API"),Object(o.mdx)(i.a,{metadata:e.data.Button,mdxType:"ComponentApi"}),Object(o.mdx)(i.a,{metadata:e.data.ToggleButtonGroup,mdxType:"ComponentApi"}),Object(o.mdx)(i.a,{metadata:e.data.ToggleButton,mdxType:"ComponentApi"}))}P.isMDXComponent=!0},qqYD:function(t,n){t.exports='<>\n  <ButtonGroup toggle className="mb-2">\n    <ToggleButton type="checkbox" defaultChecked value="1">\n      Checked\n    </ToggleButton>\n  </ButtonGroup>\n  <br />\n  <ButtonGroup toggle>\n    <ToggleButton type="radio" name="radio" defaultChecked value="1">\n      Active\n    </ToggleButton>\n    <ToggleButton type="radio" name="radio" value="2">\n      Radio\n    </ToggleButton>\n    <ToggleButton type="radio" name="radio" value="3">\n      Radio\n    </ToggleButton>\n  </ButtonGroup>\n</>;\n'},r3EZ:function(t,n){t.exports='<>\n  <Button variant="primary" size="lg" block>\n    Block level button\n  </Button>\n  <Button variant="secondary" size="lg" block>\n    Block level button\n  </Button>\n</>;\n'},wo1U:function(t,n){t.exports="function simulateNetworkRequest() {\n  return new Promise((resolve) => setTimeout(resolve, 2000));\n}\n\nfunction LoadingButton() {\n  const [isLoading, setLoading] = useState(false);\n\n  useEffect(() => {\n    if (isLoading) {\n      simulateNetworkRequest().then(() => {\n        setLoading(false);\n      });\n    }\n  }, [isLoading]);\n\n  const handleClick = () => setLoading(true);\n\n  return (\n    <Button\n      variant=\"primary\"\n      disabled={isLoading}\n      onClick={!isLoading ? handleClick : null}\n    >\n      {isLoading ? 'Loading…' : 'Click to load'}\n    </Button>\n  );\n}\n\nrender(<LoadingButton />);\n"},xFKm:function(t,n){t.exports='<>\n  <Button variant="primary">Primary</Button>{\' \'}\n  <Button variant="secondary">Secondary</Button>{\' \'}\n  <Button variant="success">Success</Button>{\' \'}\n  <Button variant="warning">Warning</Button>{\' \'}\n  <Button variant="danger">Danger</Button> <Button variant="info">Info</Button>{\' \'}\n  <Button variant="light">Light</Button> <Button variant="dark">Dark</Button>{\' \'}\n  <Button variant="link">Link</Button>\n</>;\n'},xrn6:function(t,n){t.exports='function ToggleButtonGroupControlled() {\n  const [value, setValue] = useState([1, 3]);\n\n  /*\n   * The second argument that will be passed to\n   * `handleChange` from `ToggleButtonGroup`\n   * is the SyntheticEvent object, but we are\n   * not using it in this example so we will omit it.\n   */\n  const handleChange = (val) => setValue(val);\n\n  return (\n    <ToggleButtonGroup type="checkbox" value={value} onChange={handleChange}>\n      <ToggleButton value={1}>Option 1</ToggleButton>\n      <ToggleButton value={2}>Option 2</ToggleButton>\n      <ToggleButton value={3}>Option 3</ToggleButton>\n    </ToggleButtonGroup>\n  );\n}\n\nrender(<ToggleButtonGroupControlled />);\n'},zpsc:function(t,n){t.exports='<>\n  <ToggleButtonGroup type="checkbox" defaultValue={[1, 3]} className="mb-2">\n    <ToggleButton value={1}>Checkbox 1 (pre-checked)</ToggleButton>\n    <ToggleButton value={2}>Checkbox 2</ToggleButton>\n    <ToggleButton value={3}>Checkbox 3 (pre-checked)</ToggleButton>\n  </ToggleButtonGroup>\n  <br />\n  <ToggleButtonGroup type="radio" name="options" defaultValue={1}>\n    <ToggleButton value={1}>Radio 1 (pre-checked)</ToggleButton>\n    <ToggleButton value={2}>Radio 2</ToggleButton>\n    <ToggleButton value={3}>Radio 3</ToggleButton>\n  </ToggleButtonGroup>\n</>;\n'}}]);
//# sourceMappingURL=component---src-pages-components-buttons-mdx-46de72bc5295b336bd29.js.map