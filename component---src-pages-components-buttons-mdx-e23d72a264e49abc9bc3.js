(window.webpackJsonp=window.webpackJsonp||[]).push([[16],{"0t76":function(n,t){n.exports='import Button from \'react-bootstrap/Button\';\n\nfunction DisabledExample() {\n  return (\n    <>\n      <Button variant="primary" size="lg" disabled>\n        Primary button\n      </Button>{\' \'}\n      <Button variant="secondary" size="lg" disabled>\n        Button\n      </Button>{\' \'}\n      <Button href="#" variant="secondary" size="lg" disabled>\n        Link\n      </Button>\n    </>\n  );\n}\n\nexport default DisabledExample;\n'},KfWW:function(n,t){n.exports='import Button from \'react-bootstrap/Button\';\n\nfunction ActiveExample() {\n  return (\n    <>\n      <Button variant="primary" size="lg" active>\n        Primary button\n      </Button>{\' \'}\n      <Button variant="secondary" size="lg" active>\n        Button\n      </Button>\n    </>\n  );\n}\n\nexport default ActiveExample;\n'},LvAG:function(n,t){n.exports="import Button from 'react-bootstrap/Button';\n\nfunction OutlineTypesExample() {\n  return (\n    <>\n      <Button variant=\"outline-primary\">Primary</Button>{' '}\n      <Button variant=\"outline-secondary\">Secondary</Button>{' '}\n      <Button variant=\"outline-success\">Success</Button>{' '}\n      <Button variant=\"outline-warning\">Warning</Button>{' '}\n      <Button variant=\"outline-danger\">Danger</Button>{' '}\n      <Button variant=\"outline-info\">Info</Button>{' '}\n      <Button variant=\"outline-light\">Light</Button>{' '}\n      <Button variant=\"outline-dark\">Dark</Button>\n    </>\n  );\n}\n\nexport default OutlineTypesExample;\n"},UbFe:function(n,t){n.exports='import Button from \'react-bootstrap/Button\';\n\nfunction TagTypesExample() {\n  return (\n    <>\n      <Button href="#">Link</Button> <Button type="submit">Button</Button>{\' \'}\n      <Button as="input" type="button" value="Input" />{\' \'}\n      <Button as="input" type="submit" value="Submit" />{\' \'}\n      <Button as="input" type="reset" value="Reset" />\n    </>\n  );\n}\n\nexport default TagTypesExample;\n'},"ek+U":function(n,t){n.exports='import Button from \'react-bootstrap/Button\';\n\nfunction SizesExample() {\n  return (\n    <>\n      <div className="mb-2">\n        <Button variant="primary" size="lg">\n          Large button\n        </Button>{\' \'}\n        <Button variant="secondary" size="lg">\n          Large button\n        </Button>\n      </div>\n      <div>\n        <Button variant="primary" size="sm">\n          Small button\n        </Button>{\' \'}\n        <Button variant="secondary" size="sm">\n          Small button\n        </Button>\n      </div>\n    </>\n  );\n}\n\nexport default SizesExample;\n'},"nej/":function(n,t,e){"use strict";e.r(t),e.d(t,"_frontmatter",(function(){return E})),e.d(t,"default",(function(){return D}));var o,a=e("wx14"),r=e("zLVn"),u=(e("mXGw"),e("7ljp")),i=e("Snbm"),l=e("vXRK"),d=e("1u5/"),c=e("KfWW"),s=e.n(c),p=e("r3EZ"),m=e.n(p),g=e("0t76"),b=e.n(g),B=e("wo1U"),x=e.n(B),h=e("LvAG"),v=e.n(h),y=e("ek+U"),f=e.n(y),T=e("UbFe"),k=e.n(T),O=e("qqYD"),j=e.n(O),C=e("xrn6"),w=e.n(C),N=e("zpsc"),R=e.n(N),G=e("xFKm"),L=e.n(G),z=["components"],E={},P=(o="PageHeader",function(n){return console.warn("Component "+o+" was not imported, exported, or provided by MDXProvider as global scope"),Object(u.mdx)("div",n)}),S={query:"2396275245",_frontmatter:E},A=i.a;function D(n){var t=n.components,e=Object(r.a)(n,z);return Object(u.mdx)(A,Object(a.a)({},S,e,{components:t,mdxType:"MDXLayout"}),Object(u.mdx)(P,{title:"Buttons",subTitle:"Use Bootstrap’s custom button styles for actions in forms, dialogs, and more with support for multiple sizes, states, and more.",mdxType:"PageHeader"}),Object(u.mdx)("h2",{id:"examples"},"Examples"),Object(u.mdx)("p",null,"Use any of the available button style types to quickly create a styled\nbutton. Just modify the ",Object(u.mdx)("inlineCode",{parentName:"p"},"variant")," prop."),Object(u.mdx)(d.a,{codeText:L.a,mdxType:"ReactPlayground"}),Object(u.mdx)("h3",{id:"outline-buttons"},"Outline buttons"),Object(u.mdx)("p",null,"For a lighter touch, Buttons also come in ",Object(u.mdx)("inlineCode",{parentName:"p"},"outline-*"),"\nvariants with no background color."),Object(u.mdx)(d.a,{codeText:v.a,mdxType:"ReactPlayground"}),Object(u.mdx)("h2",{id:"button-tags"},"Button tags"),Object(u.mdx)("p",null,"Normally ",Object(u.mdx)("inlineCode",{parentName:"p"},"<Button>")," components will render a HTML\n",Object(u.mdx)("inlineCode",{parentName:"p"},"<button>")," element. However you can render whatever you'd\nlike, adding a ",Object(u.mdx)("inlineCode",{parentName:"p"},"href")," prop will automatically render an\n",Object(u.mdx)("inlineCode",{parentName:"p"},"<a />")," element. You can use the ",Object(u.mdx)("inlineCode",{parentName:"p"},"as")," prop to\nrender whatever your heart desires. React Bootstrap will take care of\nthe proper ARIA roles for you."),Object(u.mdx)(d.a,{codeText:k.a,mdxType:"ReactPlayground"}),Object(u.mdx)("h2",{id:"sizes"},"Sizes"),Object(u.mdx)("p",null,"Fancy larger or smaller buttons? Add ",Object(u.mdx)("inlineCode",{parentName:"p"},'size="lg"'),",\n",Object(u.mdx)("inlineCode",{parentName:"p"},'size="sm"')," for additional sizes."),Object(u.mdx)(d.a,{codeText:f.a,mdxType:"ReactPlayground"}),Object(u.mdx)("h2",{id:"block-buttons"},"Block buttons"),Object(u.mdx)("p",null,"Create responsive stacks of full-width, “block buttons” like those in Bootstrap 4\nwith a mix of our display and gap utilities."),Object(u.mdx)(d.a,{codeText:m.a,mdxType:"ReactPlayground"}),Object(u.mdx)("h2",{id:"active-state"},"Active state"),Object(u.mdx)("p",null,"To set a button's active state simply set the component's\n",Object(u.mdx)("inlineCode",{parentName:"p"},"active")," prop."),Object(u.mdx)(d.a,{codeText:s.a,mdxType:"ReactPlayground"}),Object(u.mdx)("h3",{id:"disabled-state"},"Disabled state"),Object(u.mdx)("p",null,"Make buttons look inactive by adding the ",Object(u.mdx)("inlineCode",{parentName:"p"},"disabled")," prop to."),Object(u.mdx)(d.a,{codeText:b.a,mdxType:"ReactPlayground"}),Object(u.mdx)("p",null,"Watch out! ",Object(u.mdx)("inlineCode",{parentName:"p"},"<a>")," elements don't naturally support a\n",Object(u.mdx)("inlineCode",{parentName:"p"},"disabled")," attribute. In browsers that support it this is handled with a\n",Object(u.mdx)("inlineCode",{parentName:"p"},"point-events: none")," style but not all browsers support it\nyet."),Object(u.mdx)("p",null,"React Bootstrap will prevent any ",Object(u.mdx)("inlineCode",{parentName:"p"},"onClick")," handlers from\nfiring regardless of the rendered element."),Object(u.mdx)("h2",{id:"button-loading-state"},"Button loading state"),Object(u.mdx)("p",null,"When activating an asynchronous action from a button it is a good UX\npattern to give the user feedback as to the loading state, this can\neasily be done by updating your ",Object(u.mdx)("inlineCode",{parentName:"p"},"<Button />"),"s\nprops from a state change like below."),Object(u.mdx)(d.a,{codeText:x.a,mdxType:"ReactPlayground"}),Object(u.mdx)("h2",{id:"checkbox--radio"},"Checkbox / Radio"),Object(u.mdx)("p",null,"Buttons can also be used to style ",Object(u.mdx)("inlineCode",{parentName:"p"},"checkbox")," and\n",Object(u.mdx)("inlineCode",{parentName:"p"},"radio")," form elements. This is helpful when you want a toggle\nbutton that works neatly inside an HTML form."),Object(u.mdx)(d.a,{codeText:j.a,mdxType:"ReactPlayground"}),Object(u.mdx)("p",null,"The above handles styling, But requires manually controlling the\n",Object(u.mdx)("inlineCode",{parentName:"p"},"checked")," state for each radio or checkbox in the group."),Object(u.mdx)("p",null,"For a nicer experience with checked state management use the\n",Object(u.mdx)("inlineCode",{parentName:"p"},"<ToggleButtonGroup>")," instead of a ",Object(u.mdx)("inlineCode",{parentName:"p"},"<ButtonGroup>")," component.\nThe group behaves as a form component, where the ",Object(u.mdx)("inlineCode",{parentName:"p"},"value")," is an array of the selected\n",Object(u.mdx)("inlineCode",{parentName:"p"},"value"),"s for a named checkbox group or the single toggled\n",Object(u.mdx)("inlineCode",{parentName:"p"},"value")," in a similarly named radio group."),Object(u.mdx)("h4",{id:"uncontrolled"},"Uncontrolled"),Object(u.mdx)(d.a,{codeText:R.a,mdxType:"ReactPlayground"}),Object(u.mdx)("h4",{id:"controlled"},"Controlled"),Object(u.mdx)(d.a,{codeText:w.a,mdxType:"ReactPlayground"}),Object(u.mdx)("h2",{id:"api"},"API"),Object(u.mdx)(l.a,{metadata:e.data.Button,mdxType:"ComponentApi"}),Object(u.mdx)(l.a,{metadata:e.data.ToggleButtonGroup,mdxType:"ComponentApi"}),Object(u.mdx)(l.a,{metadata:e.data.ToggleButton,mdxType:"ComponentApi"}))}D.isMDXComponent=!0},qqYD:function(n,t){n.exports='import React, { useState } from \'react\';\nimport ButtonGroup from \'react-bootstrap/ButtonGroup\';\nimport ToggleButton from \'react-bootstrap/ToggleButton\';\n\nfunction ToggleButtonExample() {\n  const [checked, setChecked] = useState(false);\n  const [radioValue, setRadioValue] = useState(\'1\');\n\n  const radios = [\n    { name: \'Active\', value: \'1\' },\n    { name: \'Radio\', value: \'2\' },\n    { name: \'Radio\', value: \'3\' },\n  ];\n\n  return (\n    <>\n      <ButtonGroup className="mb-2">\n        <ToggleButton\n          id="toggle-check"\n          type="checkbox"\n          variant="secondary"\n          checked={checked}\n          value="1"\n          onChange={(e) => setChecked(e.currentTarget.checked)}\n        >\n          Checked\n        </ToggleButton>\n      </ButtonGroup>\n      <br />\n      <ButtonGroup className="mb-2">\n        {radios.map((radio, idx) => (\n          <ToggleButton\n            key={idx}\n            id={`radio-${idx}`}\n            type="radio"\n            variant="secondary"\n            name="radio"\n            value={radio.value}\n            checked={radioValue === radio.value}\n            onChange={(e) => setRadioValue(e.currentTarget.value)}\n          >\n            {radio.name}\n          </ToggleButton>\n        ))}\n      </ButtonGroup>\n      <br />\n      <ToggleButton\n        className="mb-2"\n        id="toggle-check"\n        type="checkbox"\n        variant="outline-primary"\n        checked={checked}\n        value="1"\n        onChange={(e) => setChecked(e.currentTarget.checked)}\n      >\n        Checked\n      </ToggleButton>\n      <br />\n      <ButtonGroup>\n        {radios.map((radio, idx) => (\n          <ToggleButton\n            key={idx}\n            id={`radio-${idx}`}\n            type="radio"\n            variant={idx % 2 ? \'outline-success\' : \'outline-danger\'}\n            name="radio"\n            value={radio.value}\n            checked={radioValue === radio.value}\n            onChange={(e) => setRadioValue(e.currentTarget.value)}\n          >\n            {radio.name}\n          </ToggleButton>\n        ))}\n      </ButtonGroup>\n    </>\n  );\n}\n\nrender(<ToggleButtonExample />);\n'},r3EZ:function(n,t){n.exports='import Button from \'react-bootstrap/Button\';\n\nfunction BlockExample() {\n  return (\n    <div className="d-grid gap-2">\n      <Button variant="primary" size="lg">\n        Block level button\n      </Button>\n      <Button variant="secondary" size="lg">\n        Block level button\n      </Button>\n    </div>\n  );\n}\n\nexport default BlockExample;\n'},wo1U:function(n,t){n.exports="import React, { useEffect, useState } from 'react';\nimport Button from 'react-bootstrap/Button';\n\nfunction simulateNetworkRequest() {\n  return new Promise((resolve) => setTimeout(resolve, 2000));\n}\n\nfunction LoadingButton() {\n  const [isLoading, setLoading] = useState(false);\n\n  useEffect(() => {\n    if (isLoading) {\n      simulateNetworkRequest().then(() => {\n        setLoading(false);\n      });\n    }\n  }, [isLoading]);\n\n  const handleClick = () => setLoading(true);\n\n  return (\n    <Button\n      variant=\"primary\"\n      disabled={isLoading}\n      onClick={!isLoading ? handleClick : null}\n    >\n      {isLoading ? 'Loading…' : 'Click to load'}\n    </Button>\n  );\n}\n\nrender(<LoadingButton />);\n"},xFKm:function(n,t){n.exports='import Button from \'react-bootstrap/Button\';\n\nfunction TypesExample() {\n  return (\n    <>\n      <Button variant="primary">Primary</Button>{\' \'}\n      <Button variant="secondary">Secondary</Button>{\' \'}\n      <Button variant="success">Success</Button>{\' \'}\n      <Button variant="warning">Warning</Button>{\' \'}\n      <Button variant="danger">Danger</Button>{\' \'}\n      <Button variant="info">Info</Button>{\' \'}\n      <Button variant="light">Light</Button>{\' \'}\n      <Button variant="dark">Dark</Button> <Button variant="link">Link</Button>\n    </>\n  );\n}\n\nexport default TypesExample;\n'},xrn6:function(n,t){n.exports='import React, { useState } from \'react\';\nimport ToggleButton from \'react-bootstrap/ToggleButton\';\nimport ToggleButtonGroup from \'react-bootstrap/ToggleButtonGroup\';\n\nfunction ToggleButtonGroupControlled() {\n  const [value, setValue] = useState([1, 3]);\n\n  /*\n   * The second argument that will be passed to\n   * `handleChange` from `ToggleButtonGroup`\n   * is the SyntheticEvent object, but we are\n   * not using it in this example so we will omit it.\n   */\n  const handleChange = (val) => setValue(val);\n\n  return (\n    <ToggleButtonGroup type="checkbox" value={value} onChange={handleChange}>\n      <ToggleButton id="tbg-btn-1" value={1}>\n        Option 1\n      </ToggleButton>\n      <ToggleButton id="tbg-btn-2" value={2}>\n        Option 2\n      </ToggleButton>\n      <ToggleButton id="tbg-btn-3" value={3}>\n        Option 3\n      </ToggleButton>\n    </ToggleButtonGroup>\n  );\n}\n\nrender(<ToggleButtonGroupControlled />);\n'},zpsc:function(n,t){n.exports='import ToggleButton from \'react-bootstrap/ToggleButton\';\nimport ToggleButtonGroup from \'react-bootstrap/ToggleButtonGroup\';\n\nfunction ToggleButtonGroupUncontrolled() {\n  return (\n    <>\n      <ToggleButtonGroup type="checkbox" defaultValue={[1, 3]} className="mb-2">\n        <ToggleButton id="tbg-check-1" value={1}>\n          Checkbox 1 (pre-checked)\n        </ToggleButton>\n        <ToggleButton id="tbg-check-2" value={2}>\n          Checkbox 2\n        </ToggleButton>\n        <ToggleButton id="tbg-check-3" value={3}>\n          Checkbox 3 (pre-checked)\n        </ToggleButton>\n      </ToggleButtonGroup>\n      <br />\n      <ToggleButtonGroup type="radio" name="options" defaultValue={1}>\n        <ToggleButton id="tbg-radio-1" value={1}>\n          Radio 1 (pre-checked)\n        </ToggleButton>\n        <ToggleButton id="tbg-radio-2" value={2}>\n          Radio 2\n        </ToggleButton>\n        <ToggleButton id="tbg-radio-3" value={3}>\n          Radio 3\n        </ToggleButton>\n      </ToggleButtonGroup>\n    </>\n  );\n}\n\nexport default ToggleButtonGroupUncontrolled;\n'}}]);
//# sourceMappingURL=component---src-pages-components-buttons-mdx-e23d72a264e49abc9bc3.js.map