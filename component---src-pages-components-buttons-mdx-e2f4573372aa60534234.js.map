{"version":3,"sources":["webpack:///./src/examples/Button/Disabled.js","webpack:///./src/examples/Button/Active.js","webpack:///./src/examples/Button/OutlineTypes.js","webpack:///./src/examples/Button/TagTypes.js","webpack:///./src/examples/Button/Sizes.js","webpack:///./src/pages/components/buttons.mdx","webpack:///./src/examples/Button/ToggleButton.js","webpack:///./src/examples/Button/Block.js","webpack:///./src/examples/Button/Loading.js","webpack:///./src/examples/Button/Types.js","webpack:///./src/examples/Button/ToggleButtonGroupControlled.js","webpack:///./src/examples/Button/ToggleButtonGroupUncontrolled.js"],"names":["module","exports","name","_frontmatter","PageHeader","props","console","warn","layoutProps","query","MDXLayout","DefaultLayout","MDXContent","components","mdxType","title","subTitle","parentName","codeText","ButtonTypes","ButtonOutlineTypes","ButtonTagTypes","ButtonSizes","ButtonBlock","ButtonActive","ButtonDisabled","ButtonLoading","ToggleButton","ToggleButtonGroupUncontrolled","ToggleButtonGroupControlled","metadata","data","Button","ToggleButtonGroup","isMDXComponent"],"mappings":"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","file":"component---src-pages-components-buttons-mdx-e2f4573372aa60534234.js","sourcesContent":["module.exports = \"import Button from 'react-bootstrap/Button';\\n\\nfunction DisabledExample() {\\n  return (\\n    <>\\n      <Button variant=\\\"primary\\\" size=\\\"lg\\\" disabled>\\n        Primary button\\n      </Button>{' '}\\n      <Button variant=\\\"secondary\\\" size=\\\"lg\\\" disabled>\\n        Button\\n      </Button>{' '}\\n      <Button href=\\\"#\\\" variant=\\\"secondary\\\" size=\\\"lg\\\" disabled>\\n        Link\\n      </Button>\\n    </>\\n  );\\n}\\n\\nexport default DisabledExample;\\n\"","module.exports = \"import Button from 'react-bootstrap/Button';\\n\\nfunction ActiveExample() {\\n  return (\\n    <>\\n      <Button variant=\\\"primary\\\" size=\\\"lg\\\" active>\\n        Primary button\\n      </Button>{' '}\\n      <Button variant=\\\"secondary\\\" size=\\\"lg\\\" active>\\n        Button\\n      </Button>\\n    </>\\n  );\\n}\\n\\nexport default ActiveExample;\\n\"","module.exports = \"import Button from 'react-bootstrap/Button';\\n\\nfunction OutlineTypesExample() {\\n  return (\\n    <>\\n      <Button variant=\\\"outline-primary\\\">Primary</Button>{' '}\\n      <Button variant=\\\"outline-secondary\\\">Secondary</Button>{' '}\\n      <Button variant=\\\"outline-success\\\">Success</Button>{' '}\\n      <Button variant=\\\"outline-warning\\\">Warning</Button>{' '}\\n      <Button variant=\\\"outline-danger\\\">Danger</Button>{' '}\\n      <Button variant=\\\"outline-info\\\">Info</Button>{' '}\\n      <Button variant=\\\"outline-light\\\">Light</Button>{' '}\\n      <Button variant=\\\"outline-dark\\\">Dark</Button>\\n    </>\\n  );\\n}\\n\\nexport default OutlineTypesExample;\\n\"","module.exports = \"import Button from 'react-bootstrap/Button';\\n\\nfunction TagTypesExample() {\\n  return (\\n    <>\\n      <Button href=\\\"#\\\">Link</Button> <Button type=\\\"submit\\\">Button</Button>{' '}\\n      <Button as=\\\"input\\\" type=\\\"button\\\" value=\\\"Input\\\" />{' '}\\n      <Button as=\\\"input\\\" type=\\\"submit\\\" value=\\\"Submit\\\" />{' '}\\n      <Button as=\\\"input\\\" type=\\\"reset\\\" value=\\\"Reset\\\" />\\n    </>\\n  );\\n}\\n\\nexport default TagTypesExample;\\n\"","module.exports = \"import Button from 'react-bootstrap/Button';\\n\\nfunction SizesExample() {\\n  return (\\n    <>\\n      <div className=\\\"mb-2\\\">\\n        <Button variant=\\\"primary\\\" size=\\\"lg\\\">\\n          Large button\\n        </Button>{' '}\\n        <Button variant=\\\"secondary\\\" size=\\\"lg\\\">\\n          Large button\\n        </Button>\\n      </div>\\n      <div>\\n        <Button variant=\\\"primary\\\" size=\\\"sm\\\">\\n          Small button\\n        </Button>{' '}\\n        <Button variant=\\\"secondary\\\" size=\\\"sm\\\">\\n          Small button\\n        </Button>\\n      </div>\\n    </>\\n  );\\n}\\n\\nexport default SizesExample;\\n\"","import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport DefaultLayout from \"/Users/kyletsang/Documents/Kyle/Code/react-bootstrap/www/src/layouts/ApiLayout.js\";\nimport { graphql } from 'gatsby';\nimport ComponentApi from '../../components/ComponentApi';\nimport ReactPlayground from '../../components/ReactPlayground';\nimport ButtonActive from '../../examples/Button/Active';\nimport ButtonBlock from '../../examples/Button/Block';\nimport ButtonDisabled from '../../examples/Button/Disabled';\nimport ButtonLoading from '../../examples/Button/Loading';\nimport ButtonOutlineTypes from '../../examples/Button/OutlineTypes';\nimport ButtonSizes from '../../examples/Button/Sizes';\nimport ButtonTagTypes from '../../examples/Button/TagTypes';\nimport ToggleButton from '../../examples/Button/ToggleButton';\nimport ToggleButtonGroupControlled from '../../examples/Button/ToggleButtonGroupControlled';\nimport ToggleButtonGroupUncontrolled from '../../examples/Button/ToggleButtonGroupUncontrolled';\nimport ButtonTypes from '../../examples/Button/Types';\nexport const query = graphql`\n  query ButtonQuery {\n    Button: componentMetadata(displayName: { eq: \"Button\" }) {\n      displayName\n      ...ComponentApi_metadata\n    }\n    ToggleButtonGroup: componentMetadata(\n      displayName: { eq: \"ToggleButtonGroup\" }\n    ) {\n      displayName\n      ...ComponentApi_metadata\n    }\n    ToggleButton: componentMetadata(displayName: { eq: \"ToggleButton\" }) {\n      displayName\n      ...ComponentApi_metadata\n    }\n  }\n`;\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst PageHeader = makeShortcode(\"PageHeader\");\nconst layoutProps = {\n  query,\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n\n\n\n    <PageHeader title=\"Buttons\" subTitle=\"Use Bootstrap’s custom button styles for actions in forms, dialogs, and more with support for multiple sizes, states, and more.\" mdxType=\"PageHeader\" />\n    <h2 {...{\n      \"id\": \"examples\"\n    }}>{`Examples`}</h2>\n    <p>{`Use any of the available button style types to quickly create a styled\nbutton. Just modify the `}<inlineCode parentName=\"p\">{`variant`}</inlineCode>{` prop.`}</p>\n    <ReactPlayground codeText={ButtonTypes} mdxType=\"ReactPlayground\" />\n    <h3 {...{\n      \"id\": \"outline-buttons\"\n    }}>{`Outline buttons`}</h3>\n    <p>{`For a lighter touch, Buttons also come in `}<inlineCode parentName=\"p\">{`outline-*`}</inlineCode>{`\nvariants with no background color.`}</p>\n    <ReactPlayground codeText={ButtonOutlineTypes} mdxType=\"ReactPlayground\" />\n    <h2 {...{\n      \"id\": \"button-tags\"\n    }}>{`Button tags`}</h2>\n    <p>{`Normally `}<inlineCode parentName=\"p\">{`<Button>`}</inlineCode>{` components will render a HTML\n`}<inlineCode parentName=\"p\">{`<button>`}</inlineCode>{` element. However you can render whatever you'd\nlike, adding a `}<inlineCode parentName=\"p\">{`href`}</inlineCode>{` prop will automatically render an\n`}<inlineCode parentName=\"p\">{`<a />`}</inlineCode>{` element. You can use the `}<inlineCode parentName=\"p\">{`as`}</inlineCode>{` prop to\nrender whatever your heart desires. React Bootstrap will take care of\nthe proper ARIA roles for you.`}</p>\n    <ReactPlayground codeText={ButtonTagTypes} mdxType=\"ReactPlayground\" />\n    <h2 {...{\n      \"id\": \"sizes\"\n    }}>{`Sizes`}</h2>\n    <p>{`Fancy larger or smaller buttons? Add `}<inlineCode parentName=\"p\">{`size=\"lg\"`}</inlineCode>{`,\n`}<inlineCode parentName=\"p\">{`size=\"sm\"`}</inlineCode>{` for additional sizes.`}</p>\n    <ReactPlayground codeText={ButtonSizes} mdxType=\"ReactPlayground\" />\n    <h2 {...{\n      \"id\": \"block-buttons\"\n    }}>{`Block buttons`}</h2>\n    <p>{`Create responsive stacks of full-width, “block buttons” like those in Bootstrap 4\nwith a mix of our display and gap utilities.`}</p>\n    <ReactPlayground codeText={ButtonBlock} mdxType=\"ReactPlayground\" />\n    <h2 {...{\n      \"id\": \"active-state\"\n    }}>{`Active state`}</h2>\n    <p>{`To set a button's active state simply set the component's\n`}<inlineCode parentName=\"p\">{`active`}</inlineCode>{` prop.`}</p>\n    <ReactPlayground codeText={ButtonActive} mdxType=\"ReactPlayground\" />\n    <h3 {...{\n      \"id\": \"disabled-state\"\n    }}>{`Disabled state`}</h3>\n    <p>{`Make buttons look inactive by adding the `}<inlineCode parentName=\"p\">{`disabled`}</inlineCode>{` prop to.`}</p>\n    <ReactPlayground codeText={ButtonDisabled} mdxType=\"ReactPlayground\" />\n    <p>{`Watch out! `}<inlineCode parentName=\"p\">{`<a>`}</inlineCode>{` elements don't naturally support a\n`}<inlineCode parentName=\"p\">{`disabled`}</inlineCode>{` attribute. In browsers that support it this is handled with a\n`}<inlineCode parentName=\"p\">{`point-events: none`}</inlineCode>{` style but not all browsers support it\nyet.`}</p>\n    <p>{`React Bootstrap will prevent any `}<inlineCode parentName=\"p\">{`onClick`}</inlineCode>{` handlers from\nfiring regardless of the rendered element.`}</p>\n    <h2 {...{\n      \"id\": \"button-loading-state\"\n    }}>{`Button loading state`}</h2>\n    <p>{`When activating an asynchronous action from a button it is a good UX\npattern to give the user feedback as to the loading state, this can\neasily be done by updating your `}<inlineCode parentName=\"p\">{`<Button />`}</inlineCode>{`s\nprops from a state change like below.`}</p>\n    <ReactPlayground codeText={ButtonLoading} mdxType=\"ReactPlayground\" />\n    <h2 {...{\n      \"id\": \"checkbox--radio\"\n    }}>{`Checkbox / Radio`}</h2>\n    <p>{`Buttons can also be used to style `}<inlineCode parentName=\"p\">{`checkbox`}</inlineCode>{` and\n`}<inlineCode parentName=\"p\">{`radio`}</inlineCode>{` form elements. This is helpful when you want a toggle\nbutton that works neatly inside an HTML form.`}</p>\n    <ReactPlayground codeText={ToggleButton} mdxType=\"ReactPlayground\" />\n    <p>{`The above handles styling, But requires manually controlling the\n`}<inlineCode parentName=\"p\">{`checked`}</inlineCode>{` state for each radio or checkbox in the group.`}</p>\n    <p>{`For a nicer experience with checked state management use the\n`}<inlineCode parentName=\"p\">{`<ToggleButtonGroup>`}</inlineCode>{` instead of a `}<inlineCode parentName=\"p\">{`<ButtonGroup>`}</inlineCode>{` component.\nThe group behaves as a form component, where the `}<inlineCode parentName=\"p\">{`value`}</inlineCode>{` is an array of the selected\n`}<inlineCode parentName=\"p\">{`value`}</inlineCode>{`s for a named checkbox group or the single toggled\n`}<inlineCode parentName=\"p\">{`value`}</inlineCode>{` in a similarly named radio group.`}</p>\n    <h4 {...{\n      \"id\": \"uncontrolled\"\n    }}>{`Uncontrolled`}</h4>\n    <ReactPlayground codeText={ToggleButtonGroupUncontrolled} mdxType=\"ReactPlayground\" />\n    <h4 {...{\n      \"id\": \"controlled\"\n    }}>{`Controlled`}</h4>\n    <ReactPlayground codeText={ToggleButtonGroupControlled} mdxType=\"ReactPlayground\" />\n    <h2 {...{\n      \"id\": \"api\"\n    }}>{`API`}</h2>\n    <ComponentApi metadata={props.data.Button} mdxType=\"ComponentApi\" />\n    <ComponentApi metadata={props.data.ToggleButtonGroup} mdxType=\"ComponentApi\" />\n    <ComponentApi metadata={props.data.ToggleButton} mdxType=\"ComponentApi\" />\n\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      ","module.exports = \"import React, { useState } from 'react';\\nimport ButtonGroup from 'react-bootstrap/ButtonGroup';\\nimport ToggleButton from 'react-bootstrap/ToggleButton';\\n\\nfunction ToggleButtonExample() {\\n  const [checked, setChecked] = useState(false);\\n  const [radioValue, setRadioValue] = useState('1');\\n\\n  const radios = [\\n    { name: 'Active', value: '1' },\\n    { name: 'Radio', value: '2' },\\n    { name: 'Radio', value: '3' },\\n  ];\\n\\n  return (\\n    <>\\n      <ButtonGroup className=\\\"mb-2\\\">\\n        <ToggleButton\\n          id=\\\"toggle-check\\\"\\n          type=\\\"checkbox\\\"\\n          variant=\\\"secondary\\\"\\n          checked={checked}\\n          value=\\\"1\\\"\\n          onChange={(e) => setChecked(e.currentTarget.checked)}\\n        >\\n          Checked\\n        </ToggleButton>\\n      </ButtonGroup>\\n      <br />\\n      <ButtonGroup className=\\\"mb-2\\\">\\n        {radios.map((radio, idx) => (\\n          <ToggleButton\\n            key={idx}\\n            id={`radio-${idx}`}\\n            type=\\\"radio\\\"\\n            variant=\\\"secondary\\\"\\n            name=\\\"radio\\\"\\n            value={radio.value}\\n            checked={radioValue === radio.value}\\n            onChange={(e) => setRadioValue(e.currentTarget.value)}\\n          >\\n            {radio.name}\\n          </ToggleButton>\\n        ))}\\n      </ButtonGroup>\\n      <br />\\n      <ToggleButton\\n        className=\\\"mb-2\\\"\\n        id=\\\"toggle-check\\\"\\n        type=\\\"checkbox\\\"\\n        variant=\\\"outline-primary\\\"\\n        checked={checked}\\n        value=\\\"1\\\"\\n        onChange={(e) => setChecked(e.currentTarget.checked)}\\n      >\\n        Checked\\n      </ToggleButton>\\n      <br />\\n      <ButtonGroup>\\n        {radios.map((radio, idx) => (\\n          <ToggleButton\\n            key={idx}\\n            id={`radio-${idx}`}\\n            type=\\\"radio\\\"\\n            variant={idx % 2 ? 'outline-success' : 'outline-danger'}\\n            name=\\\"radio\\\"\\n            value={radio.value}\\n            checked={radioValue === radio.value}\\n            onChange={(e) => setRadioValue(e.currentTarget.value)}\\n          >\\n            {radio.name}\\n          </ToggleButton>\\n        ))}\\n      </ButtonGroup>\\n    </>\\n  );\\n}\\n\\nrender(<ToggleButtonExample />);\\n\"","module.exports = \"import Button from 'react-bootstrap/Button';\\n\\nfunction BlockExample() {\\n  return (\\n    <div className=\\\"d-grid gap-2\\\">\\n      <Button variant=\\\"primary\\\" size=\\\"lg\\\">\\n        Block level button\\n      </Button>\\n      <Button variant=\\\"secondary\\\" size=\\\"lg\\\">\\n        Block level button\\n      </Button>\\n    </div>\\n  );\\n}\\n\\nexport default BlockExample;\\n\"","module.exports = \"import React, { useEffect, useState } from 'react';\\nimport Button from 'react-bootstrap/Button';\\n\\nfunction simulateNetworkRequest() {\\n  return new Promise((resolve) => setTimeout(resolve, 2000));\\n}\\n\\nfunction LoadingButton() {\\n  const [isLoading, setLoading] = useState(false);\\n\\n  useEffect(() => {\\n    if (isLoading) {\\n      simulateNetworkRequest().then(() => {\\n        setLoading(false);\\n      });\\n    }\\n  }, [isLoading]);\\n\\n  const handleClick = () => setLoading(true);\\n\\n  return (\\n    <Button\\n      variant=\\\"primary\\\"\\n      disabled={isLoading}\\n      onClick={!isLoading ? handleClick : null}\\n    >\\n      {isLoading ? 'Loading…' : 'Click to load'}\\n    </Button>\\n  );\\n}\\n\\nrender(<LoadingButton />);\\n\"","module.exports = \"import Button from 'react-bootstrap/Button';\\n\\nfunction TypesExample() {\\n  return (\\n    <>\\n      <Button variant=\\\"primary\\\">Primary</Button>{' '}\\n      <Button variant=\\\"secondary\\\">Secondary</Button>{' '}\\n      <Button variant=\\\"success\\\">Success</Button>{' '}\\n      <Button variant=\\\"warning\\\">Warning</Button>{' '}\\n      <Button variant=\\\"danger\\\">Danger</Button>{' '}\\n      <Button variant=\\\"info\\\">Info</Button>{' '}\\n      <Button variant=\\\"light\\\">Light</Button>{' '}\\n      <Button variant=\\\"dark\\\">Dark</Button> <Button variant=\\\"link\\\">Link</Button>\\n    </>\\n  );\\n}\\n\\nexport default TypesExample;\\n\"","module.exports = \"import React, { useState } from 'react';\\nimport ToggleButton from 'react-bootstrap/ToggleButton';\\nimport ToggleButtonGroup from 'react-bootstrap/ToggleButtonGroup';\\n\\nfunction ToggleButtonGroupControlled() {\\n  const [value, setValue] = useState([1, 3]);\\n\\n  /*\\n   * The second argument that will be passed to\\n   * `handleChange` from `ToggleButtonGroup`\\n   * is the SyntheticEvent object, but we are\\n   * not using it in this example so we will omit it.\\n   */\\n  const handleChange = (val) => setValue(val);\\n\\n  return (\\n    <ToggleButtonGroup type=\\\"checkbox\\\" value={value} onChange={handleChange}>\\n      <ToggleButton id=\\\"tbg-btn-1\\\" value={1}>\\n        Option 1\\n      </ToggleButton>\\n      <ToggleButton id=\\\"tbg-btn-2\\\" value={2}>\\n        Option 2\\n      </ToggleButton>\\n      <ToggleButton id=\\\"tbg-btn-3\\\" value={3}>\\n        Option 3\\n      </ToggleButton>\\n    </ToggleButtonGroup>\\n  );\\n}\\n\\nrender(<ToggleButtonGroupControlled />);\\n\"","module.exports = \"import ToggleButton from 'react-bootstrap/ToggleButton';\\nimport ToggleButtonGroup from 'react-bootstrap/ToggleButtonGroup';\\n\\nfunction ToggleButtonGroupUncontrolled() {\\n  return (\\n    <>\\n      <ToggleButtonGroup type=\\\"checkbox\\\" defaultValue={[1, 3]} className=\\\"mb-2\\\">\\n        <ToggleButton id=\\\"tbg-check-1\\\" value={1}>\\n          Checkbox 1 (pre-checked)\\n        </ToggleButton>\\n        <ToggleButton id=\\\"tbg-check-2\\\" value={2}>\\n          Checkbox 2\\n        </ToggleButton>\\n        <ToggleButton id=\\\"tbg-check-3\\\" value={3}>\\n          Checkbox 3 (pre-checked)\\n        </ToggleButton>\\n      </ToggleButtonGroup>\\n      <br />\\n      <ToggleButtonGroup type=\\\"radio\\\" name=\\\"options\\\" defaultValue={1}>\\n        <ToggleButton id=\\\"tbg-radio-1\\\" value={1}>\\n          Radio 1 (pre-checked)\\n        </ToggleButton>\\n        <ToggleButton id=\\\"tbg-radio-2\\\" value={2}>\\n          Radio 2\\n        </ToggleButton>\\n        <ToggleButton id=\\\"tbg-radio-3\\\" value={3}>\\n          Radio 3\\n        </ToggleButton>\\n      </ToggleButtonGroup>\\n    </>\\n  );\\n}\\n\\nexport default ToggleButtonGroupUncontrolled;\\n\""],"sourceRoot":""}