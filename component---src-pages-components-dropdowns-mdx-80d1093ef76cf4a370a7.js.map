{"version":3,"sources":["webpack:///./src/examples/Dropdown/SplitBasic.js","webpack:///./src/examples/Dropdown/DropDirections.js","webpack:///./src/examples/Dropdown/BasicButton.js","webpack:///./src/examples/Dropdown/MenuDividers.js","webpack:///./src/components/AriaAbbr.js","webpack:///./src/examples/Dropdown/DropdownItemTags.js","webpack:///./src/examples/Dropdown/Variants.js","webpack:///./src/examples/Dropdown/ButtonCustom.js","webpack:///./src/components/Callout-styles.module.scss","webpack:///./src/examples/Dropdown/MenuHeaders.js","webpack:///./src/examples/Dropdown/Basic.js","webpack:///./src/css/examples.module.scss","webpack:///./src/examples/Dropdown/MenuAlignRight.js","webpack:///./src/pages/components/dropdowns.mdx","webpack:///./src/components/Callout.js","webpack:///./src/examples/Dropdown/ButtonCustomMenu.js","webpack:///./src/examples/Dropdown/SplitVariants.js","webpack:///./src/examples/Dropdown/ButtonSizes.js","webpack:///./src/examples/Dropdown/MenuAlignResponsive.js"],"names":["module","exports","AriaAbbr","title","_frontmatter","layoutProps","query","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","className","href","parentName","codeText","DropdownBasic","DropdownBasicButton","DropdownVariants","SplitBasic","SplitVariants","DropdownButtonSizes","DropDirections","DropdownItemTags","MenuAlignRight","theme","MenuAlignResponsive","MenuHeaders","exampleClassName","styles","staticDropdownMenu","MenuDividers","DropdownButtonCustom","customDropdownMenu","DropdownButtonCustomMenu","metadata","data","DropdownButton","SplitButton","Dropdown","DropdownToggle","exportedBy","DropdownMenu","DropdownItem","DropdownHeader","DropdownDivider","isMDXComponent"],"mappings":"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","file":"component---src-pages-components-dropdowns-mdx-80d1093ef76cf4a370a7.js","sourcesContent":["module.exports = \"<Dropdown as={ButtonGroup}>\\n  <Button variant=\\\"success\\\">Split Button</Button>\\n\\n  <Dropdown.Toggle split variant=\\\"success\\\" id=\\\"dropdown-split-basic\\\" />\\n\\n  <Dropdown.Menu>\\n    <Dropdown.Item href=\\\"#/action-1\\\">Action</Dropdown.Item>\\n    <Dropdown.Item href=\\\"#/action-2\\\">Another action</Dropdown.Item>\\n    <Dropdown.Item href=\\\"#/action-3\\\">Something else</Dropdown.Item>\\n  </Dropdown.Menu>\\n</Dropdown>;\\n\"","module.exports = \"<>\\n  <div className=\\\"mb-2\\\">\\n    {['up', 'down', 'left', 'right'].map((direction) => (\\n      <DropdownButton\\n        as={ButtonGroup}\\n        key={direction}\\n        id={`dropdown-button-drop-${direction}`}\\n        drop={direction}\\n        variant=\\\"secondary\\\"\\n        title={` Drop ${direction} `}\\n      >\\n        <Dropdown.Item eventKey=\\\"1\\\">Action</Dropdown.Item>\\n        <Dropdown.Item eventKey=\\\"2\\\">Another action</Dropdown.Item>\\n        <Dropdown.Item eventKey=\\\"3\\\">Something else here</Dropdown.Item>\\n        <Dropdown.Divider />\\n        <Dropdown.Item eventKey=\\\"4\\\">Separated link</Dropdown.Item>\\n      </DropdownButton>\\n    ))}\\n  </div>\\n\\n  <div>\\n    {['up', 'down', 'left', 'right'].map((direction) => (\\n      <SplitButton\\n        key={direction}\\n        id={`dropdown-button-drop-${direction}`}\\n        drop={direction}\\n        variant=\\\"secondary\\\"\\n        title={`Drop ${direction}`}\\n      >\\n        <Dropdown.Item eventKey=\\\"1\\\">Action</Dropdown.Item>\\n        <Dropdown.Item eventKey=\\\"2\\\">Another action</Dropdown.Item>\\n        <Dropdown.Item eventKey=\\\"3\\\">Something else here</Dropdown.Item>\\n        <Dropdown.Divider />\\n        <Dropdown.Item eventKey=\\\"4\\\">Separated link</Dropdown.Item>\\n      </SplitButton>\\n    ))}\\n  </div>\\n</>;\\n\"","module.exports = \"<DropdownButton id=\\\"dropdown-basic-button\\\" title=\\\"Dropdown button\\\">\\n  <Dropdown.Item href=\\\"#/action-1\\\">Action</Dropdown.Item>\\n  <Dropdown.Item href=\\\"#/action-2\\\">Another action</Dropdown.Item>\\n  <Dropdown.Item href=\\\"#/action-3\\\">Something else</Dropdown.Item>\\n</DropdownButton>;\\n\"","module.exports = \"<Dropdown.Menu show>\\n  <Dropdown.Item eventKey=\\\"1\\\">Action</Dropdown.Item>\\n  <Dropdown.Item eventKey=\\\"2\\\">Another action</Dropdown.Item>\\n  <Dropdown.Item eventKey=\\\"3\\\">Something else here</Dropdown.Item>\\n  <Dropdown.Divider />\\n  <Dropdown.Item eventKey=\\\"4\\\">Separated link</Dropdown.Item>\\n</Dropdown.Menu>;\\n\"","import React from 'react';\n\nexport default function AriaAbbr() {\n  return <abbr title=\"Accessible Rich Internet Applications\">ARIA</abbr>;\n}\n","module.exports = \"<DropdownButton id=\\\"dropdown-item-button\\\" title=\\\"Dropdown button\\\">\\n  <Dropdown.ItemText>Dropdown item text</Dropdown.ItemText>\\n  <Dropdown.Item as=\\\"button\\\">Action</Dropdown.Item>\\n  <Dropdown.Item as=\\\"button\\\">Another action</Dropdown.Item>\\n  <Dropdown.Item as=\\\"button\\\">Something else</Dropdown.Item>\\n</DropdownButton>;\\n\"","module.exports = \"<>\\n  {['Primary', 'Secondary', 'Success', 'Info', 'Warning', 'Danger'].map(\\n    (variant) => (\\n      <DropdownButton\\n        as={ButtonGroup}\\n        key={variant}\\n        id={`dropdown-variants-${variant}`}\\n        variant={variant.toLowerCase()}\\n        title={variant}\\n      >\\n        <Dropdown.Item eventKey=\\\"1\\\">Action</Dropdown.Item>\\n        <Dropdown.Item eventKey=\\\"2\\\">Another action</Dropdown.Item>\\n        <Dropdown.Item eventKey=\\\"3\\\" active>\\n          Active Item\\n        </Dropdown.Item>\\n        <Dropdown.Divider />\\n        <Dropdown.Item eventKey=\\\"4\\\">Separated link</Dropdown.Item>\\n      </DropdownButton>\\n    ),\\n  )}\\n</>;\\n\"","module.exports = \"<>\\n  <Dropdown as={ButtonGroup}>\\n    <Dropdown.Toggle id=\\\"dropdown-custom-1\\\">Pow! Zoom!</Dropdown.Toggle>\\n    <Dropdown.Menu className=\\\"super-colors\\\">\\n      <Dropdown.Item eventKey=\\\"1\\\">Action</Dropdown.Item>\\n      <Dropdown.Item eventKey=\\\"2\\\">Another action</Dropdown.Item>\\n      <Dropdown.Item eventKey=\\\"3\\\" active>\\n        Active Item\\n      </Dropdown.Item>\\n      <Dropdown.Divider />\\n      <Dropdown.Item eventKey=\\\"4\\\">Separated link</Dropdown.Item>\\n    </Dropdown.Menu>\\n  </Dropdown>{' '}\\n  <Dropdown as={ButtonGroup}>\\n    <Button variant=\\\"info\\\">mix it up style-wise</Button>\\n    <Dropdown.Toggle split variant=\\\"success\\\" id=\\\"dropdown-custom-2\\\" />\\n    <Dropdown.Menu className=\\\"super-colors\\\">\\n      <Dropdown.Item eventKey=\\\"1\\\">Action</Dropdown.Item>\\n      <Dropdown.Item eventKey=\\\"2\\\">Another action</Dropdown.Item>\\n      <Dropdown.Item eventKey=\\\"3\\\" active>\\n        Active Item\\n      </Dropdown.Item>\\n      <Dropdown.Divider />\\n      <Dropdown.Item eventKey=\\\"4\\\">Separated link</Dropdown.Item>\\n    </Dropdown.Menu>\\n  </Dropdown>\\n</>;\\n\"","// extracted by mini-css-extract-plugin\nmodule.exports = {\"callout\":\"Callout-styles-module--callout--1_K3h\",\"warning\":\"Callout-styles-module--warning--39Zw- Callout-styles-module--callout--1_K3h\",\"danger\":\"Callout-styles-module--danger--19388 Callout-styles-module--callout--1_K3h\"};","module.exports = \"<Dropdown.Menu show>\\n  <Dropdown.Header>Dropdown header</Dropdown.Header>\\n  <Dropdown.Item eventKey=\\\"2\\\">Another action</Dropdown.Item>\\n  <Dropdown.Item eventKey=\\\"3\\\">Something else here</Dropdown.Item>\\n</Dropdown.Menu>;\\n\"","module.exports = \"<Dropdown>\\n  <Dropdown.Toggle variant=\\\"success\\\" id=\\\"dropdown-basic\\\">\\n    Dropdown Button\\n  </Dropdown.Toggle>\\n\\n  <Dropdown.Menu>\\n    <Dropdown.Item href=\\\"#/action-1\\\">Action</Dropdown.Item>\\n    <Dropdown.Item href=\\\"#/action-2\\\">Another action</Dropdown.Item>\\n    <Dropdown.Item href=\\\"#/action-3\\\">Something else</Dropdown.Item>\\n  </Dropdown.Menu>\\n</Dropdown>;\\n\"","// extracted by mini-css-extract-plugin\nmodule.exports = {\"listGroup\":\"examples-module--list-group--IXNCn\",\"staticDropdownMenu\":\"examples-module--static-dropdown-menu--kkfyD clearfix\",\"customDropdownMenu\":\"examples-module--custom-dropdown-menu--2e_DR\"};","module.exports = \"<DropdownButton\\n  menuAlign=\\\"right\\\"\\n  title=\\\"Dropdown right\\\"\\n  id=\\\"dropdown-menu-align-right\\\"\\n>\\n  <Dropdown.Item eventKey=\\\"1\\\">Action</Dropdown.Item>\\n  <Dropdown.Item eventKey=\\\"2\\\">Another action</Dropdown.Item>\\n  <Dropdown.Item eventKey=\\\"3\\\">Something else here</Dropdown.Item>\\n  <Dropdown.Divider />\\n  <Dropdown.Item eventKey=\\\"4\\\">Separated link</Dropdown.Item>\\n</DropdownButton>;\\n\"","import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport DefaultLayout from \"/Users/kyletsang/Documents/Kyle/Code/react-bootstrap/www/src/layouts/ApiLayout.js\";\nimport { graphql } from 'gatsby';\nimport ARIA from '../../components/AriaAbbr';\nimport Callout from '../../components/Callout';\nimport ComponentApi from '../../components/ComponentApi';\nimport ReactPlayground from '../../components/ReactPlayground';\nimport DropdownBasic from '../../examples/Dropdown/Basic';\nimport DropdownBasicButton from '../../examples/Dropdown/BasicButton';\nimport DropdownButtonCustom from '../../examples/Dropdown/ButtonCustom';\nimport DropdownButtonCustomMenu from '../../examples/Dropdown/ButtonCustomMenu';\nimport DropdownButtonSizes from '../../examples/Dropdown/ButtonSizes';\nimport DropDirections from '../../examples/Dropdown/DropDirections';\nimport DropdownItemTags from '../../examples/Dropdown/DropdownItemTags';\nimport MenuAlignRight from '../../examples/Dropdown/MenuAlignRight';\nimport MenuAlignResponsive from '../../examples/Dropdown/MenuAlignResponsive';\nimport MenuDividers from '../../examples/Dropdown/MenuDividers';\nimport MenuHeaders from '../../examples/Dropdown/MenuHeaders';\nimport SplitBasic from '../../examples/Dropdown/SplitBasic';\nimport SplitVariants from '../../examples/Dropdown/SplitVariants';\nimport DropdownVariants from '../../examples/Dropdown/Variants';\nimport styles from '../../css/examples.module.scss';\nexport const query = graphql`\n  query DropdownMDXQuery {\n    DropdownButton: componentMetadata(displayName: { eq: \"DropdownButton\" }) {\n      displayName\n      ...ComponentApi_metadata\n    }\n    SplitButton: componentMetadata(displayName: { eq: \"SplitButton\" }) {\n      displayName\n      ...ComponentApi_metadata\n    }\n    Dropdown: componentMetadata(displayName: { eq: \"Dropdown\" }) {\n      displayName\n      ...ComponentApi_metadata\n    }\n    DropdownToggle: componentMetadata(displayName: { eq: \"DropdownToggle\" }) {\n      displayName\n      ...ComponentApi_metadata\n    }\n    DropdownMenu: componentMetadata(displayName: { eq: \"DropdownMenu\" }) {\n      displayName\n      ...ComponentApi_metadata\n    }\n    DropdownItem: componentMetadata(displayName: { eq: \"DropdownItem\" }) {\n      displayName\n      ...ComponentApi_metadata\n    }\n    DropdownHeader: componentMetadata(displayName: { eq: \"DropdownHeader\" }) {\n      displayName\n      ...ComponentApi_metadata\n    }\n    DropdownDivider: componentMetadata(displayName: { eq: \"DropdownDivider\" }) {\n      displayName\n      ...ComponentApi_metadata\n    }\n  }\n`;\nexport const _frontmatter = {};\nconst layoutProps = {\n  query,\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n\n\n\n    <h1 {...{\n      \"id\": \"dropdowns\"\n    }}>{`Dropdowns`}</h1>\n    <p className=\"lead\">\n  Toggle contextual overlays for displaying lists of links and more with\n  the Bootstrap dropdown plugin\n    </p>\n    <h2 {...{\n      \"id\": \"overview\"\n    }}>{`Overview`}</h2>\n    <p>{`Dropdowns are toggleable, contextual overlays for displaying lists of\nlinks and more. Like overlays, Dropdowns are built using a third-party\nlibrary `}<a href=\"https://popper.js.org/\">{`Popper.js`}</a>{`, which provides\ndynamic positioning and viewport detection.`}</p>\n    <h2 {...{\n      \"id\": \"accessibility\"\n    }}>{`Accessibility`}</h2>\n    <p>{`The `}<a href=\"https://www.w3.org/TR/wai-aria/\"><abbr title=\"Web Accessibility Initiative\">{`WAI`}</abbr>{` `}<ARIA mdxType=\"ARIA\" /></a>{` standard\ndefines a `}<a parentName=\"p\" {...{\n        \"href\": \"https://www.w3.org/TR/wai-aria-1.1/#menu\"\n      }}><inlineCode parentName=\"a\">{`role=\"menu\"`}</inlineCode>{` widget`}</a>{`, but it's very specific to a certain kind of menu. `}<ARIA mdxType=\"ARIA\" />{` menus, must\nonly contain `}<inlineCode parentName=\"p\">{`role=\"menuitem\"`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`role=\"menuitemcheckbox\"`}</inlineCode>{`, or `}<inlineCode parentName=\"p\">{`role=\"menuitemradio\"`}</inlineCode>{`.`}</p>\n    <p>{`On the other hand, Bootstrap's dropdowns are designed to more generic\nand application in a variety of situations. For this reason we don't\nautomatically add the menu roles to the markup. We do implement some\nbasic keyboard navigation, and if you do provide the \"menu\" role,\nreact-bootstrap will do its best to ensure the focus management is\ncompliant with the `}<ARIA mdxType=\"ARIA\" />{` authoring guidelines for menus.`}</p>\n    <h2 {...{\n      \"id\": \"examples\"\n    }}>{`Examples`}</h2>\n    <h3 {...{\n      \"id\": \"single-button-dropdowns\"\n    }}>{`Single button dropdowns`}</h3>\n    <p>{`The basic Dropdown is composed of a wrapping `}<inlineCode parentName=\"p\">{`Dropdown`}</inlineCode>{` and\ninner `}<inlineCode parentName=\"p\">{`<DropdownMenu>`}</inlineCode>{`, and `}<inlineCode parentName=\"p\">{`<DropdownToggle>`}</inlineCode>{`. By\ndefault the `}<inlineCode parentName=\"p\">{`<DropdownToggle>`}</inlineCode>{` will render a\n`}<inlineCode parentName=\"p\">{`Button`}</inlineCode>{` component and accepts all the same props.`}</p>\n    <ReactPlayground codeText={DropdownBasic} mdxType=\"ReactPlayground\" />\n    <p>{`Since the above is such a common configuration react-bootstrap provides\nthe `}<inlineCode parentName=\"p\">{`<DropdownButton>`}</inlineCode>{` component to help reduce typing. Provide\na `}<inlineCode parentName=\"p\">{`title`}</inlineCode>{` prop and some `}<inlineCode parentName=\"p\">{`<DropdownItem>`}</inlineCode>{`s and you're\nready to go.`}</p>\n    <ReactPlayground codeText={DropdownBasicButton} mdxType=\"ReactPlayground\" />\n    <p>{`DropdownButton will forward Button props to the underlying Toggle\ncomponent`}</p>\n    <ReactPlayground codeText={DropdownVariants} mdxType=\"ReactPlayground\" />\n    <h3 {...{\n      \"id\": \"split-button-dropdowns\"\n    }}>{`Split button dropdowns`}</h3>\n    <p>{`Similarly, You create a split dropdown by combining the Dropdown\ncomponents with another Button and a ButtonGroup.`}</p>\n    <ReactPlayground codeText={SplitBasic} mdxType=\"ReactPlayground\" />\n    <p>{`As with DropdownButton, `}<inlineCode parentName=\"p\">{`SplitButton`}</inlineCode>{` is provided as\nconvenience component.`}</p>\n    <ReactPlayground codeText={SplitVariants} mdxType=\"ReactPlayground\" />\n    <h3 {...{\n      \"id\": \"sizing\"\n    }}>{`Sizing`}</h3>\n    <p>{`Dropdowns work with buttons of all sizes.`}</p>\n    <ReactPlayground codeText={DropdownButtonSizes} mdxType=\"ReactPlayground\" />\n    <h2 {...{\n      \"id\": \"drop-directions\"\n    }}>{`Drop directions`}</h2>\n    <p>{`Trigger dropdown menus above, below, left, or to the right of their\ntoggle elements, with the `}<inlineCode parentName=\"p\">{`drop`}</inlineCode>{` prop.`}</p>\n    <ReactPlayground codeText={DropDirections} mdxType=\"ReactPlayground\" />\n    <h2 {...{\n      \"id\": \"dropdown-items\"\n    }}>{`Dropdown items`}</h2>\n    <p>{`Historically dropdown menu contents had to be links, but that’s no\nlonger the case with v4. Now you can optionally use\n`}<inlineCode parentName=\"p\">{`<button>`}</inlineCode>{` elements in your dropdowns instead of just `}<inlineCode parentName=\"p\">{`<a>`}</inlineCode>{`s.`}</p>\n    <p>{`You can also create non-interactive dropdown items with `}<inlineCode parentName=\"p\">{`<Dropdown.ItemText>`}</inlineCode>{`.\nFeel free to style further with custom CSS or text utilities.`}</p>\n    <ReactPlayground codeText={DropdownItemTags} mdxType=\"ReactPlayground\" />\n    <h2 {...{\n      \"id\": \"menu-alignment\"\n    }}>{`Menu alignment`}</h2>\n    <p>{`By default, a dropdown menu is aligned to the left, but you can switch\nit by passing `}<inlineCode parentName=\"p\">{`right`}</inlineCode>{` to the `}<inlineCode parentName=\"p\">{`align`}</inlineCode>{` prop on a `}<inlineCode parentName=\"p\">{`<DropdownMenu>`}</inlineCode>{` or passing\n`}<inlineCode parentName=\"p\">{`right`}</inlineCode>{` to the `}<inlineCode parentName=\"p\">{`menuAlign`}</inlineCode>{` prop on the `}<inlineCode parentName=\"p\">{`<DropdownButton>`}</inlineCode>{` or `}<inlineCode parentName=\"p\">{`<SplitButton>`}</inlineCode>{`\nas seen below.`}</p>\n    <ReactPlayground codeText={MenuAlignRight} mdxType=\"ReactPlayground\" />\n    <h3 {...{\n      \"id\": \"responsive-alignment\"\n    }}>{`Responsive alignment`}</h3>\n    <p>{`If you want to use responsive menu alignment, pass an object to the `}<inlineCode parentName=\"p\">{`align`}</inlineCode>{` prop\non the `}<inlineCode parentName=\"p\">{`<DropdownMenu>`}</inlineCode>{` or the `}<inlineCode parentName=\"p\">{`menuAlign`}</inlineCode>{` prop on the `}<inlineCode parentName=\"p\">{`<DropdownButton>`}</inlineCode>{` and\n`}<inlineCode parentName=\"p\">{`<SplitButton>`}</inlineCode>{`. You can specify the directions `}<inlineCode parentName=\"p\">{`left`}</inlineCode>{` or `}<inlineCode parentName=\"p\">{`right`}</inlineCode>{` for\nthe various breakpoints.`}</p>\n    <Callout theme=\"danger\" title=\"Warning\" mdxType=\"Callout\">\n  Using responsive alignment will disable Popper usage so any dynamic positioning \n  features such as <code>flip</code> will not work.\n    </Callout>\n    <ReactPlayground codeText={MenuAlignResponsive} mdxType=\"ReactPlayground\" />\n    <h2 {...{\n      \"id\": \"menu-headers\"\n    }}>{`Menu headers`}</h2>\n    <p>{`Add a header to label sections of actions.`}</p>\n    <ReactPlayground codeText={MenuHeaders} exampleClassName={styles.staticDropdownMenu} mdxType=\"ReactPlayground\" />\n    <h2 {...{\n      \"id\": \"menu-dividers\"\n    }}>{`Menu dividers`}</h2>\n    <p>{`Separate groups of related menu items with a divider.`}</p>\n    <ReactPlayground codeText={MenuDividers} exampleClassName={styles.staticDropdownMenu} mdxType=\"ReactPlayground\" />\n    <h2 {...{\n      \"id\": \"customization\"\n    }}>{`Customization`}</h2>\n    <p>{`If the default handling of the dropdown menu and toggle components\naren't to your liking, you can customize them, by using the more basic\n`}<inlineCode parentName=\"p\">{`<Dropdown>`}</inlineCode>{` Component to explicitly specify the Toggle and\nMenu components`}</p>\n    <ReactPlayground codeText={DropdownButtonCustom} exampleClassName={styles.customDropdownMenu} mdxType=\"ReactPlayground\" />\n    <h3 {...{\n      \"id\": \"custom-dropdown-components\"\n    }}>{`Custom Dropdown Components`}</h3>\n    <p>{`For those that want to customize everything, you can forgo the included\nToggle and Menu components, and create your own. By providing custom\ncomponents to the `}<inlineCode parentName=\"p\">{`as`}</inlineCode>{` prop, you can control how each\ncomponent behaves. Custom toggle and menu components `}<strong parentName=\"p\">{`must`}</strong>{` be able to accept refs.`}</p>\n    <ReactPlayground codeText={DropdownButtonCustomMenu} mdxType=\"ReactPlayground\" />\n    <h2 {...{\n      \"id\": \"api\"\n    }}>{`API`}</h2>\n    <ComponentApi metadata={props.data.DropdownButton} mdxType=\"ComponentApi\" />\n    <ComponentApi metadata={props.data.SplitButton} mdxType=\"ComponentApi\" />\n    <ComponentApi metadata={props.data.Dropdown} mdxType=\"ComponentApi\" />\n    <ComponentApi metadata={props.data.DropdownToggle} exportedBy={props.data.Dropdown} mdxType=\"ComponentApi\" />\n    <ComponentApi metadata={props.data.DropdownMenu} exportedBy={props.data.Dropdown} mdxType=\"ComponentApi\" />\n    <ComponentApi metadata={props.data.DropdownItem} exportedBy={props.data.Dropdown} mdxType=\"ComponentApi\" />\n    <ComponentApi metadata={props.data.DropdownHeader} exportedBy={props.data.Dropdown} mdxType=\"ComponentApi\" />\n    <ComponentApi metadata={props.data.DropdownDivider} exportedBy={props.data.Dropdown} mdxType=\"ComponentApi\" />\n\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      ","import PropTypes from 'prop-types';\nimport React from 'react';\n\nimport { css } from 'astroturf';\n\nconst styles = css`\n  @import '../css/theme';\n\n  .callout {\n    border-left: 4px solid transparent;\n    padding: 1.2rem 1.2rem 1.2rem calc(1rem - 4px);\n    margin-left: -1rem;\n    margin-bottom: 2rem;\n  }\n\n  .warning {\n    composes: callout;\n    background-color: transparentize($note, 0.7);\n    border-left-color: $note;\n  }\n  .danger {\n    composes: callout;\n    background-color: transparentize($error, 0.7);\n    border-left-color: $error;\n  }\n`;\n\nconst propTypes = {\n  title: PropTypes.node,\n  children: PropTypes.node,\n  theme: PropTypes.oneOf(['danger', 'warning']),\n};\n\nfunction Callout({ title, children, theme }) {\n  return (\n    <aside role=\"note\" className={styles[theme || 'warning']}>\n      {title && <header className=\"h5\">{title}</header>}\n      <div>{children}</div>\n    </aside>\n  );\n}\n\nCallout.propTypes = propTypes;\n\nexport default Callout;\n","module.exports = \"// The forwardRef is important!!\\n// Dropdown needs access to the DOM node in order to position the Menu\\nconst CustomToggle = React.forwardRef(({ children, onClick }, ref) => (\\n  <a\\n    href=\\\"\\\"\\n    ref={ref}\\n    onClick={(e) => {\\n      e.preventDefault();\\n      onClick(e);\\n    }}\\n  >\\n    {children}\\n    &#x25bc;\\n  </a>\\n));\\n\\n// forwardRef again here!\\n// Dropdown needs access to the DOM of the Menu to measure it\\nconst CustomMenu = React.forwardRef(\\n  ({ children, style, className, 'aria-labelledby': labeledBy }, ref) => {\\n    const [value, setValue] = useState('');\\n\\n    return (\\n      <div\\n        ref={ref}\\n        style={style}\\n        className={className}\\n        aria-labelledby={labeledBy}\\n      >\\n        <FormControl\\n          autoFocus\\n          className=\\\"mx-3 my-2 w-auto\\\"\\n          placeholder=\\\"Type to filter...\\\"\\n          onChange={(e) => setValue(e.target.value)}\\n          value={value}\\n        />\\n        <ul className=\\\"list-unstyled\\\">\\n          {React.Children.toArray(children).filter(\\n            (child) =>\\n              !value || child.props.children.toLowerCase().startsWith(value),\\n          )}\\n        </ul>\\n      </div>\\n    );\\n  },\\n);\\n\\nrender(\\n  <Dropdown>\\n    <Dropdown.Toggle as={CustomToggle} id=\\\"dropdown-custom-components\\\">\\n      Custom toggle\\n    </Dropdown.Toggle>\\n\\n    <Dropdown.Menu as={CustomMenu}>\\n      <Dropdown.Item eventKey=\\\"1\\\">Red</Dropdown.Item>\\n      <Dropdown.Item eventKey=\\\"2\\\">Blue</Dropdown.Item>\\n      <Dropdown.Item eventKey=\\\"3\\\" active>\\n        Orange\\n      </Dropdown.Item>\\n      <Dropdown.Item eventKey=\\\"1\\\">Red-Orange</Dropdown.Item>\\n    </Dropdown.Menu>\\n  </Dropdown>,\\n);\\n\"","module.exports = \"<>\\n  {['Primary', 'Secondary', 'Success', 'Info', 'Warning', 'Danger'].map(\\n    (variant) => (\\n      <SplitButton\\n        key={variant}\\n        id={`dropdown-split-variants-${variant}`}\\n        variant={variant.toLowerCase()}\\n        title={variant}\\n      >\\n        <Dropdown.Item eventKey=\\\"1\\\">Action</Dropdown.Item>\\n        <Dropdown.Item eventKey=\\\"2\\\">Another action</Dropdown.Item>\\n        <Dropdown.Item eventKey=\\\"3\\\" active>\\n          Active Item\\n        </Dropdown.Item>\\n        <Dropdown.Divider />\\n        <Dropdown.Item eventKey=\\\"4\\\">Separated link</Dropdown.Item>\\n      </SplitButton>\\n    ),\\n  )}\\n</>;\\n\"","module.exports = \"<>\\n  <div className=\\\"mb-2\\\">\\n    {[DropdownButton, SplitButton].map((DropdownType, idx) => (\\n      <DropdownType\\n        as={ButtonGroup}\\n        key={idx}\\n        id={`dropdown-button-drop-${idx}`}\\n        size=\\\"lg\\\"\\n        title=\\\"Drop large\\\"\\n      >\\n        <Dropdown.Item eventKey=\\\"1\\\">Action</Dropdown.Item>\\n        <Dropdown.Item eventKey=\\\"2\\\">Another action</Dropdown.Item>\\n        <Dropdown.Item eventKey=\\\"3\\\">Something else here</Dropdown.Item>\\n        <Dropdown.Divider />\\n        <Dropdown.Item eventKey=\\\"4\\\">Separated link</Dropdown.Item>\\n      </DropdownType>\\n    ))}\\n  </div>\\n  <div>\\n    {[DropdownButton, SplitButton].map((DropdownType, idx) => (\\n      <DropdownType\\n        as={ButtonGroup}\\n        key={idx}\\n        id={`dropdown-button-drop-${idx}`}\\n        size=\\\"sm\\\"\\n        variant=\\\"secondary\\\"\\n        title=\\\"Drop small\\\"\\n      >\\n        <Dropdown.Item eventKey=\\\"1\\\">Action</Dropdown.Item>\\n        <Dropdown.Item eventKey=\\\"2\\\">Another action</Dropdown.Item>\\n        <Dropdown.Item eventKey=\\\"3\\\">Something else here</Dropdown.Item>\\n        <Dropdown.Divider />\\n        <Dropdown.Item eventKey=\\\"4\\\">Separated link</Dropdown.Item>\\n      </DropdownType>\\n    ))}\\n  </div>\\n</>;\\n\"","module.exports = \"<>\\n  <div>\\n    <DropdownButton\\n      as={ButtonGroup}\\n      menuAlign={{ lg: 'right' }}\\n      title=\\\"Left-aligned but right aligned when large screen\\\"\\n      id=\\\"dropdown-menu-align-responsive-1\\\"\\n    >\\n      <Dropdown.Item eventKey=\\\"1\\\">Action 1</Dropdown.Item>\\n      <Dropdown.Item eventKey=\\\"2\\\">Action 2</Dropdown.Item>\\n    </DropdownButton>\\n  </div>\\n  <div className=\\\"mt-2\\\">\\n    <SplitButton\\n      menuAlign={{ lg: 'left' }}\\n      title=\\\"Right-aligned but left aligned when large screen\\\"\\n      id=\\\"dropdown-menu-align-responsive-2\\\"\\n    >\\n      <Dropdown.Item eventKey=\\\"1\\\">Action 1</Dropdown.Item>\\n      <Dropdown.Item eventKey=\\\"2\\\">Action 2</Dropdown.Item>\\n    </SplitButton>\\n  </div>\\n</>;\\n\""],"sourceRoot":""}