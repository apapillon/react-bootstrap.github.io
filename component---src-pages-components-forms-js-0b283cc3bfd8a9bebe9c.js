(window.webpackJsonp=window.webpackJsonp||[]).push([[21],{"/GzF":function(e,o){e.exports='const { Formik } = formik;\n\nconst schema = yup.object().shape({\n  firstName: yup.string().required(),\n  lastName: yup.string().required(),\n  username: yup.string().required(),\n  city: yup.string().required(),\n  state: yup.string().required(),\n  zip: yup.string().required(),\n  terms: yup.bool().required().oneOf([true], \'Terms must be accepted\'),\n});\n\nfunction FormExample() {\n  return (\n    <Formik\n      validationSchema={schema}\n      onSubmit={console.log}\n      initialValues={{\n        firstName: \'Mark\',\n        lastName: \'Otto\',\n        username: \'\',\n        city: \'\',\n        state: \'\',\n        zip: \'\',\n        terms: false,\n      }}\n    >\n      {({\n        handleSubmit,\n        handleChange,\n        handleBlur,\n        values,\n        touched,\n        isValid,\n        errors,\n      }) => (\n        <Form noValidate onSubmit={handleSubmit}>\n          <Row className="mb-3">\n            <Form.Group as={Col} md="4" controlId="validationFormik01">\n              <Form.Label>First name</Form.Label>\n              <Form.Control\n                type="text"\n                name="firstName"\n                value={values.firstName}\n                onChange={handleChange}\n                isValid={touched.firstName && !errors.firstName}\n              />\n              <Form.Control.Feedback>Looks good!</Form.Control.Feedback>\n            </Form.Group>\n            <Form.Group as={Col} md="4" controlId="validationFormik02">\n              <Form.Label>Last name</Form.Label>\n              <Form.Control\n                type="text"\n                name="lastName"\n                value={values.lastName}\n                onChange={handleChange}\n                isValid={touched.lastName && !errors.lastName}\n              />\n\n              <Form.Control.Feedback>Looks good!</Form.Control.Feedback>\n            </Form.Group>\n            <Form.Group as={Col} md="4" controlId="validationFormikUsername">\n              <Form.Label>Username</Form.Label>\n              <InputGroup hasValidation>\n                <InputGroup.Text id="inputGroupPrepend">@</InputGroup.Text>\n                <Form.Control\n                  type="text"\n                  placeholder="Username"\n                  aria-describedby="inputGroupPrepend"\n                  name="username"\n                  value={values.username}\n                  onChange={handleChange}\n                  isInvalid={!!errors.username}\n                />\n                <Form.Control.Feedback type="invalid">\n                  {errors.username}\n                </Form.Control.Feedback>\n              </InputGroup>\n            </Form.Group>\n          </Row>\n          <Row className="mb-3">\n            <Form.Group as={Col} md="6" controlId="validationFormik03">\n              <Form.Label>City</Form.Label>\n              <Form.Control\n                type="text"\n                placeholder="City"\n                name="city"\n                value={values.city}\n                onChange={handleChange}\n                isInvalid={!!errors.city}\n              />\n\n              <Form.Control.Feedback type="invalid">\n                {errors.city}\n              </Form.Control.Feedback>\n            </Form.Group>\n            <Form.Group as={Col} md="3" controlId="validationFormik04">\n              <Form.Label>State</Form.Label>\n              <Form.Control\n                type="text"\n                placeholder="State"\n                name="state"\n                value={values.state}\n                onChange={handleChange}\n                isInvalid={!!errors.state}\n              />\n              <Form.Control.Feedback type="invalid">\n                {errors.state}\n              </Form.Control.Feedback>\n            </Form.Group>\n            <Form.Group as={Col} md="3" controlId="validationFormik05">\n              <Form.Label>Zip</Form.Label>\n              <Form.Control\n                type="text"\n                placeholder="Zip"\n                name="zip"\n                value={values.zip}\n                onChange={handleChange}\n                isInvalid={!!errors.zip}\n              />\n\n              <Form.Control.Feedback type="invalid">\n                {errors.zip}\n              </Form.Control.Feedback>\n            </Form.Group>\n          </Row>\n          <Form.Group className="mb-3">\n            <Form.Check\n              required\n              name="terms"\n              label="Agree to terms and conditions"\n              onChange={handleChange}\n              isInvalid={!!errors.terms}\n              feedback={errors.terms}\n              id="validationFormik0"\n            />\n          </Form.Group>\n          <Button type="submit">Submit form</Button>\n        </Form>\n      )}\n    </Formik>\n  );\n}\n\nrender(<FormExample />);\n'},"/kWs":function(e,o){e.exports='<>\n  <Form.Label htmlFor="exampleColorInput">Color picker</Form.Label>\n  <Form.Control\n    type="color"\n    id="exampleColorInput"\n    defaultValue="#563d7c"\n    title="Choose your color"\n  />\n</>;\n'},"0Cdi":function(e,o){e.exports='const { Formik } = formik;\n\nconst schema = yup.object().shape({\n  firstName: yup.string().required(),\n  lastName: yup.string().required(),\n  username: yup.string().required(),\n  city: yup.string().required(),\n  state: yup.string().required(),\n  zip: yup.string().required(),\n  file: yup.mixed().required(),\n  terms: yup.bool().required().oneOf([true], \'terms must be accepted\'),\n});\n\nfunction FormExample() {\n  return (\n    <Formik\n      validationSchema={schema}\n      onSubmit={console.log}\n      initialValues={{\n        firstName: \'Mark\',\n        lastName: \'Otto\',\n        username: \'\',\n        city: \'\',\n        state: \'\',\n        zip: \'\',\n        file: null,\n        terms: false,\n      }}\n    >\n      {({\n        handleSubmit,\n        handleChange,\n        handleBlur,\n        values,\n        touched,\n        isValid,\n        errors,\n      }) => (\n        <Form noValidate onSubmit={handleSubmit}>\n          <Row className="mb-3">\n            <Form.Group\n              as={Col}\n              md="4"\n              controlId="validationFormik101"\n              className="position-relative"\n            >\n              <Form.Label>First name</Form.Label>\n              <Form.Control\n                type="text"\n                name="firstName"\n                value={values.firstName}\n                onChange={handleChange}\n                isValid={touched.firstName && !errors.firstName}\n              />\n              <Form.Control.Feedback tooltip>Looks good!</Form.Control.Feedback>\n            </Form.Group>\n            <Form.Group\n              as={Col}\n              md="4"\n              controlId="validationFormik102"\n              className="position-relative"\n            >\n              <Form.Label>Last name</Form.Label>\n              <Form.Control\n                type="text"\n                name="lastName"\n                value={values.lastName}\n                onChange={handleChange}\n                isValid={touched.lastName && !errors.lastName}\n              />\n\n              <Form.Control.Feedback tooltip>Looks good!</Form.Control.Feedback>\n            </Form.Group>\n            <Form.Group as={Col} md="4" controlId="validationFormikUsername2">\n              <Form.Label>Username</Form.Label>\n              <InputGroup hasValidation>\n                <InputGroup.Text id="inputGroupPrepend">@</InputGroup.Text>\n                <Form.Control\n                  type="text"\n                  placeholder="Username"\n                  aria-describedby="inputGroupPrepend"\n                  name="username"\n                  value={values.username}\n                  onChange={handleChange}\n                  isInvalid={!!errors.username}\n                />\n                <Form.Control.Feedback type="invalid" tooltip>\n                  {errors.username}\n                </Form.Control.Feedback>\n              </InputGroup>\n            </Form.Group>\n          </Row>\n          <Row className="mb-3">\n            <Form.Group\n              as={Col}\n              md="6"\n              controlId="validationFormik103"\n              className="position-relative"\n            >\n              <Form.Label>City</Form.Label>\n              <Form.Control\n                type="text"\n                placeholder="City"\n                name="city"\n                value={values.city}\n                onChange={handleChange}\n                isInvalid={!!errors.city}\n              />\n\n              <Form.Control.Feedback type="invalid" tooltip>\n                {errors.city}\n              </Form.Control.Feedback>\n            </Form.Group>\n            <Form.Group\n              as={Col}\n              md="3"\n              controlId="validationFormik104"\n              className="position-relative"\n            >\n              <Form.Label>State</Form.Label>\n              <Form.Control\n                type="text"\n                placeholder="State"\n                name="state"\n                value={values.state}\n                onChange={handleChange}\n                isInvalid={!!errors.state}\n              />\n              <Form.Control.Feedback type="invalid" tooltip>\n                {errors.state}\n              </Form.Control.Feedback>\n            </Form.Group>\n            <Form.Group\n              as={Col}\n              md="3"\n              controlId="validationFormik105"\n              className="position-relative"\n            >\n              <Form.Label>Zip</Form.Label>\n              <Form.Control\n                type="text"\n                placeholder="Zip"\n                name="zip"\n                value={values.zip}\n                onChange={handleChange}\n                isInvalid={!!errors.zip}\n              />\n\n              <Form.Control.Feedback type="invalid" tooltip>\n                {errors.zip}\n              </Form.Control.Feedback>\n            </Form.Group>\n          </Row>\n          <Form.Group className="position-relative mb-3">\n            <Form.Label>File</Form.Label>\n            <Form.Control\n              type="file"\n              required\n              name="file"\n              onChange={handleChange}\n              isInvalid={!!errors.file}\n            />\n            <Form.Control.Feedback type="invalid" tooltip>\n              {errors.file}\n            </Form.Control.Feedback>\n          </Form.Group>\n          <Form.Group className="position-relative mb-3">\n            <Form.Check\n              required\n              name="terms"\n              label="Agree to terms and conditions"\n              onChange={handleChange}\n              isInvalid={!!errors.terms}\n              feedback={errors.terms}\n              id="validationFormik106"\n              feedbackTooltip\n            />\n          </Form.Group>\n          <Button type="submit">Submit form</Button>\n        </Form>\n      )}\n    </Formik>\n  );\n}\n\nrender(<FormExample />);\n'},"4hNL":function(e,o){e.exports='<Form>\n  <Row className="align-items-center">\n    <Col sm={3} className="my-1">\n      <Form.Label htmlFor="inlineFormInputName" visuallyHidden>\n        Name\n      </Form.Label>\n      <Form.Control id="inlineFormInputName" placeholder="Jane Doe" />\n    </Col>\n    <Col sm={3} className="my-1">\n      <Form.Label htmlFor="inlineFormInputGroupUsername" visuallyHidden>\n        Username\n      </Form.Label>\n      <InputGroup>\n        <InputGroup.Text>@</InputGroup.Text>\n        <FormControl id="inlineFormInputGroupUsername" placeholder="Username" />\n      </InputGroup>\n    </Col>\n    <Col xs="auto" className="my-1">\n      <Form.Check type="checkbox" id="autoSizingCheck2" label="Remember me" />\n    </Col>\n    <Col xs="auto" className="my-1">\n      <Button type="submit">Submit</Button>\n    </Col>\n  </Row>\n</Form>;\n'},"6Kon":function(e,o){e.exports='<InputGroup hasValidation>\n  <InputGroup.Text>@</InputGroup.Text>\n  <Form.Control type="text" required isInvalid />\n  <Form.Control.Feedback type="invalid">\n    Please choose a username.\n  </Form.Control.Feedback>\n</InputGroup>;\n'},"73xP":function(e,o){e.exports='<>\n  <Form.Group controlId="formFile" className="mb-3">\n    <Form.Label>Default file input example</Form.Label>\n    <Form.Control type="file" />\n  </Form.Group>\n  <Form.Group controlId="formFileMultiple" className="mb-3">\n    <Form.Label>Multiple files input example</Form.Label>\n    <Form.Control type="file" multiple />\n  </Form.Group>\n  <Form.Group controlId="formFileDisabled" className="mb-3">\n    <Form.Label>Disabled file input example</Form.Label>\n    <Form.Control type="file" disabled />\n  </Form.Group>\n  <Form.Group controlId="formFileSm" className="mb-3">\n    <Form.Label>Small file input example</Form.Label>\n    <Form.Control type="file" size="sm" />\n  </Form.Group>\n  <Form.Group controlId="formFileLg" className="mb-3">\n    <Form.Label>Large file input example</Form.Label>\n    <Form.Control type="file" size="lg" />\n  </Form.Group>\n</>;\n'},"7Yuw":function(e,o){e.exports='function FormExample() {\n  const [validated, setValidated] = useState(false);\n\n  const handleSubmit = (event) => {\n    const form = event.currentTarget;\n    if (form.checkValidity() === false) {\n      event.preventDefault();\n      event.stopPropagation();\n    }\n\n    setValidated(true);\n  };\n\n  return (\n    <Form noValidate validated={validated} onSubmit={handleSubmit}>\n      <Row className="mb-3">\n        <Form.Group as={Col} md="4" controlId="validationCustom01">\n          <Form.Label>First name</Form.Label>\n          <Form.Control\n            required\n            type="text"\n            placeholder="First name"\n            defaultValue="Mark"\n          />\n          <Form.Control.Feedback>Looks good!</Form.Control.Feedback>\n        </Form.Group>\n        <Form.Group as={Col} md="4" controlId="validationCustom02">\n          <Form.Label>Last name</Form.Label>\n          <Form.Control\n            required\n            type="text"\n            placeholder="Last name"\n            defaultValue="Otto"\n          />\n          <Form.Control.Feedback>Looks good!</Form.Control.Feedback>\n        </Form.Group>\n        <Form.Group as={Col} md="4" controlId="validationCustomUsername">\n          <Form.Label>Username</Form.Label>\n          <InputGroup hasValidation>\n            <InputGroup.Text id="inputGroupPrepend">@</InputGroup.Text>\n            <Form.Control\n              type="text"\n              placeholder="Username"\n              aria-describedby="inputGroupPrepend"\n              required\n            />\n            <Form.Control.Feedback type="invalid">\n              Please choose a username.\n            </Form.Control.Feedback>\n          </InputGroup>\n        </Form.Group>\n      </Row>\n      <Row className="mb-3">\n        <Form.Group as={Col} md="6" controlId="validationCustom03">\n          <Form.Label>City</Form.Label>\n          <Form.Control type="text" placeholder="City" required />\n          <Form.Control.Feedback type="invalid">\n            Please provide a valid city.\n          </Form.Control.Feedback>\n        </Form.Group>\n        <Form.Group as={Col} md="3" controlId="validationCustom04">\n          <Form.Label>State</Form.Label>\n          <Form.Control type="text" placeholder="State" required />\n          <Form.Control.Feedback type="invalid">\n            Please provide a valid state.\n          </Form.Control.Feedback>\n        </Form.Group>\n        <Form.Group as={Col} md="3" controlId="validationCustom05">\n          <Form.Label>Zip</Form.Label>\n          <Form.Control type="text" placeholder="Zip" required />\n          <Form.Control.Feedback type="invalid">\n            Please provide a valid zip.\n          </Form.Control.Feedback>\n        </Form.Group>\n      </Row>\n      <Form.Group className="mb-3">\n        <Form.Check\n          required\n          label="Agree to terms and conditions"\n          feedback="You must agree before submitting."\n        />\n      </Form.Group>\n      <Button type="submit">Submit form</Button>\n    </Form>\n  );\n}\n\nrender(<FormExample />);\n'},"91QH":function(e,o){e.exports="<Form>\n  {['checkbox', 'radio'].map((type) => (\n    <div key={type} className=\"mb-3\">\n      <Form.Check type={type} id={`check-api-${type}`}>\n        <Form.Check.Input type={type} isValid />\n        <Form.Check.Label>{`Custom api ${type}`}</Form.Check.Label>\n        <Form.Control.Feedback type=\"valid\">You did it!</Form.Control.Feedback>\n      </Form.Check>\n    </div>\n  ))}\n</Form>;\n"},ABTg:function(e,o){e.exports='<>\n  <Form.Check aria-label="option 1" />\n  <Form.Check type="radio" aria-label="radio 1" />\n</>;\n'},AkQk:function(e,o,n){"use strict";n.r(o);var t=n("oYCi"),r=n("h55t"),a=n("vXRK"),l=n("+xvc"),s=n("1u5/"),i=n("Jdld"),c=n.n(i),d=n("F13a"),m=n.n(d),p=n("nJQO"),u=n.n(p),b=n("vChs"),h=n.n(b),F=n("vaWq"),j=n.n(F),x=n("cbck"),f=n.n(x),y=n("ljRQ"),C=n.n(y),O=n("91QH"),g=n.n(O),v=n("Y2lv"),w=n.n(v),k=n("/kWs"),G=n.n(k),L=n("73xP"),I=n.n(L),N=n("n3XQ"),T=n.n(N),S=n("cgdb"),z=n.n(S),R=n("sOTj"),P=n.n(R),B=n("zq7G"),q=n.n(B),E=n("ffOz"),D=n.n(E),H=n("pbHP"),A=n.n(H),V=n("dKpd"),W=n.n(V),U=n("4hNL"),Y=n.n(U),Q=n("u/9a"),M=n.n(Q),Z=n("DXq1"),$=n.n(Z),J=n("pcjb"),K=n.n(J),X=n("uDF0"),_=n.n(X),ee=n("oWAn"),oe=n.n(ee),ne=n("iIos"),te=n.n(ne),re=n("ABTg"),ae=n.n(re),le=n("dxsv"),se=n.n(le),ie=n("zyQW"),ce=n.n(ie),de=n("Qsvm"),me=n.n(de),pe=n("cIEL"),ue=n.n(pe),be=n("QN7o"),he=n.n(be),Fe=n("fZum"),je=n.n(Fe),xe=n("/GzF"),fe=n.n(xe),ye=n("6Kon"),Ce=n.n(ye),Oe=n("7Yuw"),ge=n.n(Oe),ve=n("0Cdi"),we=n.n(ve),ke=n("r+yI");o.default=Object(ke.a)((function(e){var o=e.data;return Object(t.jsxs)(t.Fragment,{children:[Object(t.jsx)(l.default,{h:"1",id:"forms",children:"Forms"}),Object(t.jsxs)("p",{children:["The ",Object(t.jsx)("code",{children:"<FormControl>"})," component renders a form control with Bootstrap styling. The ",Object(t.jsx)("code",{children:"<FormGroup>"})," component wraps a form control with proper spacing, along with support for a label, help text, and validation state. To ensure accessibility, set"," ",Object(t.jsx)("code",{children:"controlId"})," on ",Object(t.jsx)("code",{children:"<FormGroup>"}),", and use"," ",Object(t.jsx)("code",{children:"<FormLabel>"})," for the label."]}),Object(t.jsx)(s.a,{codeText:c.a}),Object(t.jsxs)("p",{children:["The ",Object(t.jsx)("code",{children:"<FormControl>"})," component directly renders the"," ",Object(t.jsx)("code",{children:"<input>"})," or other specified component. If you need to access the value of an uncontrolled ",Object(t.jsx)("code",{children:"<FormControl>"}),", attach a ",Object(t.jsx)("code",{children:"ref"})," to it as you would with an uncontrolled input, then call ",Object(t.jsx)("code",{children:"ReactDOM.findDOMNode(ref)"})," to get the DOM node. You can then interact with that node as you would with any other uncontrolled input."]}),Object(t.jsx)("p",{children:"If your application contains a large number of form groups, we recommend building a higher-level component encapsulating a complete field group that renders the label, the control, and any other necessary components. We don't provide this out-of-the-box, because the composition of those field groups is too specific to an individual application to admit a good one-size-fits-all solution."}),Object(t.jsx)(l.default,{h:"2",id:"forms-controls",children:"Form controls"}),Object(t.jsxs)("p",{children:["For textual form controls—like ",Object(t.jsx)("code",{children:"input"}),"s and"," ",Object(t.jsx)("code",{children:"textarea"}),"s—use the ",Object(t.jsx)("code",{children:"FormControl"})," component. FormControl adds some additional styles for general appearance, focus state, sizing, and more."]}),Object(t.jsx)(s.a,{codeText:je.a}),Object(t.jsx)(l.default,{h:"3",id:"forms-input-sizes",children:"Sizing"}),Object(t.jsxs)("p",{children:["Use ",Object(t.jsx)("code",{children:"size"})," on ",Object(t.jsx)("code",{children:"<FormControl>"})," and"," ",Object(t.jsx)("code",{children:"<FormLabel>"})," to change the size of inputs and labels respectively."]}),Object(t.jsx)(s.a,{codeText:te.a}),Object(t.jsx)(l.default,{h:"3",id:"forms-input-readonly",children:"Readonly"}),Object(t.jsxs)("p",{children:["Add the ",Object(t.jsx)("code",{children:"readOnly"})," prop on an input to prevent modification of the input's value. Read-only inputs appear lighter (just like disabled inputs), but retain the standard cursor."]}),Object(t.jsx)(s.a,{codeText:oe.a}),Object(t.jsx)(l.default,{h:"3",id:"forms-input-plaintext",children:"Readonly plain text"}),Object(t.jsxs)("p",{children:["If you want to have readonly elements in your form styled as plain text, use the ",Object(t.jsx)("code",{children:"plaintext"})," prop on FormControls to remove the default form field styling and preserve the correct margin and padding."]}),Object(t.jsx)(s.a,{codeText:se.a}),Object(t.jsx)(l.default,{h:"3",id:"forms-file",children:"File input"}),Object(t.jsx)(s.a,{codeText:I.a}),Object(t.jsx)(l.default,{h:"3",id:"forms-color",children:"Color"}),Object(t.jsx)(s.a,{codeText:G.a}),Object(t.jsx)(l.default,{h:"2",id:"forms-form-check",children:"Checkboxes and Radios"}),Object(t.jsxs)("p",{children:["For the non-textual checkbox and radio controls, ",Object(t.jsx)("code",{children:"FormCheck"})," ","provides a single component for both types that adds some additional styling and improved layout."]}),Object(t.jsx)(l.default,{h:"3",id:"forms-check-stacked",children:"Default (stacked)"}),Object(t.jsx)("p",{children:"By default, any number of checkboxes and radios that are immediate sibling will be vertically stacked and appropriately spaced with FormCheck."}),Object(t.jsx)(s.a,{codeText:C.a}),Object(t.jsx)(l.default,{h:"3",id:"forms-check-inline",children:"Inline"}),Object(t.jsxs)("p",{children:["Group checkboxes or radios on the same horizontal row by adding the"," ",Object(t.jsx)("code",{children:"inline"})," prop."]}),Object(t.jsx)(s.a,{codeText:w.a}),Object(t.jsx)(l.default,{h:"3",id:"forms-check-without-labels",children:"Without labels"}),Object(t.jsxs)("p",{children:["When you render a FormCheck without a label (no ",Object(t.jsx)("code",{children:"children"}),") some additional styling is applied to keep the inputs from collapsing."," ",Object(t.jsxs)("strong",{children:["Remember to add an ",Object(t.jsx)("code",{children:"aria-label"})," when omitting labels!"]})]}),Object(t.jsx)(s.a,{codeText:ae.a}),Object(t.jsx)(l.default,{h:"3",id:"forms-check-api",children:"Customizing FormCheck rendering"}),Object(t.jsxs)("p",{children:["When you need tighter control, or want to customize how the"," ",Object(t.jsx)("code",{children:"FormCheck"})," component renders, it may better to use it's constituent parts directly."]}),Object(t.jsxs)("p",{children:["By provided ",Object(t.jsx)("code",{children:"children"})," to the ",Object(t.jsx)("code",{children:"FormCheck"})," you can forgo the default rendering and handle it yourself. (You can still provide an ",Object(t.jsx)("code",{children:"id"})," to the ",Object(t.jsx)("code",{children:"FormCheck"})," or"," ",Object(t.jsx)("code",{children:"FormGroup"})," and have it propagate to the label and input)."]}),Object(t.jsx)(s.a,{codeText:g.a}),Object(t.jsx)(l.default,{h:"2",id:"forms-range",children:"Range"}),"Create custom ",Object(t.jsx)("code",{children:'<input type="range">'})," controls with",Object(t.jsx)("code",{children:"<FormRange>"}),". The track (the background) and thumb (the value) are both styled to appear the same across browsers. As only Firefox supports “filling” their track from the left or right of the thumb as a means to visually indicate progress, we do not currently support it.",Object(t.jsx)(s.a,{codeText:me.a}),Object(t.jsx)(l.default,{h:"2",id:"forms-select",children:"Select"}),Object(t.jsx)(s.a,{codeText:ue.a}),Object(t.jsx)(l.default,{h:"3",id:"forms-select-sizes",children:"Sizing"}),Object(t.jsx)("p",{children:"You may also choose from small and large custom selects to match our similarly sized text inputs."}),Object(t.jsx)(s.a,{codeText:he.a}),Object(t.jsx)(l.default,{h:"2",id:"forms-floating-labels",children:"Floating labels"}),Object(t.jsxs)("p",{children:["Wrap a ",Object(t.jsx)("code",{children:"<Form.Control>"})," element in"," ",Object(t.jsx)("code",{children:"<FloatingLabel>"})," to enable floating labels with Bootstrap’s textual form fields. A ",Object(t.jsx)("code",{children:"placeholder"})," is required on each ",Object(t.jsx)("code",{children:"<Form.Control>"})," as our method of CSS-only floating labels uses the ",Object(t.jsx)("code",{children:":placeholder-shown"})," pseudo-element."]}),Object(t.jsx)(s.a,{codeText:m.a}),Object(t.jsx)(l.default,{h:"3",id:"forms-floating-labels-textarea",children:"Textareas"}),Object(t.jsxs)("p",{children:["By default, ",Object(t.jsx)("code",{children:"<textarea>"}),"s will be the same height as"," ",Object(t.jsx)("code",{children:"<input>"}),"s. To set a custom height on your"," ",Object(t.jsx)("code",{children:"<textarea>"}),", do not use the ",Object(t.jsx)("code",{children:"rows"})," attribute. Instead, set an explicit ",Object(t.jsx)("code",{children:"height"})," (either inline or via custom CSS)."]}),Object(t.jsx)(s.a,{codeText:f.a}),Object(t.jsx)(l.default,{h:"3",id:"forms-floating-labels-select",children:"Selects"}),Object(t.jsxs)("p",{children:["Other than ",Object(t.jsx)("code",{children:"<Form.Control>"}),", floating labels are only available on ",Object(t.jsx)("code",{children:"<Form.Select>"}),"s. They work in the same way, but unlike ",Object(t.jsx)("code",{children:"<input>"}),"s, they’ll always show the"," ",Object(t.jsx)("code",{children:"<label>"})," in its floated state."]}),Object(t.jsx)(s.a,{codeText:j.a}),Object(t.jsx)(l.default,{h:"3",id:"forms-floating-labels-layout",children:"Layout"}),Object(t.jsx)("p",{children:"When working with the Bootstrap grid system, be sure to place form elements within column classes."}),Object(t.jsx)(s.a,{codeText:h.a}),Object(t.jsx)(l.default,{h:"3",id:"forms-floating-labels-customize",children:"Customizing rendering"}),Object(t.jsxs)("p",{children:["If you need greater control over the rendering, use the"," ",Object(t.jsx)("code",{children:"<FormFloating>"})," component to wrap your input and label. Also note that the ",Object(t.jsx)("code",{children:"<Form.Control>"})," must come first so we can utilize a sibling selector (e.g., ~)."]}),Object(t.jsx)(s.a,{codeText:u.a}),Object(t.jsx)(l.default,{h:"2",id:"forms-layout",children:"Layout"}),Object(t.jsxs)("p",{children:["FormControl and FormCheck both apply ",Object(t.jsx)("code",{children:"display: block"})," with"," ",Object(t.jsx)("code",{children:"width: 100%"})," to controls, which means they stack vertically by default. Additional components and props can be used to vary this layout on a per-form basis."]}),Object(t.jsx)(l.default,{h:"3",id:"forms-layout-group",children:"Form groups"}),Object(t.jsxs)("p",{children:["The ",Object(t.jsx)("code",{children:"FormGroup"})," component is the easiest way to add some structure to forms. It provides a flexible container for grouping of labels, controls, optional help text, and form validation messaging. By default it only applies margin-bottom. Use it with ",Object(t.jsx)("code",{children:"fieldset"}),"s, ",Object(t.jsx)("code",{children:"div"}),"s, or nearly any other element."]}),Object(t.jsxs)("p",{children:["You also add the ",Object(t.jsx)("code",{children:"controlId"})," prop to accessibly wire the nested label and input together via the ",Object(t.jsx)("code",{children:"id"}),"."]}),Object(t.jsx)(s.a,{codeText:P.a}),Object(t.jsx)(l.default,{h:"3",id:"forms-layout-grid",children:"Form grid"}),Object(t.jsx)("p",{children:"More complex forms can be built using the grid components. Use these for form layouts that require multiple columns, varied widths, and additional alignment options."}),Object(t.jsx)(s.a,{codeText:M.a}),Object(t.jsx)("p",{children:"More complex layouts can also be created with the grid system."}),Object(t.jsx)(s.a,{codeText:K.a}),Object(t.jsx)(l.default,{h:"4",id:"horizontal-forms",children:"Horizontal form"}),Object(t.jsx)(s.a,{codeText:_.a}),Object(t.jsx)(l.default,{h:"4",id:"horizontal-forms-label-sizing",children:"Horizontal form label sizing"}),Object(t.jsxs)("p",{children:["You can size the ",Object(t.jsx)("code",{children:"<FormLabel>"})," using the column prop as shown."]}),Object(t.jsx)(s.a,{codeText:D.a}),Object(t.jsx)(l.default,{h:"4",id:"forms-col-sizing",children:"Column sizing"}),Object(t.jsxs)("p",{children:["As shown in the previous examples, our grid system allows you to place any number of ",Object(t.jsx)("code",{children:"<Col>"}),"s within a ",Object(t.jsx)("code",{children:"<Row>"}),". They'll split the available width equally between them. You may also pick a subset of your columns to take up more or less space, while the remaining ",Object(t.jsx)("code",{children:"<Col>"}),"s equally split the rest, with specific column classes like ",Object(t.jsx)("code",{children:"<Col xs={7}>"}),"."]}),Object(t.jsx)(s.a,{codeText:$.a}),Object(t.jsx)(l.default,{h:"4",id:"forms-auto-sizing",children:"Auto-sizing"}),Object(t.jsxs)("p",{children:["The example below uses a flexbox utility to vertically center the contents and changes ",Object(t.jsx)("code",{children:"<Col>"})," to"," ",Object(t.jsx)("code",{children:'<Col xs="auto">'})," so that your columns only take up as much space as needed. Put another way, the column sizes itself based on on the contents."]}),Object(t.jsx)(s.a,{codeText:A.a}),Object(t.jsx)("p",{children:"You can then remix that once again with size-specific column classes."}),Object(t.jsx)(s.a,{codeText:Y.a}),Object(t.jsxs)("p",{children:["And of course ",Object(t.jsx)("a",{href:"#forms-custom",children:"custom form controls"})," are supported."]}),Object(t.jsx)(s.a,{codeText:W.a}),Object(t.jsx)(l.default,{h:"2",id:"forms-help-text",children:"Help text"}),Object(t.jsxs)("p",{children:["Block-level help text in forms can be created using"," ",Object(t.jsx)("code",{children:"<Form.Text>"}),". Inline help text can be flexibly implemented using any inline HTML element and utility classes like",Object(t.jsx)("code",{children:".text-muted"}),"."]}),Object(t.jsxs)(r.a,{children:[Object(t.jsx)("h5",{children:"Associating help text with form controls"}),"Help text should be explicitly associated with the form control it relates to using the ",Object(t.jsx)("code",{children:"aria-describedby"})," attribute. This will ensure that assistive technologies—such as screen readers—will announce this help text when the user focuses or enters the control."]}),Object(t.jsxs)("p",{children:["Help text below inputs can be styled with ",Object(t.jsx)("code",{children:"<Form.Text>"}),". This component includes ",Object(t.jsx)("code",{children:"display: block"})," and adds some top margin for easy spacing from the inputs above."]}),Object(t.jsx)(s.a,{codeText:q.a}),Object(t.jsx)(l.default,{h:"2",id:"forms-disabled",children:"Disabled forms"}),Object(t.jsxs)("p",{children:["Add the ",Object(t.jsx)("code",{children:"disabled"})," boolean attribute on an input to prevent user interactions and make it appear lighter."]}),Object(t.jsx)(s.a,{codeText:z.a}),Object(t.jsxs)("p",{children:["Add the ",Object(t.jsx)("code",{children:"disabled"})," attribute to a ",Object(t.jsx)("code",{children:"<fieldset>"})," ","to disable all the controls within."]}),Object(t.jsx)(s.a,{codeText:T.a}),Object(t.jsxs)(r.a,{children:[Object(t.jsx)("h5",{children:"Caveat with anchors"}),"By default, browsers will treat all native form controls (",Object(t.jsx)("code",{children:"<input>"}),", ",Object(t.jsx)("code",{children:"<select>"})," and"," ",Object(t.jsx)("code",{children:"<button>"})," elements) inside a"," ",Object(t.jsx)("code",{children:"<fieldset disabled>"})," as disabled, preventing both keyboard and mouse interactions on them. However, if your form also includes ",Object(t.jsx)("code",{children:'<a ... class="btn btn-*">'})," elements, these will only be given a style of ",Object(t.jsx)("code",{children:"pointer-events: none"}),". As noted in the section about"," ",Object(t.jsx)("a",{href:"/components/buttons/#disabled-state",children:"disabled state for buttons"})," ","(and specifically in the sub-section for anchor elements), this CSS property is not yet standardized and isn’t fully supported in Internet Explorer 10, and won’t prevent keyboard users from being able to focus or activate these links. So to be safe, use custom JavaScript to disable such links."]}),Object(t.jsxs)(r.a,{theme:"danger",children:[Object(t.jsx)("h4",{children:"Cross-browser compatibility"}),"While Bootstrap will apply these styles in all browsers, Internet Explorer 11 and below don’t fully support the ",Object(t.jsx)("code",{children:"disabled"})," ","attribute on a ",Object(t.jsx)("code",{children:"<fieldset>"}),". Use custom JavaScript to disable the fieldset in these browsers."]}),Object(t.jsx)(l.default,{h:"2",id:"forms-validation",children:"Validation"}),Object(t.jsx)("p",{children:"Provide valuable, actionable feedback to your users with form validation feedback."}),Object(t.jsx)(l.default,{h:"3",id:"forms-validation-native",children:"Native HTML5 form validation"}),Object(t.jsxs)("p",{children:["For native HTML form validation–",Object(t.jsx)("a",{href:"https://caniuse.com/#feat=form-validation",children:"available in all our supported browsers"}),", the ",Object(t.jsx)("code",{children:":valid"})," and ",Object(t.jsx)("code",{children:":invalid"})," pseudo selectors are used to apply validation styles as well as display feedback messages."]}),Object(t.jsxs)("p",{children:["Bootstrap scopes the ",Object(t.jsx)("code",{children:":valid"})," and ",Object(t.jsx)("code",{children:":invalid"})," ","styles to parent ",Object(t.jsx)("code",{children:".was-validated"})," class, usually applied to the ",Object(t.jsx)("code",{children:"<Form>"})," (you can use the ",Object(t.jsx)("code",{children:"validated"})," prop as a shortcut). Otherwise, any required field without a value shows up as invalid on page load. This way, you may choose when to activate them (typically after form submission is attempted)."]}),Object(t.jsxs)(r.a,{children:["Watch out! Browsers provide their own validation UI by default on"," ",Object(t.jsx)("code",{children:"form"}),"s. You can disable the default UI by adding the HTML"," ",Object(t.jsx)("code",{children:"noValidate"})," attribute to your ",Object(t.jsx)("code",{children:"<Form>"})," or"," ",Object(t.jsx)("code",{children:"<form>"})," element."]}),Object(t.jsx)(s.a,{codeText:ge.a}),Object(t.jsx)(l.default,{h:"3",id:"forms-validation-libraries",children:"Form libraries and server-rendered styles"}),Object(t.jsxs)("p",{children:["It's often beneficial (especially in React) to handle form validation via a library like Formik, or react-formal. In those cases,"," ",Object(t.jsx)("code",{children:"isValid"})," and ",Object(t.jsx)("code",{children:"isInvalid"})," props can be added to form controls to manually apply validation styles. Below is a quick example integrating with"," ",Object(t.jsx)("a",{href:"https://github.com/jaredpalmer/formik",children:"Formik"}),"."]}),Object(t.jsx)(s.a,{codeText:fe.a}),Object(t.jsx)(l.default,{h:"3",id:"forms-validation-tooltips",children:"Tooltips"}),Object(t.jsxs)("p",{children:["If your form layout allows it, you can use the ",Object(t.jsx)("code",{children:"tooltip"})," prop to display validation feedback in a styled tooltip. Be sure to have a parent with ",Object(t.jsx)("code",{children:"position: relative"})," on it for tooltip positioning. In the example below, our column classes have this already, but your project may require an alternative setup."]}),Object(t.jsx)(s.a,{codeText:we.a}),Object(t.jsx)(l.default,{h:"3",id:"forms-validation-input-group",children:"Input group validation"}),Object(t.jsxs)("p",{children:["To properly show rounded corners in an ",Object(t.jsx)("code",{children:"<InputGroup>"})," ","with validation, the ",Object(t.jsx)("code",{children:"<InputGroup>"})," requires the"," ",Object(t.jsx)("code",{children:"hasValidation"})," prop."]}),Object(t.jsx)(s.a,{codeText:Ce.a}),Object(t.jsx)(l.default,{h:"3",id:"forms-validation-examples",children:"Examples"}),Object(t.jsx)(l.default,{h:"2",id:"forms-custom",children:"Custom forms"}),Object(t.jsx)("p",{children:"For even more customization and cross browser consistency, use our completely custom form elements to replace the browser defaults. They’re built on top of semantic and accessible markup, so they’re solid replacements for any default form control."}),Object(t.jsx)(l.default,{h:"3",id:"forms-custom-switch",children:"Switches"}),Object(t.jsxs)("p",{children:["A switch has the markup of a custom checkbox but uses"," ",Object(t.jsx)("code",{children:'type="switch"'})," to render a toggle switch. Switches also support the same customizable children as ",Object(t.jsx)("code",{children:"<FormCheck>"}),"."]}),Object(t.jsx)(s.a,{codeText:ce.a}),Object(t.jsxs)(r.a,{children:["You can also use the ",Object(t.jsx)("code",{children:"<Form.Switch>"})," alias which encapsulates the above, in a very small component wrapper."]}),Object(t.jsx)(l.default,{h:"2",id:"forms-api",children:"API"}),Object(t.jsx)(a.a,{metadata:o.Form}),Object(t.jsx)(a.a,{metadata:o.FormFloating,exportedBy:o.Form}),Object(t.jsx)(a.a,{metadata:o.FormGroup,exportedBy:o.Form}),Object(t.jsx)(a.a,{metadata:o.FormLabel,exportedBy:o.Form}),Object(t.jsx)(a.a,{metadata:o.FormText,exportedBy:o.Form}),Object(t.jsx)(a.a,{metadata:o.FormControl,exportedBy:o.Form}),Object(t.jsx)(a.a,{metadata:o.Feedback,exportedBy:o.FormControl}),Object(t.jsx)(a.a,{metadata:o.FormCheck,exportedBy:o.Form}),Object(t.jsx)(a.a,{metadata:o.FormCheckInput,exportedBy:o.FormCheck}),Object(t.jsx)(a.a,{metadata:o.FormCheckLabel,exportedBy:o.FormCheck}),Object(t.jsx)(a.a,{metadata:o.FormRange,exportedBy:o.Form}),Object(t.jsx)(a.a,{metadata:o.FormSelect,exportedBy:o.Form}),Object(t.jsx)(a.a,{metadata:o.FloatingLabel})]})}))},DXq1:function(e,o){e.exports='<Form>\n  <Row>\n    <Col xs={7}>\n      <Form.Control placeholder="City" />\n    </Col>\n    <Col>\n      <Form.Control placeholder="State" />\n    </Col>\n    <Col>\n      <Form.Control placeholder="Zip" />\n    </Col>\n  </Row>\n</Form>;\n'},F13a:function(e,o){e.exports='<>\n  <FloatingLabel\n    controlId="floatingInput"\n    label="Email address"\n    className="mb-3"\n  >\n    <Form.Control type="email" placeholder="name@example.com" />\n  </FloatingLabel>\n  <FloatingLabel controlId="floatingPassword" label="Password">\n    <Form.Control type="password" placeholder="Password" />\n  </FloatingLabel>\n</>;\n'},Jdld:function(e,o){e.exports='<Form>\n  <Form.Group className="mb-3" controlId="formBasicEmail">\n    <Form.Label>Email address</Form.Label>\n    <Form.Control type="email" placeholder="Enter email" />\n    <Form.Text className="text-muted">\n      We\'ll never share your email with anyone else.\n    </Form.Text>\n  </Form.Group>\n\n  <Form.Group className="mb-3" controlId="formBasicPassword">\n    <Form.Label>Password</Form.Label>\n    <Form.Control type="password" placeholder="Password" />\n  </Form.Group>\n  <Form.Group className="mb-3" controlId="formBasicCheckbox">\n    <Form.Check type="checkbox" label="Check me out" />\n  </Form.Group>\n  <Button variant="primary" type="submit">\n    Submit\n  </Button>\n</Form>;\n'},Q6D8:function(e,o,n){e.exports={callout:"Callout-styles-module--callout--1_K3h",warning:"Callout-styles-module--warning--39Zw- Callout-styles-module--callout--1_K3h",danger:"Callout-styles-module--danger--19388 Callout-styles-module--callout--1_K3h"}},QN7o:function(e,o){e.exports='<>\n  <Form.Select size="lg">\n    <option>Large select</option>\n  </Form.Select>\n  <br />\n  <Form.Select>\n    <option>Default select</option>\n  </Form.Select>\n  <br />\n  <Form.Select size="sm">\n    <option>Small select</option>\n  </Form.Select>\n</>;\n'},Qsvm:function(e,o){e.exports="<>\n  <Form.Label>Range</Form.Label>\n  <Form.Range />\n</>;\n"},Y2lv:function(e,o){e.exports='<Form>\n  {[\'checkbox\', \'radio\'].map((type) => (\n    <div key={`inline-${type}`} className="mb-3">\n      <Form.Check\n        inline\n        label="1"\n        name="group1"\n        type={type}\n        id={`inline-${type}-1`}\n      />\n      <Form.Check\n        inline\n        label="2"\n        name="group1"\n        type={type}\n        id={`inline-${type}-2`}\n      />\n      <Form.Check\n        inline\n        disabled\n        label="3 (disabled)"\n        type={type}\n        id={`inline-${type}-3`}\n      />\n    </div>\n  ))}\n</Form>;\n'},cIEL:function(e,o){e.exports='<Form.Select aria-label="Default select example">\n  <option>Open this select menu</option>\n  <option value="1">One</option>\n  <option value="2">Two</option>\n  <option value="3">Three</option>\n</Form.Select>;\n'},cbck:function(e,o){e.exports='<>\n  <FloatingLabel controlId="floatingTextarea" label="Comments" className="mb-3">\n    <Form.Control as="textarea" placeholder="Leave a comment here" />\n  </FloatingLabel>\n  <FloatingLabel controlId="floatingTextarea2" label="Comments">\n    <Form.Control\n      as="textarea"\n      placeholder="Leave a comment here"\n      style={{ height: \'100px\' }}\n    />\n  </FloatingLabel>\n</>;\n'},cgdb:function(e,o){e.exports='<>\n  <Form.Group className="mb-3">\n    <Form.Label>Disabled input</Form.Label>\n    <Form.Control placeholder="Disabled input" disabled />\n  </Form.Group>\n  <Form.Group className="mb-3">\n    <Form.Label>Disabled select menu</Form.Label>\n    <Form.Select disabled>\n      <option>Disabled select</option>\n    </Form.Select>\n  </Form.Group>\n  <Form.Group className="mb-3">\n    <Form.Check type="checkbox" label="Can\'t check this" disabled />\n  </Form.Group>\n</>;\n'},dKpd:function(e,o){e.exports='<Form>\n  <Row className="align-items-center">\n    <Col xs="auto" className="my-1">\n      <Form.Label\n        className="me-sm-2"\n        htmlFor="inlineFormCustomSelect"\n        visuallyHidden\n      >\n        Preference\n      </Form.Label>\n      <Form.Select className="me-sm-2" id="inlineFormCustomSelect">\n        <option value="0">Choose...</option>\n        <option value="1">One</option>\n        <option value="2">Two</option>\n        <option value="3">Three</option>\n      </Form.Select>\n    </Col>\n    <Col xs="auto" className="my-1">\n      <Form.Check\n        type="checkbox"\n        id="customControlAutosizing"\n        label="Remember my preference"\n      />\n    </Col>\n    <Col xs="auto" className="my-1">\n      <Button type="submit">Submit</Button>\n    </Col>\n  </Row>\n</Form>;\n'},dxsv:function(e,o){e.exports='<Form>\n  <Form.Group as={Row} className="mb-3" controlId="formPlaintextEmail">\n    <Form.Label column sm="2">\n      Email\n    </Form.Label>\n    <Col sm="10">\n      <Form.Control plaintext readOnly defaultValue="email@example.com" />\n    </Col>\n  </Form.Group>\n\n  <Form.Group as={Row} className="mb-3" controlId="formPlaintextPassword">\n    <Form.Label column sm="2">\n      Password\n    </Form.Label>\n    <Col sm="10">\n      <Form.Control type="password" placeholder="Password" />\n    </Col>\n  </Form.Group>\n</Form>;\n'},fZum:function(e,o){e.exports='<Form>\n  <Form.Group className="mb-3" controlId="exampleForm.ControlInput1">\n    <Form.Label>Email address</Form.Label>\n    <Form.Control type="email" placeholder="name@example.com" />\n  </Form.Group>\n  <Form.Group className="mb-3" controlId="exampleForm.ControlTextarea1">\n    <Form.Label>Example textarea</Form.Label>\n    <Form.Control as="textarea" rows={3} />\n  </Form.Group>\n</Form>;\n'},ffOz:function(e,o){e.exports='<>\n  <Row>\n    <Form.Label column="lg" lg={2}>\n      Large Text\n    </Form.Label>\n    <Col>\n      <Form.Control size="lg" type="text" placeholder="Large text" />\n    </Col>\n  </Row>\n  <br />\n  <Row>\n    <Form.Label column lg={2}>\n      Normal Text\n    </Form.Label>\n    <Col>\n      <Form.Control type="text" placeholder="Normal text" />\n    </Col>\n  </Row>\n  <br />\n  <Row>\n    <Form.Label column="sm" lg={2}>\n      Small Text\n    </Form.Label>\n    <Col>\n      <Form.Control size="sm" type="text" placeholder="Small text" />\n    </Col>\n  </Row>\n</>;\n'},h55t:function(e,o,n){"use strict";var t=n("oYCi"),r=n("Q6D8");o.a=function(e){var o=e.title,n=e.children,a=e.theme;return Object(t.jsxs)("aside",{role:"note",className:r[a||"warning"],children:[o&&Object(t.jsx)("header",{className:"h5",children:o}),Object(t.jsx)("div",{children:n})]})}},iIos:function(e,o){e.exports='<>\n  <Form.Control size="lg" type="text" placeholder="Large text" />\n  <br />\n  <Form.Control type="text" placeholder="Normal text" />\n  <br />\n  <Form.Control size="sm" type="text" placeholder="Small text" />\n</>;\n'},ljRQ:function(e,o){e.exports="<Form>\n  {['checkbox', 'radio'].map((type) => (\n    <div key={`default-${type}`} className=\"mb-3\">\n      <Form.Check // prettier-ignore\n        type={type}\n        id={`default-${type}`}\n        label={`default ${type}`}\n      />\n\n      <Form.Check\n        disabled\n        type={type}\n        label={`disabled ${type}`}\n        id={`disabled-default-${type}`}\n      />\n    </div>\n  ))}\n</Form>;\n"},n3XQ:function(e,o){e.exports='<Form>\n  <fieldset disabled>\n    <Form.Group className="mb-3">\n      <Form.Label htmlFor="disabledTextInput">Disabled input</Form.Label>\n      <Form.Control id="disabledTextInput" placeholder="Disabled input" />\n    </Form.Group>\n    <Form.Group className="mb-3">\n      <Form.Label htmlFor="disabledSelect">Disabled select menu</Form.Label>\n      <Form.Select id="disabledSelect">\n        <option>Disabled select</option>\n      </Form.Select>\n    </Form.Group>\n    <Form.Group className="mb-3">\n      <Form.Check\n        type="checkbox"\n        id="disabledFieldsetCheck"\n        label="Can\'t check this"\n      />\n    </Form.Group>\n    <Button type="submit">Submit</Button>\n  </fieldset>\n</Form>;\n'},nJQO:function(e,o){e.exports='<>\n  <Form.Floating className="mb-3">\n    <Form.Control\n      id="floatingInputCustom"\n      type="email"\n      placeholder="name@example.com"\n    />\n    <label htmlFor="floatingInputCustom">Email address</label>\n  </Form.Floating>\n  <Form.Floating>\n    <Form.Control\n      id="floatingPasswordCustom"\n      type="password"\n      placeholder="Password"\n    />\n    <label htmlFor="floatingPasswordCustom">Password</label>\n  </Form.Floating>\n</>;\n'},oWAn:function(e,o){e.exports='<Form.Control type="text" placeholder="Readonly input here..." readOnly />;\n'},pbHP:function(e,o){e.exports='<Form>\n  <Row className="align-items-center">\n    <Col xs="auto">\n      <Form.Label htmlFor="inlineFormInput" visuallyHidden>\n        Name\n      </Form.Label>\n      <Form.Control\n        className="mb-2"\n        id="inlineFormInput"\n        placeholder="Jane Doe"\n      />\n    </Col>\n    <Col xs="auto">\n      <Form.Label htmlFor="inlineFormInputGroup" visuallyHidden>\n        Username\n      </Form.Label>\n      <InputGroup className="mb-2">\n        <InputGroup.Text>@</InputGroup.Text>\n        <FormControl id="inlineFormInputGroup" placeholder="Username" />\n      </InputGroup>\n    </Col>\n    <Col xs="auto">\n      <Form.Check\n        type="checkbox"\n        id="autoSizingCheck"\n        className="mb-2"\n        label="Remember me"\n      />\n    </Col>\n    <Col xs="auto">\n      <Button type="submit" className="mb-2">\n        Submit\n      </Button>\n    </Col>\n  </Row>\n</Form>;\n'},pcjb:function(e,o){e.exports='<Form>\n  <Row className="mb-3">\n    <Form.Group as={Col} controlId="formGridEmail">\n      <Form.Label>Email</Form.Label>\n      <Form.Control type="email" placeholder="Enter email" />\n    </Form.Group>\n\n    <Form.Group as={Col} controlId="formGridPassword">\n      <Form.Label>Password</Form.Label>\n      <Form.Control type="password" placeholder="Password" />\n    </Form.Group>\n  </Row>\n\n  <Form.Group className="mb-3" controlId="formGridAddress1">\n    <Form.Label>Address</Form.Label>\n    <Form.Control placeholder="1234 Main St" />\n  </Form.Group>\n\n  <Form.Group className="mb-3" controlId="formGridAddress2">\n    <Form.Label>Address 2</Form.Label>\n    <Form.Control placeholder="Apartment, studio, or floor" />\n  </Form.Group>\n\n  <Row className="mb-3">\n    <Form.Group as={Col} controlId="formGridCity">\n      <Form.Label>City</Form.Label>\n      <Form.Control />\n    </Form.Group>\n\n    <Form.Group as={Col} controlId="formGridState">\n      <Form.Label>State</Form.Label>\n      <Form.Select defaultValue="Choose...">\n        <option>Choose...</option>\n        <option>...</option>\n      </Form.Select>\n    </Form.Group>\n\n    <Form.Group as={Col} controlId="formGridZip">\n      <Form.Label>Zip</Form.Label>\n      <Form.Control />\n    </Form.Group>\n  </Row>\n\n  <Form.Group className="mb-3" id="formGridCheckbox">\n    <Form.Check type="checkbox" label="Check me out" />\n  </Form.Group>\n\n  <Button variant="primary" type="submit">\n    Submit\n  </Button>\n</Form>;\n'},"r+yI":function(e,o,n){"use strict";n.d(o,"a",(function(){return c}));var t=n("rePB"),r=n("oYCi"),a=n("Snbm"),l=n("aArQ");function s(e,o){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);o&&(t=t.filter((function(o){return Object.getOwnPropertyDescriptor(e,o).enumerable}))),n.push.apply(n,t)}return n}function i(e){for(var o=1;o<arguments.length;o++){var n=null!=arguments[o]?arguments[o]:{};o%2?s(Object(n),!0).forEach((function(o){Object(t.a)(e,o,n[o])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(o){Object.defineProperty(e,o,Object.getOwnPropertyDescriptor(n,o))}))}return e}function c(e){return function(o){var n=o.location.pathname,t=l.a;return(n.startsWith("/getting-started")||n.startsWith("/layout")||n.startsWith("/components")||n.startsWith("/utilities"))&&(t=a.a),Object(r.jsx)(t,{location:o.location,children:Object(r.jsx)(e,i({},o))})}}},sOTj:function(e,o){e.exports='<Form>\n  <Form.Group className="mb-3" controlId="formGroupEmail">\n    <Form.Label>Email address</Form.Label>\n    <Form.Control type="email" placeholder="Enter email" />\n  </Form.Group>\n  <Form.Group className="mb-3" controlId="formGroupPassword">\n    <Form.Label>Password</Form.Label>\n    <Form.Control type="password" placeholder="Password" />\n  </Form.Group>\n</Form>;\n'},"u/9a":function(e,o){e.exports='<Form>\n  <Row>\n    <Col>\n      <Form.Control placeholder="First name" />\n    </Col>\n    <Col>\n      <Form.Control placeholder="Last name" />\n    </Col>\n  </Row>\n</Form>;\n'},uDF0:function(e,o){e.exports='<Form>\n  <Form.Group as={Row} className="mb-3" controlId="formHorizontalEmail">\n    <Form.Label column sm={2}>\n      Email\n    </Form.Label>\n    <Col sm={10}>\n      <Form.Control type="email" placeholder="Email" />\n    </Col>\n  </Form.Group>\n\n  <Form.Group as={Row} className="mb-3" controlId="formHorizontalPassword">\n    <Form.Label column sm={2}>\n      Password\n    </Form.Label>\n    <Col sm={10}>\n      <Form.Control type="password" placeholder="Password" />\n    </Col>\n  </Form.Group>\n  <fieldset>\n    <Form.Group as={Row} className="mb-3">\n      <Form.Label as="legend" column sm={2}>\n        Radios\n      </Form.Label>\n      <Col sm={10}>\n        <Form.Check\n          type="radio"\n          label="first radio"\n          name="formHorizontalRadios"\n          id="formHorizontalRadios1"\n        />\n        <Form.Check\n          type="radio"\n          label="second radio"\n          name="formHorizontalRadios"\n          id="formHorizontalRadios2"\n        />\n        <Form.Check\n          type="radio"\n          label="third radio"\n          name="formHorizontalRadios"\n          id="formHorizontalRadios3"\n        />\n      </Col>\n    </Form.Group>\n  </fieldset>\n  <Form.Group as={Row} className="mb-3" controlId="formHorizontalCheck">\n    <Col sm={{ span: 10, offset: 2 }}>\n      <Form.Check label="Remember me" />\n    </Col>\n  </Form.Group>\n\n  <Form.Group as={Row} className="mb-3">\n    <Col sm={{ span: 10, offset: 2 }}>\n      <Button type="submit">Sign in</Button>\n    </Col>\n  </Form.Group>\n</Form>;\n'},vChs:function(e,o){e.exports='<Row className="g-2">\n  <Col md>\n    <FloatingLabel controlId="floatingInputGrid" label="Email address">\n      <Form.Control type="email" placeholder="name@example.com" />\n    </FloatingLabel>\n  </Col>\n  <Col md>\n    <FloatingLabel controlId="floatingSelectGrid" label="Works with selects">\n      <Form.Select aria-label="Floating label select example">\n        <option>Open this select menu</option>\n        <option value="1">One</option>\n        <option value="2">Two</option>\n        <option value="3">Three</option>\n      </Form.Select>\n    </FloatingLabel>\n  </Col>\n</Row>;\n'},vaWq:function(e,o){e.exports='<FloatingLabel controlId="floatingSelect" label="Works with selects">\n  <Form.Select aria-label="Floating label select example">\n    <option>Open this select menu</option>\n    <option value="1">One</option>\n    <option value="2">Two</option>\n    <option value="3">Three</option>\n  </Form.Select>\n</FloatingLabel>;\n'},zq7G:function(e,o){e.exports='<>\n  <Form.Label htmlFor="inputPassword5">Password</Form.Label>\n  <Form.Control\n    type="password"\n    id="inputPassword5"\n    aria-describedby="passwordHelpBlock"\n  />\n  <Form.Text id="passwordHelpBlock" muted>\n    Your password must be 8-20 characters long, contain letters and numbers, and\n    must not contain spaces, special characters, or emoji.\n  </Form.Text>\n</>;\n'},zyQW:function(e,o){e.exports='<Form>\n  <Form.Check // prettier-ignore\n    type="switch"\n    id="custom-switch"\n    label="Check this switch"\n  />\n  <Form.Check // prettier-ignore\n    disabled\n    type="switch"\n    label="disabled switch"\n    id="disabled-custom-switch"\n  />\n</Form>;\n'}}]);
//# sourceMappingURL=component---src-pages-components-forms-js-0b283cc3bfd8a9bebe9c.js.map