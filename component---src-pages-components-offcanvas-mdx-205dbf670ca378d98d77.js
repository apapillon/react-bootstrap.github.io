(window.webpackJsonp=window.webpackJsonp||[]).push([[27],{"1SoR":function(n,e){n.exports="import React, { useState } from 'react';\nimport Button from 'react-bootstrap/Button';\nimport Offcanvas from 'react-bootstrap/Offcanvas';\n\nfunction Example() {\n  const [show, setShow] = useState(false);\n\n  const handleClose = () => setShow(false);\n  const handleShow = () => setShow(true);\n\n  return (\n    <>\n      <Button variant=\"primary\" onClick={handleShow}>\n        Launch\n      </Button>\n\n      <Offcanvas show={show} onHide={handleClose}>\n        <Offcanvas.Header closeButton>\n          <Offcanvas.Title>Offcanvas</Offcanvas.Title>\n        </Offcanvas.Header>\n        <Offcanvas.Body>\n          Some text as placeholder. In real life you can have the elements you\n          have chosen. Like, text, images, lists, etc.\n        </Offcanvas.Body>\n      </Offcanvas>\n    </>\n  );\n}\n\nrender(<Example />);\n"},Q6D8:function(n,e,a){n.exports={callout:"Callout-styles-module--callout--1_K3h",warning:"Callout-styles-module--warning--39Zw- Callout-styles-module--callout--1_K3h",danger:"Callout-styles-module--danger--19388 Callout-styles-module--callout--1_K3h"}},YEal:function(n,e){n.exports='import { useState } from \'react\';\nimport Alert from \'react-bootstrap/Alert\';\nimport Button from \'react-bootstrap/Button\';\nimport Offcanvas from \'react-bootstrap/Offcanvas\';\n\nfunction ResponsiveExample() {\n  const [show, setShow] = useState(false);\n\n  const handleClose = () => setShow(false);\n  const handleShow = () => setShow(true);\n\n  return (\n    <>\n      <Button variant="primary" className="d-lg-none" onClick={handleShow}>\n        Launch\n      </Button>\n\n      <Alert variant="info" className="d-none d-lg-block">\n        Resize your browser to show the responsive offcanvas toggle.\n      </Alert>\n\n      <Offcanvas show={show} onHide={handleClose} responsive="lg">\n        <Offcanvas.Header closeButton>\n          <Offcanvas.Title>Responsive offcanvas</Offcanvas.Title>\n        </Offcanvas.Header>\n        <Offcanvas.Body>\n          <p className="mb-0">\n            This is content within an <code>.offcanvas-lg</code>.\n          </p>\n        </Offcanvas.Body>\n      </Offcanvas>\n    </>\n  );\n}\n\nexport default ResponsiveExample;\n'},h55t:function(n,e,a){"use strict";var t=a("oYCi"),o=a("Q6D8");e.a=function(n){var e=n.title,a=n.children,s=n.theme;return Object(t.jsxs)("aside",{role:"note",className:o[s||"warning"],children:[e&&Object(t.jsx)("header",{className:"h5",children:e}),Object(t.jsx)("div",{children:a})]})}},l0mA:function(n,e){n.exports="import React, { useState } from 'react';\nimport Button from 'react-bootstrap/Button';\nimport Offcanvas from 'react-bootstrap/Offcanvas';\n\nconst options = [\n  {\n    name: 'Enable backdrop (default)',\n    scroll: false,\n    backdrop: true,\n  },\n  {\n    name: 'Disable backdrop',\n    scroll: false,\n    backdrop: false,\n  },\n  {\n    name: 'Enable body scrolling',\n    scroll: true,\n    backdrop: false,\n  },\n  {\n    name: 'Enable both scrolling & backdrop',\n    scroll: true,\n    backdrop: true,\n  },\n];\n\nfunction OffCanvasExample({ name, ...props }) {\n  const [show, setShow] = useState(false);\n\n  const handleClose = () => setShow(false);\n  const toggleShow = () => setShow((s) => !s);\n\n  return (\n    <>\n      <Button variant=\"primary\" onClick={toggleShow} className=\"me-2\">\n        {name}\n      </Button>\n      <Offcanvas show={show} onHide={handleClose} {...props}>\n        <Offcanvas.Header closeButton>\n          <Offcanvas.Title>Offcanvas</Offcanvas.Title>\n        </Offcanvas.Header>\n        <Offcanvas.Body>\n          Some text as placeholder. In real life you can have the elements you\n          have chosen. Like, text, images, lists, etc.\n        </Offcanvas.Body>\n      </Offcanvas>\n    </>\n  );\n}\n\nfunction Example() {\n  return (\n    <>\n      {options.map((props, idx) => (\n        <OffCanvasExample key={idx} {...props} />\n      ))}\n    </>\n  );\n}\n\nrender(<Example />);\n"},ppAh:function(n,e){n.exports="import React, { useState } from 'react';\nimport Button from 'react-bootstrap/Button';\nimport Offcanvas from 'react-bootstrap/Offcanvas';\n\nfunction OffCanvasExample({ name, ...props }) {\n  const [show, setShow] = useState(false);\n\n  const handleClose = () => setShow(false);\n  const handleShow = () => setShow(true);\n\n  return (\n    <>\n      <Button variant=\"primary\" onClick={handleShow} className=\"me-2\">\n        {name}\n      </Button>\n      <Offcanvas show={show} onHide={handleClose} {...props}>\n        <Offcanvas.Header closeButton>\n          <Offcanvas.Title>Offcanvas</Offcanvas.Title>\n        </Offcanvas.Header>\n        <Offcanvas.Body>\n          Some text as placeholder. In real life you can have the elements you\n          have chosen. Like, text, images, lists, etc.\n        </Offcanvas.Body>\n      </Offcanvas>\n    </>\n  );\n}\n\nfunction Example() {\n  return (\n    <>\n      {['start', 'end', 'top', 'bottom'].map((placement, idx) => (\n        <OffCanvasExample key={idx} placement={placement} name={placement} />\n      ))}\n    </>\n  );\n}\n\nrender(<Example />);\n"},t6xq:function(n,e){n.exports="import React, { useState } from 'react';\nimport Button from 'react-bootstrap/Button';\nimport Offcanvas from 'react-bootstrap/Offcanvas';\n\nfunction Example() {\n  const [show, setShow] = useState(false);\n\n  const handleClose = () => setShow(false);\n  const handleShow = () => setShow(true);\n\n  return (\n    <>\n      <Button variant=\"primary\" onClick={handleShow}>\n        Toggle static offcanvas\n      </Button>\n\n      <Offcanvas show={show} onHide={handleClose} backdrop=\"static\">\n        <Offcanvas.Header closeButton>\n          <Offcanvas.Title>Offcanvas</Offcanvas.Title>\n        </Offcanvas.Header>\n        <Offcanvas.Body>\n          I will not close if you click outside of me.\n        </Offcanvas.Body>\n      </Offcanvas>\n    </>\n  );\n}\n\nrender(<Example />);\n"},zlVk:function(n,e,a){"use strict";a.r(e),a.d(e,"_frontmatter",(function(){return y})),a.d(e,"default",(function(){return C}));var t,o=a("wx14"),s=a("zLVn"),c=(a("mXGw"),a("7ljp")),l=a("Snbm"),r=(a("h55t"),a("vXRK")),i=a("1u5/"),f=a("1SoR"),d=a.n(f),p=a("l0mA"),m=a.n(p),u=a("t6xq"),h=a.n(u),v=a("YEal"),O=a.n(v),b=a("ppAh"),x=a.n(b),w=["components"],y={},j=(t="PageHeader",function(n){return console.warn("Component "+t+" was not imported, exported, or provided by MDXProvider as global scope"),Object(c.mdx)("div",n)}),g={query:"3822479910",_frontmatter:y},S=l.a;function C(n){var e=n.components,a=Object(s.a)(n,w);return Object(c.mdx)(S,Object(o.a)({},g,a,{components:e,mdxType:"MDXLayout"}),Object(c.mdx)(j,{title:"Offcanvas",subTitle:"Build hidden sidebars into your project for navigation, shopping carts, and more.",mdxType:"PageHeader"}),Object(c.mdx)("h2",{id:"examples"},"Examples"),Object(c.mdx)("p",null,"Offcanvas includes support for a header with a close button and an optional body class\nfor some initial padding. We suggest that you include offcanvas headers with dismiss\nactions whenever possible, or provide an explicit dismiss action."),Object(c.mdx)("h3",{id:"basic-example"},"Basic Example"),Object(c.mdx)(i.a,{codeText:d.a,mdxType:"ReactPlayground"}),Object(c.mdx)("h3",{id:"responsive"},"Responsive"),Object(c.mdx)("p",null,"Responsive offcanvas classes hide content outside the viewport from a specified breakpoint\nand down. Above that breakpoint, the contents within will behave as usual."),Object(c.mdx)(i.a,{codeText:O.a,mdxType:"ReactPlayground"}),Object(c.mdx)("h3",{id:"placement"},"Placement"),Object(c.mdx)("p",null,"Offcanvas supports a few different placements:"),Object(c.mdx)("ul",null,Object(c.mdx)("li",{parentName:"ul"},Object(c.mdx)("inlineCode",{parentName:"li"},"start")," places offcanvas on the left of the viewport"),Object(c.mdx)("li",{parentName:"ul"},Object(c.mdx)("inlineCode",{parentName:"li"},"end")," places offcanvas on the right of the viewport"),Object(c.mdx)("li",{parentName:"ul"},Object(c.mdx)("inlineCode",{parentName:"li"},"top")," places offcanvas on the top of the viewport"),Object(c.mdx)("li",{parentName:"ul"},Object(c.mdx)("inlineCode",{parentName:"li"},"bottom")," places offcanvas on the bottom of the viewport")),Object(c.mdx)(i.a,{codeText:x.a,mdxType:"ReactPlayground"}),Object(c.mdx)("h3",{id:"backdrop"},"Backdrop"),Object(c.mdx)("p",null,"Scrolling the ",Object(c.mdx)("inlineCode",{parentName:"p"},"<body>")," element is disabled when an offcanvas and its backdrop are\nvisible. Use the ",Object(c.mdx)("inlineCode",{parentName:"p"},"scroll")," prop to toggle ",Object(c.mdx)("inlineCode",{parentName:"p"},"<body>")," scrolling and the ",Object(c.mdx)("inlineCode",{parentName:"p"},"backdrop")," prop\nto toggle the backdrop."),Object(c.mdx)(i.a,{codeText:m.a,mdxType:"ReactPlayground"}),Object(c.mdx)("h3",{id:"static-backdrop"},"Static backdrop"),Object(c.mdx)("p",null,"When ",Object(c.mdx)("inlineCode",{parentName:"p"},"backdrop")," is set to ",Object(c.mdx)("inlineCode",{parentName:"p"},"static"),", the offcanvas will not close when clicking outside of it."),Object(c.mdx)(i.a,{codeText:h.a,mdxType:"ReactPlayground"}),Object(c.mdx)("h2",{id:"api"},"API"),Object(c.mdx)(r.a,{metadata:a.data.Offcanvas,mdxType:"ComponentApi"}),Object(c.mdx)(r.a,{metadata:a.data.OffcanvasHeader,mdxType:"ComponentApi"}),Object(c.mdx)(r.a,{metadata:a.data.OffcanvasTitle,mdxType:"ComponentApi"}),Object(c.mdx)(r.a,{metadata:a.data.OffcanvasBody,mdxType:"ComponentApi"}),Object(c.mdx)("p",null,";"))}C.isMDXComponent=!0}}]);
//# sourceMappingURL=component---src-pages-components-offcanvas-mdx-205dbf670ca378d98d77.js.map