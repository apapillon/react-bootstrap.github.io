{"version":3,"sources":["webpack:///./src/examples/Offcanvas/Basic.js","webpack:///./src/components/Callout-styles.module.scss","webpack:///./src/components/Callout.js","webpack:///./src/examples/Offcanvas/Backdrop.js","webpack:///./src/examples/Offcanvas/Placement.js","webpack:///./src/pages/components/offcanvas.mdx"],"names":["module","exports","_frontmatter","layoutProps","query","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","className","codeText","Basic","parentName","Placement","Backdrop","metadata","data","Offcanvas","OffcanvasHeader","OffcanvasTitle","OffcanvasBody","isMDXComponent"],"mappings":"+EAAAA,EAAOC,QAAU,4rB,qBCCjBD,EAAOC,QAAU,CAAC,QAAU,wCAAwC,QAAU,8EAA8E,OAAS,+E,kDCGrK,EAAe,UAuCf,IAXA,SAAiB,GAAjB,qCACA,OACA,wEACA,uDACA,uC,mBCpCAD,EAAOC,QAAU,+xC,mBCAjBD,EAAOC,QAAU,i9B,02BCeV,IAiBMC,EAAe,GACtBC,EAAc,CAClBC,MAnBmB,aAoBnBF,gBAEIG,EAAYC,IACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,EACF,8BACD,OAAO,cAACJ,EAAD,SAAeF,GAAiBM,GAAhC,IAAuCD,WAAYA,EAAYE,QAAQ,cAM5E,wBAAQ,CACN,GAAM,cADR,aAGA,mBAAGC,UAAU,QAAb,qFAIA,wBAAQ,CACN,GAAM,aADR,YAGA,0QAGA,wBAAQ,CACN,GAAM,kBADR,iBAGA,cAAC,IAAD,CAAiBC,SAAUC,IAAOH,QAAQ,oBAC1C,wBAAQ,CACN,GAAM,cADR,aAGA,yEACA,wBACE,oBAAII,WAAW,MAAK,4BAAYA,WAAW,MAAvB,SAApB,iDACA,oBAAIA,WAAW,MAAK,4BAAYA,WAAW,MAAvB,OAApB,kDACA,oBAAIA,WAAW,MAAK,4BAAYA,WAAW,MAAvB,OAApB,gDACA,oBAAIA,WAAW,MAAK,4BAAYA,WAAW,MAAvB,UAApB,oDAEF,cAAC,IAAD,CAAiBF,SAAUG,IAAWL,QAAQ,oBAC9C,wBAAQ,CACN,GAAM,aADR,YAGA,wCAAqB,4BAAYI,WAAW,KAAvB,UAArB,iFACe,4BAAYA,WAAW,KAAvB,UADf,mBACqF,4BAAYA,WAAW,KAAvB,UADrF,sBAC8J,4BAAYA,WAAW,KAAvB,YAD9J,kCAGA,cAAC,IAAD,CAAiBF,SAAUI,IAAUN,QAAQ,oBAC7C,wBAAQ,CACN,GAAM,QADR,OAGA,cAAC,IAAD,CAAcO,SAAUR,EAAMS,KAAKC,UAAWT,QAAQ,iBACtD,cAAC,IAAD,CAAcO,SAAUR,EAAMS,KAAKE,gBAAiBV,QAAQ,iBAC5D,cAAC,IAAD,CAAcO,SAAUR,EAAMS,KAAKG,eAAgBX,QAAQ,iBAC3D,cAAC,IAAD,CAAcO,SAAUR,EAAMS,KAAKI,cAAeZ,QAAQ,iBAE1D,6BAKJH,EAAWgB,gBAAiB","file":"component---src-pages-components-offcanvas-mdx-ce39c26ffe7b611bf466.js","sourcesContent":["module.exports = \"function Example() {\\n  const [show, setShow] = useState(false);\\n\\n  const handleClose = () => setShow(false);\\n  const handleShow = () => setShow(true);\\n\\n  return (\\n    <>\\n      <Button variant=\\\"primary\\\" onClick={handleShow}>\\n        Launch\\n      </Button>\\n\\n      <Offcanvas show={show} onHide={handleClose}>\\n        <Offcanvas.Header closeButton>\\n          <Offcanvas.Title>Offcanvas</Offcanvas.Title>\\n        </Offcanvas.Header>\\n        <Offcanvas.Body>\\n          Some text as placeholder. In real life you can have the elements you\\n          have chosen. Like, text, images, lists, etc.\\n        </Offcanvas.Body>\\n      </Offcanvas>\\n    </>\\n  );\\n}\\n\\nrender(<Example />);\\n\"","// extracted by mini-css-extract-plugin\nmodule.exports = {\"callout\":\"Callout-styles-module--callout--1_K3h\",\"warning\":\"Callout-styles-module--warning--39Zw- Callout-styles-module--callout--1_K3h\",\"danger\":\"Callout-styles-module--danger--19388 Callout-styles-module--callout--1_K3h\"};","import PropTypes from 'prop-types';\n\nimport { css } from 'astroturf';\n\nconst styles = css`\n  @import '../css/theme';\n\n  .callout {\n    border-left: 4px solid transparent;\n    padding: 1.2rem 1.2rem 1.2rem calc(1rem - 4px);\n    margin-left: -1rem;\n    margin-bottom: 2rem;\n  }\n\n  .warning {\n    composes: callout;\n    background-color: transparentize($note, 0.7);\n    border-left-color: $note;\n  }\n  .danger {\n    composes: callout;\n    background-color: transparentize($error, 0.7);\n    border-left-color: $error;\n  }\n`;\n\nconst propTypes = {\n  title: PropTypes.node,\n  children: PropTypes.node,\n  theme: PropTypes.oneOf(['danger', 'warning']),\n};\n\nfunction Callout({ title, children, theme }) {\n  return (\n    <aside role=\"note\" className={styles[theme || 'warning']}>\n      {title && <header className=\"h5\">{title}</header>}\n      <div>{children}</div>\n    </aside>\n  );\n}\n\nCallout.propTypes = propTypes;\n\nexport default Callout;\n","module.exports = \"const options = [\\n  {\\n    name: 'Enable backdrop (default)',\\n    scroll: false,\\n    backdrop: true,\\n  },\\n  {\\n    name: 'Disable backdrop',\\n    scroll: false,\\n    backdrop: false,\\n  },\\n  {\\n    name: 'Enable body scrolling',\\n    scroll: true,\\n    backdrop: false,\\n  },\\n  {\\n    name: 'Enable both scrolling & backdrop',\\n    scroll: true,\\n    backdrop: true,\\n  },\\n];\\n\\nfunction OffCanvasExample({ name, ...props }) {\\n  const [show, setShow] = useState(false);\\n\\n  const handleClose = () => setShow(false);\\n  const toggleShow = () => setShow((s) => !s);\\n\\n  return (\\n    <>\\n      <Button variant=\\\"primary\\\" onClick={toggleShow} className=\\\"me-2\\\">\\n        {name}\\n      </Button>\\n      <Offcanvas show={show} onHide={handleClose} {...props}>\\n        <Offcanvas.Header closeButton>\\n          <Offcanvas.Title>Offcanvas</Offcanvas.Title>\\n        </Offcanvas.Header>\\n        <Offcanvas.Body>\\n          Some text as placeholder. In real life you can have the elements you\\n          have chosen. Like, text, images, lists, etc.\\n        </Offcanvas.Body>\\n      </Offcanvas>\\n    </>\\n  );\\n}\\n\\nfunction Example() {\\n  return (\\n    <>\\n      {options.map((props, idx) => (\\n        <OffCanvasExample key={idx} {...props} />\\n      ))}\\n    </>\\n  );\\n}\\n\\nrender(<Example />);\\n\"","module.exports = \"function OffCanvasExample({ name, ...props }) {\\n  const [show, setShow] = useState(false);\\n\\n  const handleClose = () => setShow(false);\\n  const handleShow = () => setShow(true);\\n\\n  return (\\n    <>\\n      <Button variant=\\\"primary\\\" onClick={handleShow} className=\\\"me-2\\\">\\n        {name}\\n      </Button>\\n      <Offcanvas show={show} onHide={handleClose} {...props}>\\n        <Offcanvas.Header closeButton>\\n          <Offcanvas.Title>Offcanvas</Offcanvas.Title>\\n        </Offcanvas.Header>\\n        <Offcanvas.Body>\\n          Some text as placeholder. In real life you can have the elements you\\n          have chosen. Like, text, images, lists, etc.\\n        </Offcanvas.Body>\\n      </Offcanvas>\\n    </>\\n  );\\n}\\n\\nfunction Example() {\\n  return (\\n    <>\\n      {['start', 'end', 'top', 'bottom'].map((placement, idx) => (\\n        <OffCanvasExample key={idx} placement={placement} name={placement} />\\n      ))}\\n    </>\\n  );\\n}\\n\\nrender(<Example />);\\n\"","import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport DefaultLayout from \"/Users/kyletsang/Documents/Kyle/Code/react-bootstrap/www/src/layouts/ApiLayout.js\";\nimport { graphql } from 'gatsby';\nimport Callout from '../../components/Callout';\nimport ComponentApi from '../../components/ComponentApi';\nimport ReactPlayground from '../../components/ReactPlayground';\nimport Basic from '../../examples/Offcanvas/Basic';\nimport Backdrop from '../../examples/Offcanvas/Backdrop';\nimport Placement from '../../examples/Offcanvas/Placement';\nexport const query = graphql`\n  query OffcanvasQuery {\n    Offcanvas: componentMetadata(displayName: { eq: \"Offcanvas\" }) {\n      displayName\n      ...ComponentApi_metadata\n    }\n    OffcanvasHeader: componentMetadata(displayName: { eq: \"OffcanvasHeader\" }) {\n      ...ComponentApi_metadata\n    }\n    OffcanvasTitle: componentMetadata(displayName: { eq: \"OffcanvasTitle\" }) {\n      ...ComponentApi_metadata\n    }\n    OffcanvasBody: componentMetadata(displayName: { eq: \"OffcanvasBody\" }) {\n      ...ComponentApi_metadata\n    }\n  }\n`;\nexport const _frontmatter = {};\nconst layoutProps = {\n  query,\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n\n\n\n    <h1 {...{\n      \"id\": \"offcanvas\"\n    }}>{`Offcanvas`}</h1>\n    <p className=\"lead\">\n  Build hidden sidebars into your project for navigation, shopping carts, and\n  more.\n    </p>\n    <h2 {...{\n      \"id\": \"examples\"\n    }}>{`Examples`}</h2>\n    <p>{`Offcanvas includes support for a header with a close button and an optional body class\nfor some initial padding. We suggest that you include offcanvas headers with dismiss\nactions whenever possible, or provide an explicit dismiss action.`}</p>\n    <h3 {...{\n      \"id\": \"basic-example\"\n    }}>{`Basic Example`}</h3>\n    <ReactPlayground codeText={Basic} mdxType=\"ReactPlayground\" />\n    <h3 {...{\n      \"id\": \"placement\"\n    }}>{`Placement`}</h3>\n    <p>{`Offcanvas supports a few different placements:`}</p>\n    <ul>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`start`}</inlineCode>{` places offcanvas on the left of the viewport`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`end`}</inlineCode>{` places offcanvas on the right of the viewport`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`top`}</inlineCode>{` places offcanvas on the top of the viewport`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`bottom`}</inlineCode>{` places offcanvas on the bottom of the viewport`}</li>\n    </ul>\n    <ReactPlayground codeText={Placement} mdxType=\"ReactPlayground\" />\n    <h3 {...{\n      \"id\": \"backdrop\"\n    }}>{`Backdrop`}</h3>\n    <p>{`Scrolling the `}<inlineCode parentName=\"p\">{`<body>`}</inlineCode>{` element is disabled when an offcanvas and its backdrop are\nvisible. Use the `}<inlineCode parentName=\"p\">{`scroll`}</inlineCode>{` prop to toggle `}<inlineCode parentName=\"p\">{`<body>`}</inlineCode>{` scrolling and the `}<inlineCode parentName=\"p\">{`backdrop`}</inlineCode>{` prop\nto toggle the backdrop.`}</p>\n    <ReactPlayground codeText={Backdrop} mdxType=\"ReactPlayground\" />\n    <h2 {...{\n      \"id\": \"api\"\n    }}>{`API`}</h2>\n    <ComponentApi metadata={props.data.Offcanvas} mdxType=\"ComponentApi\" />\n    <ComponentApi metadata={props.data.OffcanvasHeader} mdxType=\"ComponentApi\" />\n    <ComponentApi metadata={props.data.OffcanvasTitle} mdxType=\"ComponentApi\" />\n    <ComponentApi metadata={props.data.OffcanvasBody} mdxType=\"ComponentApi\" />\n\n    <p>{`;`}</p>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}