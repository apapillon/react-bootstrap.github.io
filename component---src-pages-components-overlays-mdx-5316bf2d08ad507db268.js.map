{"version":3,"sources":["webpack:///./src/examples/Overlays/TooltipInCopy.js","webpack:///./src/examples/Overlays/TooltipPositioned.js","webpack:///./src/examples/Overlays/PopoverContained.js","webpack:///./src/examples/Overlays/PopoverPositioned.js","webpack:///./src/pages/components/overlays.mdx","webpack:///./src/examples/Overlays/PopoverBasic.js","webpack:///./src/examples/Overlays/TooltipOverlay.js","webpack:///./src/components/Callout-styles.module.scss","webpack:///./src/examples/Overlays/TriggerRenderProp.js","webpack:///./src/examples/Overlays/Disabled.js","webpack:///./src/css/examples.module.scss","webpack:///./src/components/Callout.js","webpack:///./src/examples/Overlays/Trigger.js","webpack:///./src/examples/Overlays/Overlay.js","webpack:///./src/examples/Overlays/ScheduleUpdate.js"],"names":["module","exports","name","_frontmatter","PageHeader","props","console","warn","layoutProps","query","MDXLayout","DefaultLayout","MDXContent","components","mdxType","title","subTitle","parentName","codeText","Overlay","OverlayTrigger","TriggerRenderProp","className","TooltipInCopy","showCode","TooltipOverlay","TooltipPositioned","PopoverBasic","PopoverPositioned","Disabled","PopoverContained","exampleClassName","styles","overlayContained","ScheduleUpdate","metadata","data","Tooltip","Popover","PopoverBody","PopoverHeader","isMDXComponent","require"],"mappings":"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","file":"component---src-pages-components-overlays-mdx-5316bf2d08ad507db268.js","sourcesContent":["module.exports = \"import OverlayTrigger from 'react-bootstrap/OverlayTrigger';\\nimport Tooltip from 'react-bootstrap/Tooltip';\\n\\nfunction TooltipInCopyExample() {\\n  const Link = ({ id, children, title }) => (\\n    <OverlayTrigger overlay={<Tooltip id={id}>{title}</Tooltip>}>\\n      <a href=\\\"#\\\">{children}</a>\\n    </OverlayTrigger>\\n  );\\n\\n  return (\\n    <p>\\n      Tight pants next level keffiyeh{' '}\\n      <Link title=\\\"Default title\\\" id=\\\"t-1\\\">\\n        you probably\\n      </Link>{' '}\\n      haven't heard of them. Farm-to-table seitan, mcsweeney's fixie sustainable\\n      quinoa 8-bit american apparel{' '}\\n      <Link id=\\\"t-2\\\" title=\\\"Another one\\\">\\n        have a\\n      </Link>{' '}\\n      terry richardson vinyl chambray. Beard stumptown, cardigans banh mi lomo\\n      thundercats. Tofu biodiesel williamsburg marfa, four loko mcsweeney's\\n      cleanse vegan chambray. A really ironic artisan{' '}\\n      <Link title=\\\"Another one here too\\\" id=\\\"t-3\\\">\\n        whatever keytar\\n      </Link>\\n      , scenester farm-to-table banksy Austin{' '}\\n      <Link title=\\\"The last tip!\\\" id=\\\"t-4\\\">\\n        twitter handle\\n      </Link>{' '}\\n      freegan cred raw denim single-origin coffee viral.\\n    </p>\\n  );\\n}\\n\\nexport default TooltipInCopyExample;\\n\"","module.exports = \"import Button from 'react-bootstrap/Button';\\nimport OverlayTrigger from 'react-bootstrap/OverlayTrigger';\\nimport Tooltip from 'react-bootstrap/Tooltip';\\n\\nfunction TooltipPositionedExample() {\\n  return (\\n    <>\\n      {['top', 'right', 'bottom', 'left'].map((placement) => (\\n        <OverlayTrigger\\n          key={placement}\\n          placement={placement}\\n          overlay={\\n            <Tooltip id={`tooltip-${placement}`}>\\n              Tooltip on <strong>{placement}</strong>.\\n            </Tooltip>\\n          }\\n        >\\n          <Button variant=\\\"secondary\\\">Tooltip on {placement}</Button>\\n        </OverlayTrigger>\\n      ))}\\n    </>\\n  );\\n}\\n\\nexport default TooltipPositionedExample;\\n\"","module.exports = \"import React, { useState, useRef } from 'react';\\nimport Button from 'react-bootstrap/Button';\\nimport Overlay from 'react-bootstrap/Overlay';\\nimport Popover from 'react-bootstrap/Popover';\\n\\nfunction Example() {\\n  const [show, setShow] = useState(false);\\n  const [target, setTarget] = useState(null);\\n  const ref = useRef(null);\\n\\n  const handleClick = (event) => {\\n    setShow(!show);\\n    setTarget(event.target);\\n  };\\n\\n  return (\\n    <div ref={ref}>\\n      <Button onClick={handleClick}>Holy guacamole!</Button>\\n\\n      <Overlay\\n        show={show}\\n        target={target}\\n        placement=\\\"bottom\\\"\\n        container={ref}\\n        containerPadding={20}\\n      >\\n        <Popover id=\\\"popover-contained\\\">\\n          <Popover.Header as=\\\"h3\\\">Popover bottom</Popover.Header>\\n          <Popover.Body>\\n            <strong>Holy guacamole!</strong> Check this info.\\n          </Popover.Body>\\n        </Popover>\\n      </Overlay>\\n    </div>\\n  );\\n}\\n\\nrender(<Example />);\\n\"","module.exports = \"import Button from 'react-bootstrap/Button';\\nimport OverlayTrigger from 'react-bootstrap/OverlayTrigger';\\nimport Popover from 'react-bootstrap/Popover';\\n\\nfunction PopoverPositionedExample() {\\n  return (\\n    <>\\n      {['top', 'right', 'bottom', 'left'].map((placement) => (\\n        <OverlayTrigger\\n          trigger=\\\"click\\\"\\n          key={placement}\\n          placement={placement}\\n          overlay={\\n            <Popover id={`popover-positioned-${placement}`}>\\n              <Popover.Header as=\\\"h3\\\">{`Popover ${placement}`}</Popover.Header>\\n              <Popover.Body>\\n                <strong>Holy guacamole!</strong> Check this info.\\n              </Popover.Body>\\n            </Popover>\\n          }\\n        >\\n          <Button variant=\\\"secondary\\\">Popover on {placement}</Button>\\n        </OverlayTrigger>\\n      ))}\\n    </>\\n  );\\n}\\n\\nexport default PopoverPositionedExample;\\n\"","import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport DefaultLayout from \"/Users/kyletsang/Documents/Kyle/Code/react-bootstrap/www/src/layouts/ApiLayout.js\";\nimport { graphql } from 'gatsby';\nimport ComponentApi from '../../components/ComponentApi';\nimport ReactPlayground from '../../components/ReactPlayground';\nimport Callout from '../../components/Callout';\nimport Disabled from '../../examples/Overlays/Disabled';\nimport Overlay from '../../examples/Overlays/Overlay';\nimport OverlayTrigger from '../../examples/Overlays/Trigger';\nimport TriggerRenderProp from '../../examples/Overlays/TriggerRenderProp';\nimport PopoverBasic from '../../examples/Overlays/PopoverBasic';\nimport PopoverContained from '../../examples/Overlays/PopoverContained';\nimport PopoverPositioned from '../../examples/Overlays/PopoverPositioned';\nimport ScheduleUpdate from '../../examples/Overlays/ScheduleUpdate';\nimport TooltipInCopy from '../../examples/Overlays/TooltipInCopy';\nimport TooltipOverlay from '../../examples/Overlays/TooltipOverlay';\nimport TooltipPositioned from '../../examples/Overlays/TooltipPositioned';\nimport styles from '../../css/examples.module.scss';\nexport const query = graphql`\n  query OverlayQuery {\n    Tooltip: componentMetadata(displayName: { eq: \"Tooltip\" }) {\n      ...ComponentApi_metadata\n    }\n    Popover: componentMetadata(displayName: { eq: \"Popover\" }) {\n      ...ComponentApi_metadata\n    }\n    PopoverBody: componentMetadata(displayName: { eq: \"PopoverBody\" }) {\n      ...ComponentApi_metadata\n    }\n    PopoverHeader: componentMetadata(displayName: { eq: \"PopoverHeader\" }) {\n      ...ComponentApi_metadata\n    }\n    Overlay: componentMetadata(displayName: { eq: \"Overlay\" }) {\n      ...ComponentApi_metadata\n    }\n    OverlayTrigger: componentMetadata(displayName: { eq: \"OverlayTrigger\" }) {\n      ...ComponentApi_metadata\n    }\n  }\n`;\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst PageHeader = makeShortcode(\"PageHeader\");\nconst layoutProps = {\n  query,\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n\n\n\n\n    <PageHeader title=\"Overlays\" subTitle=\"A set of components for positioning beautiful overlays, tooltips, popovers,\n  and anything else you need.\" mdxType=\"PageHeader\" />\n    <h2 {...{\n      \"id\": \"overview\"\n    }}>{`Overview`}</h2>\n    <p>{`Things to know about the React-Boostrap Overlay components.`}</p>\n    <ul>\n      <li parentName=\"ul\">{`Overlays rely on the third-party library `}<a parentName=\"li\" {...{\n          \"href\": \"https://popper.js.org\"\n        }}>{`Popper.js`}</a>{`.\nIt's included automatically with React-Bootstrap, but you should reference the API\nfor more advanced use cases.`}</li>\n      <li parentName=\"ul\">{`The `}<inlineCode parentName=\"li\">{`<Tooltip>`}</inlineCode>{` and `}<inlineCode parentName=\"li\">{`<Popover>`}</inlineCode>{`\ncomponents do not position themselves. Instead the `}<inlineCode parentName=\"li\">{`<Overlay>`}</inlineCode>{` (or `}<inlineCode parentName=\"li\">{`<OverlayTrigger>`}</inlineCode>{`)\ncomponents, inject `}<inlineCode parentName=\"li\">{`ref`}</inlineCode>{` and `}<inlineCode parentName=\"li\">{`style`}</inlineCode>{` props.`}</li>\n      <li parentName=\"ul\">{`Tooltip expects specific props injected by the `}<inlineCode parentName=\"li\">{`<Overlay>`}</inlineCode>{` component`}</li>\n      <li parentName=\"ul\">{`Tooltips for `}<inlineCode parentName=\"li\">{`disabled`}</inlineCode>{` elements must be triggered on a wrapper element.`}</li>\n    </ul>\n    <h2 {...{\n      \"id\": \"overlay\"\n    }}>{`Overlay`}</h2>\n    <p><inlineCode parentName=\"p\">{`Overlay`}</inlineCode>{` is the fundamental component for positioning and\ncontrolling tooltip visibility. It's a wrapper around Popper.js, that\nadds support for transitions, and visibility toggling.`}</p>\n    <h3 {...{\n      \"id\": \"creating-an-overlay\"\n    }}>{`Creating an Overlay`}</h3>\n    <p>{`Overlays consist of at least two elements, the \"overlay\", the element to\nbe positioned, as well as a \"target\", the element the overlay is\npositioned in relation to. You can also also have an \"arrow\" element,\nlike the tooltips and popovers, but that is optional. Be sure to\ncheck out the `}<a parentName=\"p\" {...{\n        \"href\": \"https://popper.js.org/docs/v2\"\n      }}>{`Popper`}</a>{`\ndocumentation for more details about the injected props.`}</p>\n    <ReactPlayground codeText={Overlay} mdxType=\"ReactPlayground\" />\n    <h2 {...{\n      \"id\": \"overlaytrigger\"\n    }}>{`OverlayTrigger`}</h2>\n    <p>{`Since the above pattern is pretty common, but verbose, we've included\n`}<inlineCode parentName=\"p\">{`<OverlayTrigger>`}</inlineCode>{` component to help with common\nuse-cases. It even has functionality to delayed show or hides, and a few\ndifferent \"trigger\" events you can mix and match.`}</p>\n    <p>{`Note that triggering components must be able to accept `}<a parentName=\"p\" {...{\n        \"href\": \"https://reactjs.org/docs/refs-and-the-dom.html\"\n      }}>{`a ref`}</a>{`\nsince `}<inlineCode parentName=\"p\">{`<OverlayTrigger>`}</inlineCode>{` will attempt to add one. You can use\n`}<a parentName=\"p\" {...{\n        \"href\": \"https://reactjs.org/docs/react-api.html#reactforwardref\"\n      }}>{`forwardRef()`}</a>{` for function components.`}</p>\n    <ReactPlayground codeText={OverlayTrigger} mdxType=\"ReactPlayground\" />\n    <h3 {...{\n      \"id\": \"customizing-trigger-behavior\"\n    }}>{`Customizing trigger behavior`}</h3>\n    <p>{`For more advanced behaviors `}<inlineCode parentName=\"p\">{`<OverlayTrigger>`}</inlineCode>{` accepts a\nfunction child that passes in the injected `}<inlineCode parentName=\"p\">{`ref`}</inlineCode>{` and event\nhandlers that correspond to the configured `}<inlineCode parentName=\"p\">{`trigger`}</inlineCode>{` prop.`}</p>\n    <p>{`You can manually apply the props to any element you want or split them\nup. The example below shows how to position the overlay to a different\nelement than the one that triggers its visibility.`}</p>\n    <Callout mdxType=\"Callout\">\n  <strong>Pro Tip:</strong> Using the function form of OverlayTrigger avoids a\n  <code>React.findDOMNode</code> call, for those trying to be strict mode\n  compliant.\n    </Callout>\n    <ReactPlayground codeText={TriggerRenderProp} mdxType=\"ReactPlayground\" />\n    <h2 {...{\n      \"id\": \"tooltips\"\n    }}>{`Tooltips`}</h2>\n    <p className=\"lead\">\n  A tooltip component for a more stylish alternative to that anchor tag{' '}\n  <code>title</code> attribute.\n    </p>\n    <h3 {...{\n      \"id\": \"examples\"\n    }}>{`Examples`}</h3>\n    <p>{`Hover over the links below to see tooltips.`}</p>\n    <ReactPlayground codeText={TooltipInCopy} showCode={false} mdxType=\"ReactPlayground\" />\n    <p>{`You can pass the `}<inlineCode parentName=\"p\">{`Overlay`}</inlineCode>{` injected props directly to the\nTooltip component.`}</p>\n    <ReactPlayground codeText={TooltipOverlay} mdxType=\"ReactPlayground\" />\n    <p>{`Or pass a Tooltip element to `}<inlineCode parentName=\"p\">{`OverlayTrigger`}</inlineCode>{` instead.`}</p>\n    <ReactPlayground codeText={TooltipPositioned} mdxType=\"ReactPlayground\" />\n    <h2 {...{\n      \"id\": \"popovers\"\n    }}>{`Popovers`}</h2>\n    <p className=\"lead\">A popover component, like those found in iOS.</p>\n    <h3 {...{\n      \"id\": \"examples-1\"\n    }}>{`Examples`}</h3>\n    <ReactPlayground codeText={PopoverBasic} mdxType=\"ReactPlayground\" />\n    <p>{`As with `}<inlineCode parentName=\"p\">{`<Tooltip>`}</inlineCode>{`s, you can control the placement of the Popover.`}</p>\n    <ReactPlayground codeText={PopoverPositioned} mdxType=\"ReactPlayground\" />\n    <h2 {...{\n      \"id\": \"disabled-elements\"\n    }}>{`Disabled elements`}</h2>\n    <p>{`Elements with the `}<inlineCode parentName=\"p\">{`disabled`}</inlineCode>{` attribute aren’t interactive,\nmeaning users cannot hover or click them to trigger a popover (or\ntooltip). As a workaround, you’ll want to trigger the overlay from a\nwrapper `}<inlineCode parentName=\"p\">{`<div>`}</inlineCode>{` or `}<inlineCode parentName=\"p\">{`<span>`}</inlineCode>{` and override the `}<inlineCode parentName=\"p\">{`pointer-events`}</inlineCode>{` on the\ndisabled element.`}</p>\n    <ReactPlayground codeText={Disabled} mdxType=\"ReactPlayground\" />\n    <h2 {...{\n      \"id\": \"changing-containers\"\n    }}>{`Changing containers`}</h2>\n    <p>{`You can specify a `}<inlineCode parentName=\"p\">{`container`}</inlineCode>{` to control the DOM element the\noverlay is appended to. This is especially useful when styles conflict\nwith your Overlays.`}</p>\n    <ReactPlayground codeText={PopoverContained} exampleClassName={styles.overlayContained} mdxType=\"ReactPlayground\" />\n    <h2 {...{\n      \"id\": \"updating-position-dynamically\"\n    }}>{`Updating position dynamically`}</h2>\n    <p>{`Since we can't know every time your overlay changes size, to reposition\nit, you need to take manual action if you want to update the position of\nan Overlay in response to a change.`}</p>\n    <p>{`For this, the Overlay component also injects a a `}<inlineCode parentName=\"p\">{`popper`}</inlineCode>{`\nprop with a `}<inlineCode parentName=\"p\">{`scheduleUpdate()`}</inlineCode>{` method that an overlay\ncomponent can use to reposition itself.`}</p>\n    <ReactPlayground codeText={ScheduleUpdate} mdxType=\"ReactPlayground\" />\n    <h2 {...{\n      \"id\": \"api\"\n    }}>{`API`}</h2>\n    <ComponentApi metadata={props.data.Overlay} mdxType=\"ComponentApi\" />\n    <ComponentApi metadata={props.data.OverlayTrigger} mdxType=\"ComponentApi\" />\n    <ComponentApi metadata={props.data.Tooltip} mdxType=\"ComponentApi\" />\n    <ComponentApi metadata={props.data.Popover} mdxType=\"ComponentApi\" />\n    <ComponentApi metadata={props.data.PopoverBody} mdxType=\"ComponentApi\" />\n    <ComponentApi metadata={props.data.PopoverHeader} mdxType=\"ComponentApi\" />\n\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      ","module.exports = \"import Button from 'react-bootstrap/Button';\\nimport OverlayTrigger from 'react-bootstrap/OverlayTrigger';\\nimport Popover from 'react-bootstrap/Popover';\\n\\nconst popover = (\\n  <Popover id=\\\"popover-basic\\\">\\n    <Popover.Header as=\\\"h3\\\">Popover right</Popover.Header>\\n    <Popover.Body>\\n      And here's some <strong>amazing</strong> content. It's very engaging.\\n      right?\\n    </Popover.Body>\\n  </Popover>\\n);\\n\\nconst Example = () => (\\n  <OverlayTrigger trigger=\\\"click\\\" placement=\\\"right\\\" overlay={popover}>\\n    <Button variant=\\\"success\\\">Click me to see</Button>\\n  </OverlayTrigger>\\n);\\n\\nrender(<Example />);\\n\"","module.exports = \"import React, { useState, useRef } from 'react';\\nimport Button from 'react-bootstrap/Button';\\nimport Overlay from 'react-bootstrap/Overlay';\\nimport Tooltip from 'react-bootstrap/Tooltip';\\n\\nfunction Example() {\\n  const [show, setShow] = useState(false);\\n  const target = useRef(null);\\n\\n  return (\\n    <>\\n      <Button ref={target} onClick={() => setShow(!show)}>\\n        Click me!\\n      </Button>\\n      <Overlay target={target.current} show={show} placement=\\\"right\\\">\\n        {(props) => (\\n          <Tooltip id=\\\"overlay-example\\\" {...props}>\\n            My Tooltip\\n          </Tooltip>\\n        )}\\n      </Overlay>\\n    </>\\n  );\\n}\\n\\nrender(<Example />);\\n\"","// extracted by mini-css-extract-plugin\nmodule.exports = {\"callout\":\"Callout-styles-module--callout--1_K3h\",\"warning\":\"Callout-styles-module--warning--39Zw- Callout-styles-module--callout--1_K3h\",\"danger\":\"Callout-styles-module--danger--19388 Callout-styles-module--callout--1_K3h\"};","module.exports = \"import Button from 'react-bootstrap/Button';\\nimport Image from 'react-bootstrap/Image';\\nimport OverlayTrigger from 'react-bootstrap/OverlayTrigger';\\n\\nfunction TriggerRendererProp() {\\n  return (\\n    <OverlayTrigger\\n      placement=\\\"bottom\\\"\\n      overlay={<Tooltip id=\\\"button-tooltip-2\\\">Check out this avatar</Tooltip>}\\n    >\\n      {({ ref, ...triggerHandler }) => (\\n        <Button\\n          variant=\\\"light\\\"\\n          {...triggerHandler}\\n          className=\\\"d-inline-flex align-items-center\\\"\\n        >\\n          <Image\\n            ref={ref}\\n            roundedCircle\\n            src=\\\"holder.js/20x20?text=J&bg=28a745&fg=FFF\\\"\\n          />\\n          <span className=\\\"ms-1\\\">Hover to see</span>\\n        </Button>\\n      )}\\n    </OverlayTrigger>\\n  );\\n}\\n\\nexport default TriggerRendererProp;\\n\"","module.exports = \"import Button from 'react-bootstrap/Button';\\nimport OverlayTrigger from 'react-bootstrap/OverlayTrigger';\\nimport Tooltip from 'react-bootstrap/Tooltip';\\n\\nfunction DisabledExample() {\\n  return (\\n    <OverlayTrigger overlay={<Tooltip id=\\\"tooltip-disabled\\\">Tooltip!</Tooltip>}>\\n      <span className=\\\"d-inline-block\\\">\\n        <Button disabled style={{ pointerEvents: 'none' }}>\\n          Disabled button\\n        </Button>\\n      </span>\\n    </OverlayTrigger>\\n  );\\n}\\n\\nexport default DisabledExample;\\n\"","// extracted by mini-css-extract-plugin\nmodule.exports = {\"listGroup\":\"examples-module--list-group--IXNCn\",\"ratioExamples\":\"examples-module--ratio-examples--Gv1Nw\",\"staticDropdownMenu\":\"examples-module--static-dropdown-menu--kkfyD clearfix\",\"customDropdownMenu\":\"examples-module--custom-dropdown-menu--2e_DR\",\"overlayContained\":\"examples-module--overlay-contained--11C4s\"};","import PropTypes from 'prop-types';\n\nimport { css } from 'astroturf';\n\nconst styles = css`\n  @import '../css/theme';\n\n  .callout {\n    border-left: 4px solid transparent;\n    padding: 1.2rem 1.2rem 1.2rem calc(1rem - 4px);\n    margin-left: -1rem;\n    margin-bottom: 2rem;\n  }\n\n  .warning {\n    composes: callout;\n    background-color: transparentize($note, 0.7);\n    border-left-color: $note;\n  }\n  .danger {\n    composes: callout;\n    background-color: transparentize($error, 0.7);\n    border-left-color: $error;\n  }\n`;\n\nconst propTypes = {\n  title: PropTypes.node,\n  children: PropTypes.node,\n  theme: PropTypes.oneOf(['danger', 'warning']),\n};\n\nfunction Callout({ title, children, theme }) {\n  return (\n    <aside role=\"note\" className={styles[theme || 'warning']}>\n      {title && <header className=\"h5\">{title}</header>}\n      <div>{children}</div>\n    </aside>\n  );\n}\n\nCallout.propTypes = propTypes;\n\nexport default Callout;\n","module.exports = \"import Button from 'react-bootstrap/Button';\\nimport OverlayTrigger from 'react-bootstrap/OverlayTrigger';\\nimport Tooltip from 'react-bootstrap/Tooltip';\\n\\nfunction TriggerExample() {\\n  const renderTooltip = (props) => (\\n    <Tooltip id=\\\"button-tooltip\\\" {...props}>\\n      Simple tooltip\\n    </Tooltip>\\n  );\\n\\n  return (\\n    <OverlayTrigger\\n      placement=\\\"right\\\"\\n      delay={{ show: 250, hide: 400 }}\\n      overlay={renderTooltip}\\n    >\\n      <Button variant=\\\"success\\\">Hover me to see</Button>\\n    </OverlayTrigger>\\n  );\\n}\\n\\nexport default TriggerExample;\\n\"","module.exports = \"import React, { useState, useRef } from 'react';\\nimport Button from 'react-bootstrap/Button';\\nimport Overlay from 'react-bootstrap/Overlay';\\n\\nfunction Example() {\\n  const [show, setShow] = useState(false);\\n  const target = useRef(null);\\n\\n  return (\\n    <>\\n      <Button variant=\\\"danger\\\" ref={target} onClick={() => setShow(!show)}>\\n        Click me to see\\n      </Button>\\n      <Overlay target={target.current} show={show} placement=\\\"right\\\">\\n        {({ placement, arrowProps, show: _show, popper, ...props }) => (\\n          <div\\n            {...props}\\n            style={{\\n              position: 'absolute',\\n              backgroundColor: 'rgba(255, 100, 100, 0.85)',\\n              padding: '2px 10px',\\n              color: 'white',\\n              borderRadius: 3,\\n              ...props.style,\\n            }}\\n          >\\n            Simple tooltip\\n          </div>\\n        )}\\n      </Overlay>\\n    </>\\n  );\\n}\\n\\nrender(<Example />);\\n\"","module.exports = \"import React, { useEffect, useState } from 'react';\\nimport Button from 'react-bootstrap/Button';\\nimport OverlayTrigger from 'react-bootstrap/OverlayTrigger';\\nimport Popover from 'react-bootstrap/Popover';\\n\\nconst UpdatingPopover = React.forwardRef(\\n  ({ popper, children, show: _, ...props }, ref) => {\\n    useEffect(() => {\\n      console.log('updating!');\\n      popper.scheduleUpdate();\\n    }, [children, popper]);\\n\\n    return (\\n      <Popover ref={ref} body {...props}>\\n        {children}\\n      </Popover>\\n    );\\n  },\\n);\\n\\nconst longContent = `\\n  Very long\\n  Multiline content\\n  that is engaging and what-not\\n`;\\nconst shortContent = 'Short and sweet!';\\n\\nfunction Example() {\\n  const [content, setContent] = useState(shortContent);\\n\\n  useEffect(() => {\\n    const timerId = setInterval(() => {\\n      setContent(content === shortContent ? longContent : shortContent);\\n    }, 3000);\\n\\n    return () => clearInterval(timerId);\\n  });\\n\\n  return (\\n    <OverlayTrigger\\n      trigger=\\\"click\\\"\\n      overlay={\\n        <UpdatingPopover id=\\\"popover-contained\\\">{content}</UpdatingPopover>\\n      }\\n    >\\n      <Button>Holy guacamole!</Button>\\n    </OverlayTrigger>\\n  );\\n}\\n\\nrender(<Example />);\\n\""],"sourceRoot":""}