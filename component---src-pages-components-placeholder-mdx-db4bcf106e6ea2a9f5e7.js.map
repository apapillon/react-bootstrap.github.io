{"version":3,"sources":["webpack:///./src/pages/components/placeholder.mdx","webpack:///./src/components/Callout-styles.module.scss","webpack:///./src/examples/Placeholder/Size.js","webpack:///./src/examples/Placeholder/Card.js","webpack:///./src/examples/Placeholder/Animation.js","webpack:///./src/components/Callout.js","webpack:///./src/examples/Placeholder/Example.js","webpack:///./src/examples/Placeholder/Width.js","webpack:///./src/examples/Placeholder/Color.js"],"names":["_frontmatter","layoutProps","query","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","className","codeText","PlaceholderCard","parentName","PlaceholderExample","PlaceholderWidth","PlaceholderColor","PlaceholderSize","PlaceholderAnimation","metadata","data","Placeholder","PlaceholderButton","exportedBy","isMDXComponent","module","exports"],"mappings":"m+BAkBO,IAaMA,EAAe,GACtBC,EAAc,CAClBC,MAfmB,aAgBnBF,gBAEIG,EAAYC,IACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,EACF,8BACD,OAAO,cAACJ,EAAD,SAAeF,GAAiBM,GAAhC,IAAuCD,WAAYA,EAAYE,QAAQ,cAM5E,wBAAQ,CACN,GAAM,iBADR,gBAGA,mBAAGC,UAAU,QAAb,qIAIA,wBAAQ,CACN,GAAM,UADR,SAGA,mWAIA,wBAAQ,CACN,GAAM,YADR,WAGA,2MAEA,cAAC,IAAD,CAAiBC,SAAUC,IAAiBH,QAAQ,oBACpD,wBAAQ,CACN,GAAM,iBADR,gBAGA,uDAAoC,4BAAYI,WAAW,KAAvB,eAApC,4CAAwI,4BAAYA,WAAW,KAAvB,UAAxI,iBACS,4BAAYA,WAAW,KAAvB,SADT,+FAEgB,4BAAYA,WAAW,KAAvB,MAFhB,UAGA,2DAAwC,4BAAYA,WAAW,KAAvB,qBAAxC,SAA+G,4BAAYA,WAAW,KAAvB,YAA/G,kBAAsL,4BAAYA,WAAW,KAAvB,UAAtL,wFACiF,4BAAYA,WAAW,KAAvB,UADjF,yFAGA,cAAC,IAAD,CAAiBF,SAAUG,IAAoBL,QAAQ,oBACvD,cAAC,IAAD,CAASA,QAAQ,WAAjB,cACS,gDADT,4EAEsC,kCAFtC,4KAIyE,IAC3E,+BALE,oEAOA,wBAAQ,CACN,GAAM,UADR,SAGA,6CAA0B,4BAAYI,WAAW,KAAvB,SAA1B,oEACA,cAAC,IAAD,CAAiBF,SAAUI,IAAkBN,QAAQ,oBACrD,wBAAQ,CACN,GAAM,UADR,SAGA,0CAAuB,4BAAYI,WAAW,KAAvB,eAAvB,SAAwF,4BAAYA,WAAW,KAAvB,gBAAxF,kEAEA,cAAC,IAAD,CAAiBF,SAAUK,IAAkBP,QAAQ,oBACrD,wBAAQ,CACN,GAAM,WADR,UAGA,sCAAmB,4BAAYI,WAAW,KAAvB,eAAnB,kGACgC,4BAAYA,WAAW,KAAvB,MADhC,KACoF,4BAAYA,WAAW,KAAvB,MADpF,QAC2I,4BAAYA,WAAW,KAAvB,MAD3I,KAEA,cAAC,IAAD,CAAiBF,SAAUM,IAAiBR,QAAQ,oBACpD,wBAAQ,CACN,GAAM,cADR,aAGA,mEAAgD,4BAAYI,WAAW,KAAvB,aAAhD,OAA6G,4BAAYA,WAAW,KAAvB,QAA7G,OAAqK,4BAAYA,WAAW,KAAvB,QAArK,wDACuC,oBAAIA,WAAW,KAAf,YADvC,YAEA,cAAC,IAAD,CAAiBF,SAAUO,IAAsBT,QAAQ,oBACzD,wBAAQ,CACN,GAAM,QADR,OAGA,cAAC,IAAD,CAAcU,SAAUX,EAAMY,KAAKC,YAAaZ,QAAQ,iBACxD,cAAC,IAAD,CAAcU,SAAUX,EAAMY,KAAKE,kBAAmBC,WAAYf,EAAMY,KAAKC,YAAaZ,QAAQ,kBAMtGH,EAAWkB,gBAAiB,G,qBCpH5BC,EAAOC,QAAU,CAAC,QAAU,wCAAwC,QAAU,8EAA8E,OAAS,+E,mBCDrKD,EAAOC,QAAU,wJ,mBCAjBD,EAAOC,QAAU,i9B,mBCAjBD,EAAOC,QAAU,8L,kDCIjB,EAAe,UAuCf,IAXA,SAAiB,GAAjB,qCACA,OACA,wEACA,uDACA,uC,mBCpCAD,EAAOC,QAAU,kI,mBCAjBD,EAAOC,QAAU,uH,mBCAjBD,EAAOC,QAAU","file":"component---src-pages-components-placeholder-mdx-db4bcf106e6ea2a9f5e7.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport DefaultLayout from \"/Users/kyletsang/Documents/Kyle/Code/react-bootstrap/www/src/layouts/ApiLayout.js\";\nimport { graphql } from 'gatsby';\nimport Callout from '../../components/Callout';\nimport ComponentApi from '../../components/ComponentApi';\nimport ReactPlayground from '../../components/ReactPlayground';\nimport PlaceholderAnimation from '../../examples/Placeholder/Animation';\nimport PlaceholderCard from '../../examples/Placeholder/Card';\nimport PlaceholderColor from '../../examples/Placeholder/Color';\nimport PlaceholderExample from '../../examples/Placeholder/Example';\nimport PlaceholderSize from '../../examples/Placeholder/Size';\nimport PlaceholderWidth from '../../examples/Placeholder/Width';\nexport const query = graphql`\n  query Placeholder {\n    Placeholder: componentMetadata(displayName: { eq: \"Placeholder\" }) {\n      displayName\n      ...ComponentApi_metadata\n    }\n    PlaceholderButton: componentMetadata(\n      displayName: { eq: \"PlaceholderButton\" }\n    ) {\n      ...ComponentApi_metadata\n    }\n  }\n`;\nexport const _frontmatter = {};\nconst layoutProps = {\n  query,\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n\n\n\n    <h1 {...{\n      \"id\": \"placeholders\"\n    }}>{`Placeholders`}</h1>\n    <p className=\"lead\">\n  Use loading placeholders (otherwise known as \"skeletons\") for your components\n  or pages to indicate something may still be loading\n    </p>\n    <h2 {...{\n      \"id\": \"about\"\n    }}>{`About`}</h2>\n    <p>{`Placeholders can be used to enhance the experience of your application. They’re\nbuilt only with HTML and CSS, meaning you don’t need any JavaScript to create them.\nYou will, however, need some custom JavaScript to toggle their visibility. Their\nappearance, color, and sizing can be easily customized with our utility classes.`}</p>\n    <h2 {...{\n      \"id\": \"example\"\n    }}>{`Example`}</h2>\n    <p>{`In the example below, we take a typical card component and recreate it with placeholders\napplied to create a “loading card”. Size and proportions are the same between the two.`}</p>\n    <ReactPlayground codeText={PlaceholderCard} mdxType=\"ReactPlayground\" />\n    <h2 {...{\n      \"id\": \"how-it-works\"\n    }}>{`How it works`}</h2>\n    <p>{`Create placeholders with the `}<inlineCode parentName=\"p\">{`Placeholder`}</inlineCode>{` component and a grid column prop (e.g., `}<inlineCode parentName=\"p\">{`xs={6}`}</inlineCode>{`)\nto set the `}<inlineCode parentName=\"p\">{`width`}</inlineCode>{`. They can replace the text inside an element or be added to an existing\ncomponent via the `}<inlineCode parentName=\"p\">{`as`}</inlineCode>{` prop.`}</p>\n    <p>{`Additional styling is applied to `}<inlineCode parentName=\"p\">{`PlaceholderButton`}</inlineCode>{`s via `}<inlineCode parentName=\"p\">{`::before`}</inlineCode>{` to ensure the `}<inlineCode parentName=\"p\">{`height`}</inlineCode>{`\nis respected. You may extend this pattern for other situations as needed, or add a `}<inlineCode parentName=\"p\">{`&nbsp;`}</inlineCode>{`\nwithin the element to reflect the height when actual text is rendered in its place.`}</p>\n    <ReactPlayground codeText={PlaceholderExample} mdxType=\"ReactPlayground\" />\n    <Callout mdxType=\"Callout\">\n  The use of <code>aria-hidden=\"true\"</code> only indicates that the element\n  should be hidden to screen readers. The <i>loading</i> behaviour of the\n  placeholder depends on how authors will actually use the placeholder styles,\n  how they plan to update things, etc. Some JavasSript code may be needed to{' '}\n  <i>swap</i> the state of the placeholder and inform AT users of the update.\n    </Callout>\n    <h2 {...{\n      \"id\": \"width\"\n    }}>{`Width`}</h2>\n    <p>{`You can change the `}<inlineCode parentName=\"p\">{`width`}</inlineCode>{` through grid column classes, width utilities, or inline styles.`}</p>\n    <ReactPlayground codeText={PlaceholderWidth} mdxType=\"ReactPlayground\" />\n    <h2 {...{\n      \"id\": \"color\"\n    }}>{`Color`}</h2>\n    <p>{`By default, the `}<inlineCode parentName=\"p\">{`Placeholder`}</inlineCode>{` uses `}<inlineCode parentName=\"p\">{`currentColor`}</inlineCode>{`. This can be overriden with a custom color\nor utility class.`}</p>\n    <ReactPlayground codeText={PlaceholderColor} mdxType=\"ReactPlayground\" />\n    <h2 {...{\n      \"id\": \"sizing\"\n    }}>{`Sizing`}</h2>\n    <p>{`The size of `}<inlineCode parentName=\"p\">{`Placeholder`}</inlineCode>{`s are based on the typographic style of the parent element.\nCustomize them with sizing props: `}<inlineCode parentName=\"p\">{`lg`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`sm`}</inlineCode>{`, or `}<inlineCode parentName=\"p\">{`xs`}</inlineCode>{`.`}</p>\n    <ReactPlayground codeText={PlaceholderSize} mdxType=\"ReactPlayground\" />\n    <h2 {...{\n      \"id\": \"animation\"\n    }}>{`Animation`}</h2>\n    <p>{`Animate placeholders by setting the prop `}<inlineCode parentName=\"p\">{`animation`}</inlineCode>{` to `}<inlineCode parentName=\"p\">{`glow`}</inlineCode>{` or `}<inlineCode parentName=\"p\">{`wave`}</inlineCode>{` to better\nconvey the perception of something being `}<em parentName=\"p\">{`actively`}</em>{` loaded.`}</p>\n    <ReactPlayground codeText={PlaceholderAnimation} mdxType=\"ReactPlayground\" />\n    <h2 {...{\n      \"id\": \"api\"\n    }}>{`API`}</h2>\n    <ComponentApi metadata={props.data.Placeholder} mdxType=\"ComponentApi\" />\n    <ComponentApi metadata={props.data.PlaceholderButton} exportedBy={props.data.Placeholder} mdxType=\"ComponentApi\" />\n\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      ","// extracted by mini-css-extract-plugin\nmodule.exports = {\"callout\":\"Callout-styles-module--callout--1_K3h\",\"warning\":\"Callout-styles-module--warning--39Zw- Callout-styles-module--callout--1_K3h\",\"danger\":\"Callout-styles-module--danger--19388 Callout-styles-module--callout--1_K3h\"};","module.exports = \"<>\\n  <Placeholder xs={12} size=\\\"lg\\\" />\\n  <Placeholder xs={12} />\\n  <Placeholder xs={12} size=\\\"sm\\\" />\\n  <Placeholder xs={12} size=\\\"xs\\\" />\\n</>;\\n\"","module.exports = \"<div className=\\\"d-flex justify-content-around\\\">\\n  <Card style={{ width: '18rem' }}>\\n    <Card.Img variant=\\\"top\\\" src=\\\"holder.js/100px180\\\" />\\n    <Card.Body>\\n      <Card.Title>Card Title</Card.Title>\\n      <Card.Text>\\n        Some quick example text to build on the card title and make up the bulk\\n        of the card's content.\\n      </Card.Text>\\n      <Button variant=\\\"primary\\\">Go somewhere</Button>\\n    </Card.Body>\\n  </Card>\\n\\n  <Card style={{ width: '18rem' }}>\\n    <Card.Img variant=\\\"top\\\" src=\\\"holder.js/100px180\\\" />\\n    <Card.Body>\\n      <Placeholder as={Card.Title} animation=\\\"glow\\\">\\n        <Placeholder xs={6} />\\n      </Placeholder>\\n      <Placeholder as={Card.Text} animation=\\\"glow\\\">\\n        <Placeholder xs={7} /> <Placeholder xs={4} /> <Placeholder xs={4} />{' '}\\n        <Placeholder xs={6} /> <Placeholder xs={8} />\\n      </Placeholder>\\n      <Placeholder.Button variant=\\\"primary\\\" xs={6} />\\n    </Card.Body>\\n  </Card>\\n</div>;\\n\"","module.exports = \"<>\\n  <Placeholder as=\\\"p\\\" animation=\\\"glow\\\">\\n    <Placeholder xs={12} />\\n  </Placeholder>\\n  <Placeholder as=\\\"p\\\" animation=\\\"wave\\\">\\n    <Placeholder xs={12} />\\n  </Placeholder>\\n</>;\\n\"","import PropTypes from 'prop-types';\n\nimport { css } from 'astroturf';\n\nconst styles = css`\n  @import '../css/theme';\n\n  .callout {\n    border-left: 4px solid transparent;\n    padding: 1.2rem 1.2rem 1.2rem calc(1rem - 4px);\n    margin-left: -1rem;\n    margin-bottom: 2rem;\n  }\n\n  .warning {\n    composes: callout;\n    background-color: transparentize($note, 0.7);\n    border-left-color: $note;\n  }\n  .danger {\n    composes: callout;\n    background-color: transparentize($error, 0.7);\n    border-left-color: $error;\n  }\n`;\n\nconst propTypes = {\n  title: PropTypes.node,\n  children: PropTypes.node,\n  theme: PropTypes.oneOf(['danger', 'warning']),\n};\n\nfunction Callout({ title, children, theme }) {\n  return (\n    <aside role=\"note\" className={styles[theme || 'warning']}>\n      {title && <header className=\"h5\">{title}</header>}\n      <div>{children}</div>\n    </aside>\n  );\n}\n\nCallout.propTypes = propTypes;\n\nexport default Callout;\n","module.exports = \"<>\\n  <p aria-hidden=\\\"true\\\">\\n    <Placeholder xs={6} />\\n  </p>\\n\\n  <Placeholder.Button xs={4} aria-hidden=\\\"true\\\" />\\n</>;\\n\"","module.exports = \"<>\\n  <Placeholder xs={6} />\\n  <Placeholder className=\\\"w-75\\\" /> <Placeholder style={{ width: '25%' }} />\\n</>;\\n\"","module.exports = \"<>\\n  <Placeholder xs={12} />\\n\\n  <Placeholder xs={12} bg=\\\"primary\\\" />\\n  <Placeholder xs={12} bg=\\\"secondary\\\" />\\n  <Placeholder xs={12} bg=\\\"success\\\" />\\n  <Placeholder xs={12} bg=\\\"danger\\\" />\\n  <Placeholder xs={12} bg=\\\"warning\\\" />\\n  <Placeholder xs={12} bg=\\\"info\\\" />\\n  <Placeholder xs={12} bg=\\\"light\\\" />\\n  <Placeholder xs={12} bg=\\\"dark\\\" />\\n</>;\\n\""],"sourceRoot":""}