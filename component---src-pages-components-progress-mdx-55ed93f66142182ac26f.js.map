{"version":3,"sources":["webpack:///./src/pages/components/progress.mdx","webpack:///./src/examples/ProgressBar/Contextual.js","webpack:///./src/examples/ProgressBar/Basic.js","webpack:///./src/examples/ProgressBar/WithLabel.js","webpack:///./src/examples/ProgressBar/Striped.js","webpack:///./src/examples/ProgressBar/Animated.js","webpack:///./src/examples/ProgressBar/ScreenreaderLabel.js","webpack:///./src/examples/ProgressBar/Stacked.js"],"names":["name","_frontmatter","PageHeader","props","console","warn","layoutProps","query","MDXLayout","DefaultLayout","MDXContent","components","mdxType","title","subTitle","codeText","ProgressBarBasic","parentName","ProgressBarWithLabel","ProgressBarScreenreaderLabel","ProgressBarContextual","ProgressBarStriped","ProgressBarAnimated","ProgressBarStacked","metadata","data","ProgressBar","isMDXComponent","module","exports"],"mappings":"8LA2BsBA,E,wPAFTC,EAAe,GAOtBC,GALgBF,EAKW,aALH,SAA6BG,GAEzD,OADAC,QAAQC,KAAK,aAAeL,EAAO,2EAC5B,oBAASG,KAIZG,EAAc,CAClBC,MAhBmB,aAiBnBN,gBAEIO,EAAYC,IACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGR,EACF,iBACD,OAAO,cAACK,EAAD,eAAeF,EAAiBH,EAAhC,CAAuCQ,WAAYA,EAAYC,QAAQ,cAK5E,cAACV,EAAD,CAAYW,MAAM,gBAAgBC,SAAS,8GACTF,QAAQ,eAC1C,oBACE,GAAM,WADR,WAGA,gDACA,cAAC,IAAD,CAAiBG,SAAUC,IAAkBJ,QAAQ,oBACrD,oBACE,GAAM,cADR,cAGA,gCAAa,4BAAYK,WAAW,KAAvB,SAAb,uIAGA,cAAC,IAAD,CAAiBF,SAAUG,IAAsBN,QAAQ,oBACzD,oBACE,GAAM,2BADR,2BAGA,gCAAa,4BAAYK,WAAW,KAAvB,kBAAb,qCACA,cAAC,IAAD,CAAiBF,SAAUI,IAA8BP,QAAQ,oBACjE,oBACE,GAAM,2BADR,2BAGA,8GAEA,cAAC,IAAD,CAAiBG,SAAUK,IAAuBR,QAAQ,oBAC1D,oBACE,GAAM,WADR,WAGA,sEACA,cAAC,IAAD,CAAiBG,SAAUM,IAAoBT,QAAQ,oBACvD,oBACE,GAAM,YADR,YAGA,8BAAW,4BAAYK,WAAW,KAAvB,YAAX,+CACA,cAAC,IAAD,CAAiBF,SAAUO,IAAqBV,QAAQ,oBACxD,oBACE,GAAM,WADR,WAGA,+BAAY,4BAAYK,WAAW,KAAvB,mBAAZ,oBACA,cAAC,IAAD,CAAiBF,SAAUQ,IAAoBX,QAAQ,oBACvD,oBACE,GAAM,OADR,OAGA,cAAC,IAAD,CAAcY,SAAUrB,EAAMsB,KAAKC,YAAad,QAAQ,kBAM5DF,EAAWiB,gBAAiB,G,mBChG5BC,EAAOC,QAAU,qX,mBCAjBD,EAAOC,QAAU,gK,mBCAjBD,EAAOC,QAAU,8M,mBCAjBD,EAAOC,QAAU,+Y,mBCAjBD,EAAOC,QAAU,+K,mBCAjBD,EAAOC,QAAU,6O,mBCAjBD,EAAOC,QAAU","file":"component---src-pages-components-progress-mdx-55ed93f66142182ac26f.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport DefaultLayout from \"/Users/kyletsang/Documents/Kyle/Code/react-bootstrap/www/src/layouts/ApiLayout.js\";\nimport { graphql } from 'gatsby';\nimport ComponentApi from '../../components/ComponentApi';\nimport ReactPlayground from '../../components/ReactPlayground';\nimport ProgressBarAnimated from '../../examples/ProgressBar/Animated';\nimport ProgressBarBasic from '../../examples/ProgressBar/Basic';\nimport ProgressBarContextual from '../../examples/ProgressBar/Contextual';\nimport ProgressBarScreenreaderLabel from '../../examples/ProgressBar/ScreenreaderLabel';\nimport ProgressBarStacked from '../../examples/ProgressBar/Stacked';\nimport ProgressBarStriped from '../../examples/ProgressBar/Striped';\nimport ProgressBarWithLabel from '../../examples/ProgressBar/WithLabel';\nexport const query = graphql`\n  query ProgressBarQuery {\n    ProgressBar: componentMetadata(displayName: { eq: \"ProgressBar\" }) {\n      ...ComponentApi_metadata\n    }\n  }\n`;\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst PageHeader = makeShortcode(\"PageHeader\");\nconst layoutProps = {\n  query,\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n\n\n    <PageHeader title=\"Progress bars\" subTitle=\"Provide up-to-date feedback on the progress of a workflow or action with\n  simple yet flexible progress bars.\" mdxType=\"PageHeader\" />\n    <h2 {...{\n      \"id\": \"example\"\n    }}>{`Example`}</h2>\n    <p>{`Default progress bar.`}</p>\n    <ReactPlayground codeText={ProgressBarBasic} mdxType=\"ReactPlayground\" />\n    <h2 {...{\n      \"id\": \"with-label\"\n    }}>{`With label`}</h2>\n    <p>{`Add a `}<inlineCode parentName=\"p\">{`label`}</inlineCode>{` prop to show a visible percentage. For low\npercentages, consider adding a min-width to ensure the label's text is\nfully visible.`}</p>\n    <ReactPlayground codeText={ProgressBarWithLabel} mdxType=\"ReactPlayground\" />\n    <h2 {...{\n      \"id\": \"screenreader-only-label\"\n    }}>{`Screenreader only label`}</h2>\n    <p>{`Add a `}<inlineCode parentName=\"p\">{`visuallyHidden`}</inlineCode>{` prop to hide the label visually.`}</p>\n    <ReactPlayground codeText={ProgressBarScreenreaderLabel} mdxType=\"ReactPlayground\" />\n    <h2 {...{\n      \"id\": \"contextual-alternatives\"\n    }}>{`Contextual alternatives`}</h2>\n    <p>{`Progress bars use some of the same button and alert classes for\nconsistent styles.`}</p>\n    <ReactPlayground codeText={ProgressBarContextual} mdxType=\"ReactPlayground\" />\n    <h2 {...{\n      \"id\": \"striped\"\n    }}>{`Striped`}</h2>\n    <p>{`Uses a gradient to create a striped effect.`}</p>\n    <ReactPlayground codeText={ProgressBarStriped} mdxType=\"ReactPlayground\" />\n    <h2 {...{\n      \"id\": \"animated\"\n    }}>{`Animated`}</h2>\n    <p>{`Add `}<inlineCode parentName=\"p\">{`animated`}</inlineCode>{` prop to animate the stripes right to left.`}</p>\n    <ReactPlayground codeText={ProgressBarAnimated} mdxType=\"ReactPlayground\" />\n    <h2 {...{\n      \"id\": \"stacked\"\n    }}>{`Stacked`}</h2>\n    <p>{`Nest `}<inlineCode parentName=\"p\">{`<ProgressBar />`}</inlineCode>{`s to stack them.`}</p>\n    <ReactPlayground codeText={ProgressBarStacked} mdxType=\"ReactPlayground\" />\n    <h2 {...{\n      \"id\": \"api\"\n    }}>{`API`}</h2>\n    <ComponentApi metadata={props.data.ProgressBar} mdxType=\"ComponentApi\" />\n\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      ","module.exports = \"import ProgressBar from 'react-bootstrap/ProgressBar';\\n\\nfunction ContextualExample() {\\n  return (\\n    <div>\\n      <ProgressBar variant=\\\"success\\\" now={40} />\\n      <ProgressBar variant=\\\"info\\\" now={20} />\\n      <ProgressBar variant=\\\"warning\\\" now={60} />\\n      <ProgressBar variant=\\\"danger\\\" now={80} />\\n    </div>\\n  );\\n}\\n\\nexport default ContextualExample;\\n\"","module.exports = \"import ProgressBar from 'react-bootstrap/ProgressBar';\\n\\nfunction BasicExample() {\\n  return <ProgressBar now={60} />;\\n}\\n\\nexport default BasicExample;\\n\"","module.exports = \"import ProgressBar from 'react-bootstrap/ProgressBar';\\n\\nfunction WithLabelExample() {\\n  const now = 60;\\n  return <ProgressBar now={now} label={`${now}%`} />;\\n}\\n\\nexport default WithLabelExample;\\n\"","module.exports = \"import ProgressBar from 'react-bootstrap/ProgressBar';\\n\\nfunction StripedExample() {\\n  return (\\n    <div>\\n      <ProgressBar striped variant=\\\"success\\\" now={40} />\\n      <ProgressBar striped variant=\\\"info\\\" now={20} />\\n      <ProgressBar striped variant=\\\"warning\\\" now={60} />\\n      <ProgressBar striped variant=\\\"danger\\\" now={80} />\\n    </div>\\n  );\\n}\\n\\nexport default StripedExample;\\n\"","module.exports = \"import ProgressBar from 'react-bootstrap/ProgressBar';\\n\\nfunction AnimatedExample() {\\n  return <ProgressBar animated now={45} />;\\n}\\n\\nexport default AnimatedExample;\\n\"","module.exports = \"import ProgressBar from 'react-bootstrap/ProgressBar';\\n\\nfunction ScreenreaderLabelExample() {\\n  const now = 60;\\n  return <ProgressBar now={now} label={`${now}%`} visuallyHidden />;\\n}\\n\\nexport default ScreenreaderLabelExample;\\n\"","module.exports = \"import ProgressBar from 'react-bootstrap/ProgressBar';\\n\\nfunction StackedExample() {\\n  return (\\n    <ProgressBar>\\n      <ProgressBar striped variant=\\\"success\\\" now={35} key={1} />\\n      <ProgressBar variant=\\\"warning\\\" now={20} key={2} />\\n      <ProgressBar striped variant=\\\"danger\\\" now={10} key={3} />\\n    </ProgressBar>\\n  );\\n}\\n\\nexport default StackedExample;\\n\""],"sourceRoot":""}