{"version":3,"sources":["webpack:///./src/pages/components/progress.mdx","webpack:///./src/examples/ProgressBar/Contextual.js","webpack:///./src/examples/ProgressBar/Basic.js","webpack:///./src/examples/ProgressBar/WithLabel.js","webpack:///./src/examples/ProgressBar/Striped.js","webpack:///./src/examples/ProgressBar/Animated.js","webpack:///./src/examples/ProgressBar/ScreenreaderLabel.js","webpack:///./src/examples/ProgressBar/Stacked.js"],"names":["_frontmatter","layoutProps","query","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","className","codeText","ProgressBarBasic","parentName","ProgressBarWithLabel","ProgressBarScreenreaderLabel","ProgressBarContextual","ProgressBarStriped","ProgressBarAnimated","ProgressBarStacked","metadata","data","ProgressBar","isMDXComponent","module","exports"],"mappings":"8+BAkBO,IAOMA,EAAe,GACtBC,EAAc,CAClBC,MATmB,aAUnBF,gBAEIG,EAAYC,IACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,EACF,8BACD,OAAO,cAACJ,EAAD,SAAeF,GAAiBM,GAAhC,IAAuCD,WAAYA,EAAYE,QAAQ,cAK5E,wBAAQ,CACN,GAAM,kBADR,iBAGA,mBAAGC,UAAU,QAAb,+GAIA,wBAAQ,CACN,GAAM,YADR,WAGA,gDACA,cAAC,IAAD,CAAiBC,SAAUC,IAAkBH,QAAQ,oBACrD,wBAAQ,CACN,GAAM,eADR,cAGA,gCAAa,4BAAYI,WAAW,KAAvB,SAAb,uIAGA,cAAC,IAAD,CAAiBF,SAAUG,IAAsBL,QAAQ,oBACzD,wBAAQ,CACN,GAAM,4BADR,2BAGA,gCAAa,4BAAYI,WAAW,KAAvB,kBAAb,qCACA,cAAC,IAAD,CAAiBF,SAAUI,IAA8BN,QAAQ,oBACjE,wBAAQ,CACN,GAAM,4BADR,2BAGA,8GAEA,cAAC,IAAD,CAAiBE,SAAUK,IAAuBP,QAAQ,oBAC1D,wBAAQ,CACN,GAAM,YADR,WAGA,sEACA,cAAC,IAAD,CAAiBE,SAAUM,IAAoBR,QAAQ,oBACvD,wBAAQ,CACN,GAAM,aADR,YAGA,8BAAW,4BAAYI,WAAW,KAAvB,YAAX,+CACA,cAAC,IAAD,CAAiBF,SAAUO,IAAqBT,QAAQ,oBACxD,wBAAQ,CACN,GAAM,YADR,WAGA,+BAAY,4BAAYI,WAAW,KAAvB,mBAAZ,oBACA,cAAC,IAAD,CAAiBF,SAAUQ,IAAoBV,QAAQ,oBACvD,wBAAQ,CACN,GAAM,QADR,OAGA,cAAC,IAAD,CAAcW,SAAUZ,EAAMa,KAAKC,YAAab,QAAQ,kBAM5DH,EAAWiB,gBAAiB,G,mBC9F5BC,EAAOC,QAAU,wM,mBCAjBD,EAAOC,QAAU,+B,mBCAjBD,EAAOC,QAAU,2H,mBCAjBD,EAAOC,QAAU,wO,mBCAjBD,EAAOC,QAAU,wC,mBCAjBD,EAAOC,QAAU,kJ,mBCAjBD,EAAOC,QAAU","file":"component---src-pages-components-progress-mdx-665e2a1466c5323623fa.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport DefaultLayout from \"/Users/kyletsang/Documents/Kyle/Code/react-bootstrap/www/src/layouts/ApiLayout.js\";\nimport { graphql } from 'gatsby';\nimport ComponentApi from '../../components/ComponentApi';\nimport ReactPlayground from '../../components/ReactPlayground';\nimport ProgressBarAnimated from '../../examples/ProgressBar/Animated';\nimport ProgressBarBasic from '../../examples/ProgressBar/Basic';\nimport ProgressBarContextual from '../../examples/ProgressBar/Contextual';\nimport ProgressBarScreenreaderLabel from '../../examples/ProgressBar/ScreenreaderLabel';\nimport ProgressBarStacked from '../../examples/ProgressBar/Stacked';\nimport ProgressBarStriped from '../../examples/ProgressBar/Striped';\nimport ProgressBarWithLabel from '../../examples/ProgressBar/WithLabel';\nexport const query = graphql`\n  query ProgressBarQuery {\n    ProgressBar: componentMetadata(displayName: { eq: \"ProgressBar\" }) {\n      ...ComponentApi_metadata\n    }\n  }\n`;\nexport const _frontmatter = {};\nconst layoutProps = {\n  query,\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n\n\n    <h1 {...{\n      \"id\": \"progress-bars\"\n    }}>{`Progress bars`}</h1>\n    <p className=\"lead\">\n  Provide up-to-date feedback on the progress of a workflow or action with\n  simple yet flexible progress bars.\n    </p>\n    <h2 {...{\n      \"id\": \"example\"\n    }}>{`Example`}</h2>\n    <p>{`Default progress bar.`}</p>\n    <ReactPlayground codeText={ProgressBarBasic} mdxType=\"ReactPlayground\" />\n    <h2 {...{\n      \"id\": \"with-label\"\n    }}>{`With label`}</h2>\n    <p>{`Add a `}<inlineCode parentName=\"p\">{`label`}</inlineCode>{` prop to show a visible percentage. For low\npercentages, consider adding a min-width to ensure the label's text is\nfully visible.`}</p>\n    <ReactPlayground codeText={ProgressBarWithLabel} mdxType=\"ReactPlayground\" />\n    <h2 {...{\n      \"id\": \"screenreader-only-label\"\n    }}>{`Screenreader only label`}</h2>\n    <p>{`Add a `}<inlineCode parentName=\"p\">{`visuallyHidden`}</inlineCode>{` prop to hide the label visually.`}</p>\n    <ReactPlayground codeText={ProgressBarScreenreaderLabel} mdxType=\"ReactPlayground\" />\n    <h2 {...{\n      \"id\": \"contextual-alternatives\"\n    }}>{`Contextual alternatives`}</h2>\n    <p>{`Progress bars use some of the same button and alert classes for\nconsistent styles.`}</p>\n    <ReactPlayground codeText={ProgressBarContextual} mdxType=\"ReactPlayground\" />\n    <h2 {...{\n      \"id\": \"striped\"\n    }}>{`Striped`}</h2>\n    <p>{`Uses a gradient to create a striped effect.`}</p>\n    <ReactPlayground codeText={ProgressBarStriped} mdxType=\"ReactPlayground\" />\n    <h2 {...{\n      \"id\": \"animated\"\n    }}>{`Animated`}</h2>\n    <p>{`Add `}<inlineCode parentName=\"p\">{`animated`}</inlineCode>{` prop to animate the stripes right to left.`}</p>\n    <ReactPlayground codeText={ProgressBarAnimated} mdxType=\"ReactPlayground\" />\n    <h2 {...{\n      \"id\": \"stacked\"\n    }}>{`Stacked`}</h2>\n    <p>{`Nest `}<inlineCode parentName=\"p\">{`<ProgressBar />`}</inlineCode>{`s to stack them.`}</p>\n    <ReactPlayground codeText={ProgressBarStacked} mdxType=\"ReactPlayground\" />\n    <h2 {...{\n      \"id\": \"api\"\n    }}>{`API`}</h2>\n    <ComponentApi metadata={props.data.ProgressBar} mdxType=\"ComponentApi\" />\n\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      ","module.exports = \"<div>\\n  <ProgressBar variant=\\\"success\\\" now={40} />\\n  <ProgressBar variant=\\\"info\\\" now={20} />\\n  <ProgressBar variant=\\\"warning\\\" now={60} />\\n  <ProgressBar variant=\\\"danger\\\" now={80} />\\n</div>;\\n\"","module.exports = \"<ProgressBar now={60} />;\\n\"","module.exports = \"const now = 60;\\n\\nconst progressInstance = <ProgressBar now={now} label={`${now}%`} />;\\n\\nrender(progressInstance);\\n\"","module.exports = \"<div>\\n  <ProgressBar striped variant=\\\"success\\\" now={40} />\\n  <ProgressBar striped variant=\\\"info\\\" now={20} />\\n  <ProgressBar striped variant=\\\"warning\\\" now={60} />\\n  <ProgressBar striped variant=\\\"danger\\\" now={80} />\\n</div>;\\n\"","module.exports = \"<ProgressBar animated now={45} />;\\n\"","module.exports = \"const now = 60;\\n\\nconst progressInstance = (\\n  <ProgressBar now={now} label={`${now}%`} visuallyHidden />\\n);\\n\\nrender(progressInstance);\\n\"","module.exports = \"<ProgressBar>\\n  <ProgressBar striped variant=\\\"success\\\" now={35} key={1} />\\n  <ProgressBar variant=\\\"warning\\\" now={20} key={2} />\\n  <ProgressBar striped variant=\\\"danger\\\" now={10} key={3} />\\n</ProgressBar>;\\n\""],"sourceRoot":""}