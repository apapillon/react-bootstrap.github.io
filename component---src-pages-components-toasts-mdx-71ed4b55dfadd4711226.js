(window.webpackJsonp=window.webpackJsonp||[]).push([[36],{"3E8N":function(t,e){t.exports='function Example() {\n  const [showA, setShowA] = useState(true);\n  const [showB, setShowB] = useState(true);\n\n  const toggleShowA = () => setShowA(!showA);\n  const toggleShowB = () => setShowB(!showB);\n\n  return (\n    <Row>\n      <Col md={6} className="mb-2">\n        <Button onClick={toggleShowA} className="mb-2">\n          Toggle Toast <strong>with</strong> Animation\n        </Button>\n        <Toast show={showA} onClose={toggleShowA}>\n          <Toast.Header>\n            <img\n              src="holder.js/20x20?text=%20"\n              className="rounded me-2"\n              alt=""\n            />\n            <strong className="me-auto">Bootstrap</strong>\n            <small>11 mins ago</small>\n          </Toast.Header>\n          <Toast.Body>Woohoo, you\'re reading this text in a Toast!</Toast.Body>\n        </Toast>\n      </Col>\n      <Col md={6} className="mb-2">\n        <Button onClick={toggleShowB} className="mb-2">\n          Toggle Toast <strong>without</strong> Animation\n        </Button>\n        <Toast onClose={toggleShowB} show={showB} animation={false}>\n          <Toast.Header>\n            <img\n              src="holder.js/20x20?text=%20"\n              className="rounded me-2"\n              alt=""\n            />\n            <strong className="me-auto">Bootstrap</strong>\n            <small>11 mins ago</small>\n          </Toast.Header>\n          <Toast.Body>Woohoo, you\'re reading this text in a Toast!</Toast.Body>\n        </Toast>\n      </Col>\n    </Row>\n  );\n}\n\nrender(<Example />);\n'},"8RJs":function(t,e){t.exports='<div\n  aria-live="polite"\n  aria-atomic="true"\n  className="bg-dark position-relative"\n  style={{ minHeight: \'240px\' }}\n>\n  <ToastContainer position="top-end" className="p-3">\n    <Toast>\n      <Toast.Header>\n        <img src="holder.js/20x20?text=%20" className="rounded me-2" alt="" />\n        <strong className="me-auto">Bootstrap</strong>\n        <small className="text-muted">just now</small>\n      </Toast.Header>\n      <Toast.Body>See? Just like this.</Toast.Body>\n    </Toast>\n    <Toast>\n      <Toast.Header>\n        <img src="holder.js/20x20?text=%20" className="rounded me-2" alt="" />\n        <strong className="me-auto">Bootstrap</strong>\n        <small className="text-muted">2 seconds ago</small>\n      </Toast.Header>\n      <Toast.Body>Heads up, toasts will stack automatically</Toast.Body>\n    </Toast>\n  </ToastContainer>\n</div>;\n'},Q6D8:function(t,e,a){t.exports={callout:"Callout-styles-module--callout--1_K3h",warning:"Callout-styles-module--warning--39Zw- Callout-styles-module--callout--1_K3h",danger:"Callout-styles-module--danger--19388 Callout-styles-module--callout--1_K3h"}},VY1a:function(t,e){t.exports='<ToastContainer>\n  <Toast>\n    <Toast.Header>\n      <img src="holder.js/20x20?text=%20" className="rounded me-2" alt="" />\n      <strong className="me-auto">Bootstrap</strong>\n      <small className="text-muted">just now</small>\n    </Toast.Header>\n    <Toast.Body>See? Just like this.</Toast.Body>\n  </Toast>\n  <Toast>\n    <Toast.Header>\n      <img src="holder.js/20x20?text=%20" className="rounded me-2" alt="" />\n      <strong className="me-auto">Bootstrap</strong>\n      <small className="text-muted">2 seconds ago</small>\n    </Toast.Header>\n    <Toast.Body>Heads up, toasts will stack automatically</Toast.Body>\n  </Toast>\n</ToastContainer>;\n'},XCLx:function(t,e,a){"use strict";a.r(e),a.d(e,"_frontmatter",(function(){return N})),a.d(e,"default",(function(){return H}));var n=a("rePB"),o=a("zLVn"),s=(a("mXGw"),a("7ljp")),l=a("Snbm"),i=(a("h55t"),a("vXRK")),r=a("1u5/"),d=a("ZUzh"),m=a.n(d),c=a("3E8N"),u=a.n(c),p=a("VY1a"),h=a.n(p),g=a("sn94"),x=a.n(g),T=a("8RJs"),y=a.n(T),b=a("kgy5"),w=a.n(b),j=a("oPBi"),O=a.n(j);function f(t,e){var a=Object.keys(t);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(t);e&&(n=n.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),a.push.apply(a,n)}return a}function B(t){for(var e=1;e<arguments.length;e++){var a=null!=arguments[e]?arguments[e]:{};e%2?f(Object(a),!0).forEach((function(e){Object(n.a)(t,e,a[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(a)):f(Object(a)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(a,e))}))}return t}var N={},C={query:"3811179809",_frontmatter:N},v=l.a;function H(t){var e=t.components,a=Object(o.a)(t,["components"]);return Object(s.mdx)(v,B(B(B({},C),a),{},{components:e,mdxType:"MDXLayout"}),Object(s.mdx)("h1",B({},{id:"toasts"}),"Toasts"),Object(s.mdx)("p",{className:"lead"},"Push notifications to your visitors with a toast, a lightweight and easily customizable alert message."),Object(s.mdx)("p",null,"Toasts are lightweight notifications designed to mimic the push notifications that have been popularized by mobile and desktop operating systems. They’re built with flexbox, so they’re easy to align and position."),Object(s.mdx)("h2",B({},{id:"examples"}),"Examples"),Object(s.mdx)("h3",B({},{id:"basic"}),"Basic"),Object(s.mdx)("p",null,"To encourage extensible and predictable toasts, we recommend a header and body. Toast headers use display: flex, allowing easy alignment of content thanks to our margin and flexbox utilities."),Object(s.mdx)("p",null,"Toasts are as flexible as you need and have very little required markup. At a minimum, we require a single element to contain your “toasted” content and strongly encourage a dismiss button."),Object(s.mdx)(r.a,{codeText:m.a,mdxType:"ReactPlayground"}),Object(s.mdx)("h3",B({},{id:"dismissible"}),"Dismissible"),Object(s.mdx)(r.a,{codeText:u.a,mdxType:"ReactPlayground"}),Object(s.mdx)("h3",B({},{id:"stacking"}),"Stacking"),Object(s.mdx)("p",null,"When you have multiple toasts, we default to vertically stacking them in a readable manner."),Object(s.mdx)(r.a,{codeText:h.a,mdxType:"ReactPlayground"}),Object(s.mdx)("h3",B({},{id:"placement"}),"Placement"),Object(s.mdx)("p",null,"Place toasts by setting a ",Object(s.mdx)("inlineCode",{parentName:"p"},"position")," in a ",Object(s.mdx)("inlineCode",{parentName:"p"},"ToastContainer"),". The top right is often used for notifications, as is the top middle."),Object(s.mdx)(r.a,{codeText:x.a,mdxType:"ReactPlayground"}),Object(s.mdx)("p",null,"For systems that generate more notifications, consider using a wrapping element so they can easily stack."),Object(s.mdx)(r.a,{codeText:y.a,mdxType:"ReactPlayground"}),Object(s.mdx)("h3",B({},{id:"autohide"}),"Autohide"),Object(s.mdx)("p",null,"A Toast can also automatically hide after X milliseconds. For that, use the ",Object(s.mdx)("inlineCode",{parentName:"p"},"autohide")," prop in combination with ",Object(s.mdx)("inlineCode",{parentName:"p"},"delay")," the prop to sepecify the delay. But be aware, that it will only trigger the ",Object(s.mdx)("inlineCode",{parentName:"p"},"onClose")," function, you have to set manually the show property."),Object(s.mdx)(r.a,{codeText:w.a,mdxType:"ReactPlayground"}),Object(s.mdx)("h3",B({},{id:"contextual-variations"}),"Contextual variations"),Object(s.mdx)("p",null,"Add any of the below mentioned modifier classes to change the appearance of a toast."),Object(s.mdx)(r.a,{codeText:O.a,mdxType:"ReactPlayground"}),Object(s.mdx)("h2",B({},{id:"api"}),"API"),Object(s.mdx)(i.a,{metadata:a.data.Toast,mdxType:"ComponentApi"}),Object(s.mdx)(i.a,{metadata:a.data.ToastHeader,mdxType:"ComponentApi"}),Object(s.mdx)(i.a,{metadata:a.data.ToastBody,mdxType:"ComponentApi"}),Object(s.mdx)(i.a,{metadata:a.data.ToastContainer,mdxType:"ComponentApi"}))}H.isMDXComponent=!0},ZUzh:function(t,e){t.exports='<Toast>\n  <Toast.Header>\n    <img src="holder.js/20x20?text=%20" className="rounded me-2" alt="" />\n    <strong className="me-auto">Bootstrap</strong>\n    <small>11 mins ago</small>\n  </Toast.Header>\n  <Toast.Body>Hello, world! This is a toast message.</Toast.Body>\n</Toast>;\n'},h55t:function(t,e,a){"use strict";var n=a("oYCi"),o=a("Q6D8");e.a=function(t){var e=t.title,a=t.children,s=t.theme;return Object(n.jsxs)("aside",{role:"note",className:o[s||"warning"],children:[e&&Object(n.jsx)("header",{className:"h5",children:e}),Object(n.jsx)("div",{children:a})]})}},kgy5:function(t,e){t.exports='function Example() {\n  const [show, setShow] = useState(false);\n\n  return (\n    <Row>\n      <Col xs={6}>\n        <Toast onClose={() => setShow(false)} show={show} delay={3000} autohide>\n          <Toast.Header>\n            <img\n              src="holder.js/20x20?text=%20"\n              className="rounded me-2"\n              alt=""\n            />\n            <strong className="me-auto">Bootstrap</strong>\n            <small>11 mins ago</small>\n          </Toast.Header>\n          <Toast.Body>Woohoo, you\'re reading this text in a Toast!</Toast.Body>\n        </Toast>\n      </Col>\n      <Col xs={6}>\n        <Button onClick={() => setShow(true)}>Show Toast</Button>\n      </Col>\n    </Row>\n  );\n}\n\nrender(<Example />);\n'},oPBi:function(t,e){t.exports="[\n  'Primary',\n  'Secondary',\n  'Success',\n  'Danger',\n  'Warning',\n  'Info',\n  'Light',\n  'Dark',\n].map((variant, idx) => (\n  <Toast className=\"d-inline-block m-1\" bg={variant.toLowerCase()} key={idx}>\n    <Toast.Header>\n      <img src=\"holder.js/20x20?text=%20\" className=\"rounded me-2\" alt=\"\" />\n      <strong className=\"me-auto\">Bootstrap</strong>\n      <small>11 mins ago</small>\n    </Toast.Header>\n    <Toast.Body className={variant === 'Dark' && 'text-white'}>\n      Hello, world! This is a toast message.\n    </Toast.Body>\n  </Toast>\n));\n"},sn94:function(t,e){t.exports='function Example() {\n  const [position, setPosition] = useState(\'top-start\');\n\n  return (\n    <>\n      <div className="mb-3">\n        <label htmlFor="selectToastPlacement">Toast position</label>\n        <Form.Select\n          id="selectToastPlacement"\n          className="mt-2"\n          onChange={(e) => setPosition(e.currentTarget.value)}\n        >\n          {[\n            \'top-start\',\n            \'top-center\',\n            \'top-end\',\n            \'middle-start\',\n            \'middle-center\',\n            \'middle-end\',\n            \'bottom-start\',\n            \'bottom-center\',\n            \'bottom-end\',\n          ].map((p) => (\n            <option key={p} value={p}>\n              {p}\n            </option>\n          ))}\n        </Form.Select>\n      </div>\n\n      <div\n        aria-live="polite"\n        aria-atomic="true"\n        className="bg-dark position-relative"\n        style={{ minHeight: \'240px\' }}\n      >\n        <ToastContainer className="p-3" position={position}>\n          <Toast>\n            <Toast.Header closeButton={false}>\n              <img\n                src="holder.js/20x20?text=%20"\n                className="rounded me-2"\n                alt=""\n              />\n              <strong className="me-auto">Bootstrap</strong>\n              <small>11 mins ago</small>\n            </Toast.Header>\n            <Toast.Body>Hello, world! This is a toast message.</Toast.Body>\n          </Toast>\n        </ToastContainer>\n      </div>\n    </>\n  );\n}\n'}}]);
//# sourceMappingURL=component---src-pages-components-toasts-mdx-71ed4b55dfadd4711226.js.map