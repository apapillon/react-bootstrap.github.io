{"version":3,"sources":["webpack:///./src/examples/Form/CheckApi.js","webpack:///./src/examples/Form/NoLabels.js","webpack:///./src/components/Callout-styles.module.scss","webpack:///./src/examples/Form/CheckInline.js","webpack:///./src/components/Callout.js","webpack:///./src/pages/forms/checks-radios.mdx","webpack:///./src/examples/Form/Check.js","webpack:///./src/examples/Form/Switch.js"],"names":["module","exports","_frontmatter","layoutProps","query","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","className","parentName","codeText","Check","Switch","CheckInline","NoLabels","CheckApi","metadata","data","FormCheck","exportedBy","Form","FormCheckInput","FormCheckLabel","isMDXComponent"],"mappings":"+EAAAA,EAAOC,QAAU,oZ,mBCAjBD,EAAOC,QAAU,0G,qBCCjBD,EAAOC,QAAU,CAAC,QAAU,wCAAwC,QAAU,8EAA8E,OAAS,+E,mBCDrKD,EAAOC,QAAU,ujB,kDCIjB,EAAe,UAuCf,IAXA,SAAiB,GAAjB,qCACA,OACA,wEACA,uDACA,uC,o5BCnBO,IAgBMC,EAAe,GACtBC,EAAc,CAClBC,MAlBmB,aAmBnBF,gBAEIG,EAAYC,IACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,EACF,8BACD,OAAO,cAACJ,EAAD,SAAeF,GAAiBM,GAAhC,IAAuCD,WAAYA,EAAYE,QAAQ,cAM5E,wBAAQ,CACN,GAAM,sBADR,qBAGA,mBAAGC,UAAU,QAAb,0HAIA,2EAAwD,4BAAYC,WAAW,KAAvB,aAAxD,wGAGA,wBAAQ,CACN,GAAM,oBADR,qBAGA,2KAGA,cAAC,IAAD,CAAiBC,SAAUC,IAAOJ,QAAQ,oBAC1C,wBAAQ,CACN,GAAM,aADR,YAGA,gFAA6D,4BAAYE,WAAW,KAAvB,iBAA7D,yFAEU,4BAAYA,WAAW,KAAvB,eAFV,KAGA,cAAC,IAAD,CAAiBC,SAAUE,IAAQL,QAAQ,oBAC3C,cAAC,IAAD,CAASA,QAAQ,WAAjB,wBACmB,0BAAO,iBAD1B,2EAIA,wBAAQ,CACN,GAAM,WADR,UAGA,8FAA2E,4BAAYE,WAAW,KAAvB,UAA3E,UACA,cAAC,IAAD,CAAiBC,SAAUG,IAAaN,QAAQ,oBAChD,wBAAQ,CACN,GAAM,mBADR,kBAGA,0EAAuD,4BAAYE,WAAW,KAAvB,YAAvD,6EAEA,uBAAG,wBAAQA,WAAW,KAAnB,sBAA8C,4BAAYA,WAAW,UAAvB,cAA9C,2BACH,cAAC,IAAD,CAAiBC,SAAUI,IAAUP,QAAQ,oBAC7C,wBAAQ,CACN,GAAM,oCADR,mCAGA,sFAAmE,4BAAYE,WAAW,KAAvB,aAAnE,6EAEA,sCAAmB,4BAAYA,WAAW,KAAvB,YAAnB,WAAmF,4BAAYA,WAAW,KAAvB,aAAnF,2FAC4C,4BAAYA,WAAW,KAAvB,MAD5C,WACsG,4BAAYA,WAAW,KAAvB,aADtG,QAEF,4BAAYA,WAAW,KAAvB,aAFE,mDAGA,cAAC,IAAD,CAAiBC,SAAUK,IAAUR,QAAQ,oBAC7C,wBAAQ,CACN,GAAM,QADR,OAGA,cAAC,IAAD,CAAcS,SAAUV,EAAMW,KAAKC,UAAWC,WAAYb,EAAMW,KAAKG,KAAMb,QAAQ,iBACnF,cAAC,IAAD,CAAcS,SAAUV,EAAMW,KAAKI,eAAgBF,WAAYb,EAAMW,KAAKC,UAAWX,QAAQ,iBAC7F,cAAC,IAAD,CAAcS,SAAUV,EAAMW,KAAKK,eAAgBH,WAAYb,EAAMW,KAAKC,UAAWX,QAAQ,kBAMjGH,EAAWmB,gBAAiB,G,mBC7G5B1B,EAAOC,QAAU,oa,mBCAjBD,EAAOC,QAAU","file":"component---src-pages-forms-checks-radios-mdx-03808ecd199f2af734d3.js","sourcesContent":["module.exports = \"<Form>\\n  {['checkbox', 'radio'].map((type) => (\\n    <div key={type} className=\\\"mb-3\\\">\\n      <Form.Check type={type} id={`check-api-${type}`}>\\n        <Form.Check.Input type={type} isValid />\\n        <Form.Check.Label>{`Custom api ${type}`}</Form.Check.Label>\\n        <Form.Control.Feedback type=\\\"valid\\\">You did it!</Form.Control.Feedback>\\n      </Form.Check>\\n    </div>\\n  ))}\\n</Form>;\\n\"","module.exports = \"<>\\n  <Form.Check aria-label=\\\"option 1\\\" />\\n  <Form.Check type=\\\"radio\\\" aria-label=\\\"radio 1\\\" />\\n</>;\\n\"","// extracted by mini-css-extract-plugin\nmodule.exports = {\"callout\":\"Callout-styles-module--callout--1_K3h\",\"warning\":\"Callout-styles-module--warning--39Zw- Callout-styles-module--callout--1_K3h\",\"danger\":\"Callout-styles-module--danger--19388 Callout-styles-module--callout--1_K3h\"};","module.exports = \"<Form>\\n  {['checkbox', 'radio'].map((type) => (\\n    <div key={`inline-${type}`} className=\\\"mb-3\\\">\\n      <Form.Check\\n        inline\\n        label=\\\"1\\\"\\n        name=\\\"group1\\\"\\n        type={type}\\n        id={`inline-${type}-1`}\\n      />\\n      <Form.Check\\n        inline\\n        label=\\\"2\\\"\\n        name=\\\"group1\\\"\\n        type={type}\\n        id={`inline-${type}-2`}\\n      />\\n      <Form.Check\\n        inline\\n        disabled\\n        label=\\\"3 (disabled)\\\"\\n        type={type}\\n        id={`inline-${type}-3`}\\n      />\\n    </div>\\n  ))}\\n</Form>;\\n\"","import PropTypes from 'prop-types';\n\nimport { css } from 'astroturf';\n\nconst styles = css`\n  @import '../css/theme';\n\n  .callout {\n    border-left: 4px solid transparent;\n    padding: 1.2rem 1.2rem 1.2rem calc(1rem - 4px);\n    margin-left: -1rem;\n    margin-bottom: 2rem;\n  }\n\n  .warning {\n    composes: callout;\n    background-color: transparentize($note, 0.7);\n    border-left-color: $note;\n  }\n  .danger {\n    composes: callout;\n    background-color: transparentize($error, 0.7);\n    border-left-color: $error;\n  }\n`;\n\nconst propTypes = {\n  title: PropTypes.node,\n  children: PropTypes.node,\n  theme: PropTypes.oneOf(['danger', 'warning']),\n};\n\nfunction Callout({ title, children, theme }) {\n  return (\n    <aside role=\"note\" className={styles[theme || 'warning']}>\n      {title && <header className=\"h5\">{title}</header>}\n      <div>{children}</div>\n    </aside>\n  );\n}\n\nCallout.propTypes = propTypes;\n\nexport default Callout;\n","import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport DefaultLayout from \"/Users/kyletsang/Documents/Kyle/Code/react-bootstrap/www/src/layouts/ApiLayout.js\";\nimport { graphql } from 'gatsby';\nimport Callout from '../../components/Callout';\nimport ComponentApi from '../../components/ComponentApi';\nimport ReactPlayground from '../../components/ReactPlayground';\nimport Check from '../../examples/Form/Check';\nimport CheckApi from '../../examples/Form/CheckApi';\nimport CheckInline from '../../examples/Form/CheckInline';\nimport NoLabels from '../../examples/Form/NoLabels';\nimport Switch from '../../examples/Form/Switch';\nexport const query = graphql`\n  query FormCheckRadioQuery {\n    Form: componentMetadata(displayName: { eq: \"Form\" }) {\n      ...ComponentApi_metadata\n    }\n    FormCheck: componentMetadata(displayName: { eq: \"FormCheck\" }) {\n      ...ComponentApi_metadata\n    }\n    FormCheckInput: componentMetadata(displayName: { eq: \"FormCheckInput\" }) {\n      ...ComponentApi_metadata\n    }\n    FormCheckLabel: componentMetadata(displayName: { eq: \"FormCheckLabel\" }) {\n      ...ComponentApi_metadata\n    }\n  }\n`;\nexport const _frontmatter = {};\nconst layoutProps = {\n  query,\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n\n\n\n    <h1 {...{\n      \"id\": \"checks-and-radios\"\n    }}>{`Checks and radios`}</h1>\n    <p className=\"lead\">\n  Create consistent cross-browser and cross-device checkboxes and radios with\n  our completely rewritten checks component.\n    </p>\n    <p>{`For the non-textual checkbox and radio controls, `}<inlineCode parentName=\"p\">{`FormCheck`}</inlineCode>{`\nprovides a single component for both types that adds some additional\nstyling and improved layout.`}</p>\n    <h2 {...{\n      \"id\": \"default-stacked\"\n    }}>{`Default (stacked)`}</h2>\n    <p>{`By default, any number of checkboxes and radios that are immediate\nsibling will be vertically stacked and appropriately spaced with\nFormCheck.`}</p>\n    <ReactPlayground codeText={Check} mdxType=\"ReactPlayground\" />\n    <h2 {...{\n      \"id\": \"switches\"\n    }}>{`Switches`}</h2>\n    <p>{`A switch has the markup of a custom checkbox but uses `}<inlineCode parentName=\"p\">{`type=\"switch\"`}</inlineCode>{`\nto render a toggle switch. Switches also support the same customizable\nchildren as `}<inlineCode parentName=\"p\">{`<FormCheck>`}</inlineCode>{`.`}</p>\n    <ReactPlayground codeText={Switch} mdxType=\"ReactPlayground\" />\n    <Callout mdxType=\"Callout\">\n  You can also use the <code>{'<Form.Switch>'}</code> alias which encapsulates\n  the above, in a very small component wrapper.\n    </Callout>\n    <h2 {...{\n      \"id\": \"inline\"\n    }}>{`Inline`}</h2>\n    <p>{`Group checkboxes or radios on the same horizontal row by adding the `}<inlineCode parentName=\"p\">{`inline`}</inlineCode>{` prop.`}</p>\n    <ReactPlayground codeText={CheckInline} mdxType=\"ReactPlayground\" />\n    <h2 {...{\n      \"id\": \"without-labels\"\n    }}>{`Without labels`}</h2>\n    <p>{`When you render a FormCheck without a label (no `}<inlineCode parentName=\"p\">{`children`}</inlineCode>{`)\nsome additional styling is applied to keep the inputs from collapsing.`}</p>\n    <p><strong parentName=\"p\">{`Remember to add an `}<inlineCode parentName=\"strong\">{`aria-label`}</inlineCode>{` when omitting labels!`}</strong></p>\n    <ReactPlayground codeText={NoLabels} mdxType=\"ReactPlayground\" />\n    <h2 {...{\n      \"id\": \"customizing-formcheck-rendering\"\n    }}>{`Customizing FormCheck rendering`}</h2>\n    <p>{`When you need tighter control, or want to customize how the `}<inlineCode parentName=\"p\">{`FormCheck`}</inlineCode>{` component\nrenders, it may better to use its constituent parts directly.`}</p>\n    <p>{`By provided `}<inlineCode parentName=\"p\">{`children`}</inlineCode>{` to the `}<inlineCode parentName=\"p\">{`FormCheck`}</inlineCode>{` you can forgo the default rendering and\nhandle it yourself. (You can still provide an `}<inlineCode parentName=\"p\">{`id`}</inlineCode>{` to the `}<inlineCode parentName=\"p\">{`FormCheck`}</inlineCode>{` or\n`}<inlineCode parentName=\"p\">{`FormGroup`}</inlineCode>{` and have it propagate to the label and input).`}</p>\n    <ReactPlayground codeText={CheckApi} mdxType=\"ReactPlayground\" />\n    <h2 {...{\n      \"id\": \"api\"\n    }}>{`API`}</h2>\n    <ComponentApi metadata={props.data.FormCheck} exportedBy={props.data.Form} mdxType=\"ComponentApi\" />\n    <ComponentApi metadata={props.data.FormCheckInput} exportedBy={props.data.FormCheck} mdxType=\"ComponentApi\" />\n    <ComponentApi metadata={props.data.FormCheckLabel} exportedBy={props.data.FormCheck} mdxType=\"ComponentApi\" />\n\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      ","module.exports = \"<Form>\\n  {['checkbox', 'radio'].map((type) => (\\n    <div key={`default-${type}`} className=\\\"mb-3\\\">\\n      <Form.Check // prettier-ignore\\n        type={type}\\n        id={`default-${type}`}\\n        label={`default ${type}`}\\n      />\\n\\n      <Form.Check\\n        disabled\\n        type={type}\\n        label={`disabled ${type}`}\\n        id={`disabled-default-${type}`}\\n      />\\n    </div>\\n  ))}\\n</Form>;\\n\"","module.exports = \"<Form>\\n  <Form.Check // prettier-ignore\\n    type=\\\"switch\\\"\\n    id=\\\"custom-switch\\\"\\n    label=\\\"Check this switch\\\"\\n  />\\n  <Form.Check // prettier-ignore\\n    disabled\\n    type=\\\"switch\\\"\\n    label=\\\"disabled switch\\\"\\n    id=\\\"disabled-custom-switch\\\"\\n  />\\n</Form>;\\n\""],"sourceRoot":""}