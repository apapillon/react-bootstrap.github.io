{"version":3,"sources":["webpack:///./src/components/Callout-styles.module.scss","webpack:///./src/components/Callout.js","webpack:///./src/pages/forms/form-text.mdx","webpack:///./src/examples/Form/FormText.js"],"names":["module","exports","_frontmatter","layoutProps","query","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","className","parentName","codeText","FormText","metadata","data","exportedBy","Form","isMDXComponent"],"mappings":"+EACAA,EAAOC,QAAU,CAAC,QAAU,wCAAwC,QAAU,8EAA8E,OAAS,+E,kDCGrK,EAAe,UAuCf,IAXA,SAAiB,GAAjB,qCACA,OACA,wEACA,uDACA,uC,g0BCvBO,IAUMC,EAAe,GACtBC,EAAc,CAClBC,MAZmB,WAanBF,gBAEIG,EAAYC,IACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,EACF,8BACD,OAAO,cAACJ,EAAD,SAAeF,GAAiBM,GAAhC,IAAuCD,WAAYA,EAAYE,QAAQ,cAM5E,wBAAQ,CACN,GAAM,cADR,aAGA,mBAAGC,UAAU,QAAb,iDACA,wBAAQ,CACN,GAAM,aADR,YAGA,8EAA2D,4BAAYC,WAAW,KAAvB,eAA3D,2GAEG,4BAAYA,WAAW,KAAvB,eAFH,KAGA,cAAC,IAAD,CAASF,QAAQ,WACnB,oEADE,2FAGE,8CAHF,6JAOA,oEAAiD,4BAAYE,WAAW,KAAvB,eAAjD,8BACF,4BAAYA,WAAW,KAAvB,kBADE,qEAEA,cAAC,IAAD,CAAiBC,SAAUC,IAAUJ,QAAQ,oBAC7C,wBAAQ,CACN,GAAM,QADR,OAGA,cAAC,IAAD,CAAcK,SAAUN,EAAMO,KAAKF,SAAUG,WAAYR,EAAMO,KAAKE,KAAMR,QAAQ,kBAMtFH,EAAWY,gBAAiB,G,mBCpE5BnB,EAAOC,QAAU","file":"component---src-pages-forms-form-text-mdx-b97da7cc979fd8ed640a.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"callout\":\"Callout-styles-module--callout--1_K3h\",\"warning\":\"Callout-styles-module--warning--39Zw- Callout-styles-module--callout--1_K3h\",\"danger\":\"Callout-styles-module--danger--19388 Callout-styles-module--callout--1_K3h\"};","import PropTypes from 'prop-types';\n\nimport { css } from 'astroturf';\n\nconst styles = css`\n  @import '../css/theme';\n\n  .callout {\n    border-left: 4px solid transparent;\n    padding: 1.2rem 1.2rem 1.2rem calc(1rem - 4px);\n    margin-left: -1rem;\n    margin-bottom: 2rem;\n  }\n\n  .warning {\n    composes: callout;\n    background-color: transparentize($note, 0.7);\n    border-left-color: $note;\n  }\n  .danger {\n    composes: callout;\n    background-color: transparentize($error, 0.7);\n    border-left-color: $error;\n  }\n`;\n\nconst propTypes = {\n  title: PropTypes.node,\n  children: PropTypes.node,\n  theme: PropTypes.oneOf(['danger', 'warning']),\n};\n\nfunction Callout({ title, children, theme }) {\n  return (\n    <aside role=\"note\" className={styles[theme || 'warning']}>\n      {title && <header className=\"h5\">{title}</header>}\n      <div>{children}</div>\n    </aside>\n  );\n}\n\nCallout.propTypes = propTypes;\n\nexport default Callout;\n","import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport DefaultLayout from \"/Users/kyletsang/Documents/Kyle/Code/react-bootstrap/www/src/layouts/ApiLayout.js\";\nimport { graphql } from 'gatsby';\nimport Callout from '../../components/Callout';\nimport ComponentApi from '../../components/ComponentApi';\nimport ReactPlayground from '../../components/ReactPlayground';\nimport FormText from '../../examples/Form/FormText';\nexport const query = graphql`\n  query FormTextQuery {\n    Form: componentMetadata(displayName: { eq: \"Form\" }) {\n      ...ComponentApi_metadata\n    }\n    FormText: componentMetadata(displayName: { eq: \"FormText\" }) {\n      ...ComponentApi_metadata\n    }\n  }\n`;\nexport const _frontmatter = {};\nconst layoutProps = {\n  query,\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n\n\n\n    <h1 {...{\n      \"id\": \"form-text\"\n    }}>{`Form text`}</h1>\n    <p className=\"lead\">Create block-level or inline-level form text.</p>\n    <h2 {...{\n      \"id\": \"overview\"\n    }}>{`Overview`}</h2>\n    <p>{`Block-level help text in forms can be created using `}<inlineCode parentName=\"p\">{`<Form.Text>`}</inlineCode>{`. Inline help\ntext can be flexibly implemented using any inline HTML element and utility classes\nlike `}<inlineCode parentName=\"p\">{`.text-muted`}</inlineCode>{`.`}</p>\n    <Callout mdxType=\"Callout\">\n  <h5>Associating help text with form controls</h5>\n  Help text should be explicitly associated with the form control it relates to using\n  the <code>aria-describedby</code> attribute. This will ensure that assistive technologies—such\n  as screen readers—will announce this help text when the user focuses or enters\n  the control.\n    </Callout>\n    <p>{`Form text below inputs can be styled with `}<inlineCode parentName=\"p\">{`<Form.Text>`}</inlineCode>{`. This component includes\n`}<inlineCode parentName=\"p\">{`display: block`}</inlineCode>{` and adds some top margin for easy spacing from the inputs above.`}</p>\n    <ReactPlayground codeText={FormText} mdxType=\"ReactPlayground\" />\n    <h2 {...{\n      \"id\": \"api\"\n    }}>{`API`}</h2>\n    <ComponentApi metadata={props.data.FormText} exportedBy={props.data.Form} mdxType=\"ComponentApi\" />\n\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      ","module.exports = \"<>\\n  <Form.Label htmlFor=\\\"inputPassword5\\\">Password</Form.Label>\\n  <Form.Control\\n    type=\\\"password\\\"\\n    id=\\\"inputPassword5\\\"\\n    aria-describedby=\\\"passwordHelpBlock\\\"\\n  />\\n  <Form.Text id=\\\"passwordHelpBlock\\\" muted>\\n    Your password must be 8-20 characters long, contain letters and numbers, and\\n    must not contain spaces, special characters, or emoji.\\n  </Form.Text>\\n</>;\\n\""],"sourceRoot":""}