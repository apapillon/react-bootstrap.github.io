{"version":3,"sources":["webpack:///./src/pages/forms/overview.mdx","webpack:///./src/examples/Form/Basic.js","webpack:///./src/examples/Form/FormDisabledInputs.js","webpack:///./src/examples/Form/FormDisabled.js"],"names":["name","_frontmatter","PageHeader","props","console","warn","layoutProps","query","MDXLayout","DefaultLayout","MDXContent","components","mdxType","title","subTitle","parentName","codeText","FormBasic","FormDisabledInputs","FormDisabled","metadata","data","Form","FormLabel","exportedBy","isMDXComponent","module","exports"],"mappings":"4LA0BsBA,E,oKAFTC,EAAe,GAOtBC,GALgBF,EAKW,aALH,SAA6BG,GAEzD,OADAC,QAAQC,KAAK,aAAeL,EAAO,2EAC5B,oBAASG,KAIZG,EAAc,CAClBC,MAnBmB,aAoBnBN,gBAEIO,EAAYC,IACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGR,EACF,iBACD,OAAO,cAACK,EAAD,eAAeF,EAAiBH,EAAhC,CAAuCQ,WAAYA,EAAYC,QAAQ,cAM5E,cAACV,EAAD,CAAYW,MAAM,QAAQC,SAAS,qIACoBF,QAAQ,eAC/D,oBACE,GAAM,YADR,YAGA,8BAAW,4BAAYG,WAAW,KAAvB,iBAAX,kEACE,4BAAYA,WAAW,KAAvB,eADF,wJAGiB,4BAAYA,WAAW,KAAvB,aAHjB,OAG8E,4BAAYA,WAAW,KAAvB,eAH9E,aAGmJ,4BAAYA,WAAW,KAAvB,eAHnJ,oBAKA,cAAC,IAAD,CAAiBC,SAAUC,IAAWL,QAAQ,oBAC9C,8BAAW,4BAAYG,WAAW,KAAvB,iBAAX,mCAAwG,4BAAYA,WAAW,KAAvB,WAAxG,sFAC4D,4BAAYA,WAAW,KAAvB,iBAD5D,eAEO,4BAAYA,WAAW,KAAvB,OAFP,8DAGF,4BAAYA,WAAW,KAAvB,6BAHE,+GAKA,qaAMA,oBACE,GAAM,kBADR,kBAGA,kCAAe,4BAAYA,WAAW,KAAvB,YAAf,4FAEA,cAAC,IAAD,CAAiBC,SAAUE,IAAoBN,QAAQ,oBACvD,kCAAe,4BAAYG,WAAW,KAAvB,YAAf,mBAAuF,4BAAYA,WAAW,KAAvB,cAAvF,wCACA,cAAC,IAAD,CAAiBC,SAAUG,IAAcP,QAAQ,oBACjD,mEAAgD,4BAAYG,WAAW,KAAvB,WAAhD,KAAyG,4BAAYA,WAAW,KAAvB,YAAzG,QAAsK,4BAAYA,WAAW,KAAvB,YAAtK,sBACK,4BAAYA,WAAW,KAAvB,uBADL,2EAGA,mGACF,4BAAYA,WAAW,KAAvB,6BADE,yCAC6G,4BAAYA,WAAW,KAAvB,wBAD7G,yIAGuC,4BAAYA,WAAW,KAAvB,iBAHvC,8CAIQ,4BAAYA,WAAW,KAAvB,4BAJR,qDAKA,oBACE,GAAM,OADR,OAGA,cAAC,IAAD,CAAcK,SAAUjB,EAAMkB,KAAKC,KAAMV,QAAQ,iBACjD,cAAC,IAAD,CAAcQ,SAAUjB,EAAMkB,KAAKE,UAAWC,WAAYrB,EAAMkB,KAAKC,KAAMV,QAAQ,kBAMvFF,EAAWe,gBAAiB,G,mBC/F5BC,EAAOC,QAAU,07B,mBCAjBD,EAAOC,QAAU,grB,mBCAjBD,EAAOC,QAAU","file":"component---src-pages-forms-overview-mdx-939f5a589c92c264938a.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport DefaultLayout from \"/Users/kyletsang/Documents/Kyle/Code/react-bootstrap/www/src/layouts/ApiLayout.js\";\nimport { graphql } from 'gatsby';\nimport ComponentApi from '../../components/ComponentApi';\nimport ReactPlayground from '../../components/ReactPlayground';\nimport FormBasic from '../../examples/Form/Basic';\nimport FormDisabled from '../../examples/Form/FormDisabled';\nimport FormDisabledInputs from '../../examples/Form/FormDisabledInputs';\nexport const query = graphql`\n  query FormQuery {\n    Form: componentMetadata(displayName: { eq: \"Form\" }) {\n      ...ComponentApi_metadata\n    }\n    FormLabel: componentMetadata(displayName: { eq: \"FormLabel\" }) {\n      ...ComponentApi_metadata\n    }\n  }\n`;\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst PageHeader = makeShortcode(\"PageHeader\");\nconst layoutProps = {\n  query,\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n\n\n\n    <PageHeader title=\"Forms\" subTitle=\"Examples and usage guidelines for form control styles, layout options, and\n  custom components for creating a wide variety of forms.\" mdxType=\"PageHeader\" />\n    <h2 {...{\n      \"id\": \"overview\"\n    }}>{`Overview`}</h2>\n    <p>{`The `}<inlineCode parentName=\"p\">{`<FormControl>`}</inlineCode>{` component renders a form control with Bootstrap styling.\nThe `}<inlineCode parentName=\"p\">{`<FormGroup>`}</inlineCode>{` component wraps a form control with proper spacing, along\nwith support for a label, help text, and validation state. To ensure\naccessibility, set `}<inlineCode parentName=\"p\">{`controlId`}</inlineCode>{` on `}<inlineCode parentName=\"p\">{`<FormGroup>`}</inlineCode>{`, and use `}<inlineCode parentName=\"p\">{`<FormLabel>`}</inlineCode>{` for\nthe label.`}</p>\n    <ReactPlayground codeText={FormBasic} mdxType=\"ReactPlayground\" />\n    <p>{`The `}<inlineCode parentName=\"p\">{`<FormControl>`}</inlineCode>{` component directly renders the `}<inlineCode parentName=\"p\">{`<input>`}</inlineCode>{` or other specified\ncomponent. If you need to access the value of an uncontrolled `}<inlineCode parentName=\"p\">{`<FormControl>`}</inlineCode>{`,\nattach a `}<inlineCode parentName=\"p\">{`ref`}</inlineCode>{` to it as you would with an uncontrolled input, then call\n`}<inlineCode parentName=\"p\">{`ReactDOM.findDOMNode(ref)`}</inlineCode>{` to get the DOM node. You can then interact with that\nnode as you would with any other uncontrolled input.`}</p>\n    <p>{`If your application contains a large number of form groups, we recommend\nbuilding a higher-level component encapsulating a complete field group\nthat renders the label, the control, and any other necessary components.\nWe don't provide this out-of-the-box, because the composition of those\nfield groups is too specific to an individual application to admit a\ngood one-size-fits-all solution.`}</p>\n    <h2 {...{\n      \"id\": \"disabled-forms\"\n    }}>{`Disabled forms`}</h2>\n    <p>{`Add the `}<inlineCode parentName=\"p\">{`disabled`}</inlineCode>{` boolean attribute on an input to prevent user interactions and\nmake it appear lighter.`}</p>\n    <ReactPlayground codeText={FormDisabledInputs} mdxType=\"ReactPlayground\" />\n    <p>{`Add the `}<inlineCode parentName=\"p\">{`disabled`}</inlineCode>{` attribute to a `}<inlineCode parentName=\"p\">{`<fieldset>`}</inlineCode>{` to disable all the controls within.`}</p>\n    <ReactPlayground codeText={FormDisabled} mdxType=\"ReactPlayground\" />\n    <p>{`Browsers treat all native form controls (`}<inlineCode parentName=\"p\">{`<input>`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`<select>`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`<button>`}</inlineCode>{` elements)\ninside `}<inlineCode parentName=\"p\">{`<fieldset disabled>`}</inlineCode>{` as disabled, preventing both keyboard and mouse interactions\non them.`}</p>\n    <p>{`However, if your form also includes custom button-like elements such as\n`}<inlineCode parentName=\"p\">{`<a ... class=\"btn btn-*\">`}</inlineCode>{`, these will only be given a style of `}<inlineCode parentName=\"p\">{`pointer-events: none`}</inlineCode>{`,\nmeaning they are still focusable and operable using the keyboard. In this case, you must\nmanually modify these controls by adding `}<inlineCode parentName=\"p\">{`tabindex=\"-1\"`}</inlineCode>{` to prevent them from receiving\nfocus and `}<inlineCode parentName=\"p\">{`aria-disabled=\"disabled\"`}</inlineCode>{` to signal their state to assistive technologies.`}</p>\n    <h2 {...{\n      \"id\": \"api\"\n    }}>{`API`}</h2>\n    <ComponentApi metadata={props.data.Form} mdxType=\"ComponentApi\" />\n    <ComponentApi metadata={props.data.FormLabel} exportedBy={props.data.Form} mdxType=\"ComponentApi\" />\n\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      ","module.exports = \"import Button from 'react-bootstrap/Button';\\nimport Form from 'react-bootstrap/Form';\\n\\nfunction BasicExample() {\\n  return (\\n    <Form>\\n      <Form.Group className=\\\"mb-3\\\" controlId=\\\"formBasicEmail\\\">\\n        <Form.Label>Email address</Form.Label>\\n        <Form.Control type=\\\"email\\\" placeholder=\\\"Enter email\\\" />\\n        <Form.Text className=\\\"text-muted\\\">\\n          We'll never share your email with anyone else.\\n        </Form.Text>\\n      </Form.Group>\\n\\n      <Form.Group className=\\\"mb-3\\\" controlId=\\\"formBasicPassword\\\">\\n        <Form.Label>Password</Form.Label>\\n        <Form.Control type=\\\"password\\\" placeholder=\\\"Password\\\" />\\n      </Form.Group>\\n      <Form.Group className=\\\"mb-3\\\" controlId=\\\"formBasicCheckbox\\\">\\n        <Form.Check type=\\\"checkbox\\\" label=\\\"Check me out\\\" />\\n      </Form.Group>\\n      <Button variant=\\\"primary\\\" type=\\\"submit\\\">\\n        Submit\\n      </Button>\\n    </Form>\\n  );\\n}\\n\\nexport default BasicExample;\\n\"","module.exports = \"import Form from 'react-bootstrap/Form';\\n\\nfunction FormDisabledInputExample() {\\n  return (\\n    <>\\n      <Form.Group className=\\\"mb-3\\\">\\n        <Form.Label>Disabled input</Form.Label>\\n        <Form.Control placeholder=\\\"Disabled input\\\" disabled />\\n      </Form.Group>\\n      <Form.Group className=\\\"mb-3\\\">\\n        <Form.Label>Disabled select menu</Form.Label>\\n        <Form.Select disabled>\\n          <option>Disabled select</option>\\n        </Form.Select>\\n      </Form.Group>\\n      <Form.Group className=\\\"mb-3\\\">\\n        <Form.Check type=\\\"checkbox\\\" label=\\\"Can't check this\\\" disabled />\\n      </Form.Group>\\n    </>\\n  );\\n}\\n\\nexport default FormDisabledInputExample;\\n\"","module.exports = \"import Button from 'react-bootstrap/Button';\\nimport Form from 'react-bootstrap/Form';\\n\\nfunction FormDisabledExample() {\\n  return (\\n    <Form>\\n      <fieldset disabled>\\n        <Form.Group className=\\\"mb-3\\\">\\n          <Form.Label htmlFor=\\\"disabledTextInput\\\">Disabled input</Form.Label>\\n          <Form.Control id=\\\"disabledTextInput\\\" placeholder=\\\"Disabled input\\\" />\\n        </Form.Group>\\n        <Form.Group className=\\\"mb-3\\\">\\n          <Form.Label htmlFor=\\\"disabledSelect\\\">Disabled select menu</Form.Label>\\n          <Form.Select id=\\\"disabledSelect\\\">\\n            <option>Disabled select</option>\\n          </Form.Select>\\n        </Form.Group>\\n        <Form.Group className=\\\"mb-3\\\">\\n          <Form.Check\\n            type=\\\"checkbox\\\"\\n            id=\\\"disabledFieldsetCheck\\\"\\n            label=\\\"Can't check this\\\"\\n          />\\n        </Form.Group>\\n        <Button type=\\\"submit\\\">Submit</Button>\\n      </fieldset>\\n    </Form>\\n  );\\n}\\n\\nexport default FormDisabledExample;\\n\""],"sourceRoot":""}