(window.webpackJsonp=window.webpackJsonp||[]).push([[45],{"/GzF":function(n,e){n.exports='import Button from \'react-bootstrap/Button\';\nimport Col from \'react-bootstrap/Col\';\nimport Form from \'react-bootstrap/Form\';\nimport InputGroup from \'react-bootstrap/InputGroup\';\nimport Row from \'react-bootstrap/Row\';\n\nconst { Formik } = formik;\n\nconst schema = yup.object().shape({\n  firstName: yup.string().required(),\n  lastName: yup.string().required(),\n  username: yup.string().required(),\n  city: yup.string().required(),\n  state: yup.string().required(),\n  zip: yup.string().required(),\n  terms: yup.bool().required().oneOf([true], \'Terms must be accepted\'),\n});\n\nfunction FormExample() {\n  return (\n    <Formik\n      validationSchema={schema}\n      onSubmit={console.log}\n      initialValues={{\n        firstName: \'Mark\',\n        lastName: \'Otto\',\n        username: \'\',\n        city: \'\',\n        state: \'\',\n        zip: \'\',\n        terms: false,\n      }}\n    >\n      {({\n        handleSubmit,\n        handleChange,\n        handleBlur,\n        values,\n        touched,\n        isValid,\n        errors,\n      }) => (\n        <Form noValidate onSubmit={handleSubmit}>\n          <Row className="mb-3">\n            <Form.Group as={Col} md="4" controlId="validationFormik01">\n              <Form.Label>First name</Form.Label>\n              <Form.Control\n                type="text"\n                name="firstName"\n                value={values.firstName}\n                onChange={handleChange}\n                isValid={touched.firstName && !errors.firstName}\n              />\n              <Form.Control.Feedback>Looks good!</Form.Control.Feedback>\n            </Form.Group>\n            <Form.Group as={Col} md="4" controlId="validationFormik02">\n              <Form.Label>Last name</Form.Label>\n              <Form.Control\n                type="text"\n                name="lastName"\n                value={values.lastName}\n                onChange={handleChange}\n                isValid={touched.lastName && !errors.lastName}\n              />\n\n              <Form.Control.Feedback>Looks good!</Form.Control.Feedback>\n            </Form.Group>\n            <Form.Group as={Col} md="4" controlId="validationFormikUsername">\n              <Form.Label>Username</Form.Label>\n              <InputGroup hasValidation>\n                <InputGroup.Text id="inputGroupPrepend">@</InputGroup.Text>\n                <Form.Control\n                  type="text"\n                  placeholder="Username"\n                  aria-describedby="inputGroupPrepend"\n                  name="username"\n                  value={values.username}\n                  onChange={handleChange}\n                  isInvalid={!!errors.username}\n                />\n                <Form.Control.Feedback type="invalid">\n                  {errors.username}\n                </Form.Control.Feedback>\n              </InputGroup>\n            </Form.Group>\n          </Row>\n          <Row className="mb-3">\n            <Form.Group as={Col} md="6" controlId="validationFormik03">\n              <Form.Label>City</Form.Label>\n              <Form.Control\n                type="text"\n                placeholder="City"\n                name="city"\n                value={values.city}\n                onChange={handleChange}\n                isInvalid={!!errors.city}\n              />\n\n              <Form.Control.Feedback type="invalid">\n                {errors.city}\n              </Form.Control.Feedback>\n            </Form.Group>\n            <Form.Group as={Col} md="3" controlId="validationFormik04">\n              <Form.Label>State</Form.Label>\n              <Form.Control\n                type="text"\n                placeholder="State"\n                name="state"\n                value={values.state}\n                onChange={handleChange}\n                isInvalid={!!errors.state}\n              />\n              <Form.Control.Feedback type="invalid">\n                {errors.state}\n              </Form.Control.Feedback>\n            </Form.Group>\n            <Form.Group as={Col} md="3" controlId="validationFormik05">\n              <Form.Label>Zip</Form.Label>\n              <Form.Control\n                type="text"\n                placeholder="Zip"\n                name="zip"\n                value={values.zip}\n                onChange={handleChange}\n                isInvalid={!!errors.zip}\n              />\n\n              <Form.Control.Feedback type="invalid">\n                {errors.zip}\n              </Form.Control.Feedback>\n            </Form.Group>\n          </Row>\n          <Form.Group className="mb-3">\n            <Form.Check\n              required\n              name="terms"\n              label="Agree to terms and conditions"\n              onChange={handleChange}\n              isInvalid={!!errors.terms}\n              feedback={errors.terms}\n              feedbackType="invalid"\n              id="validationFormik0"\n            />\n          </Form.Group>\n          <Button type="submit">Submit form</Button>\n        </Form>\n      )}\n    </Formik>\n  );\n}\n\nrender(<FormExample />);\n'},"0Cdi":function(n,e){n.exports='import Button from \'react-bootstrap/Button\';\nimport Col from \'react-bootstrap/Col\';\nimport Form from \'react-bootstrap/Form\';\nimport InputGroup from \'react-bootstrap/InputGroup\';\nimport Row from \'react-bootstrap/Row\';\n\nconst { Formik } = formik;\n\nconst schema = yup.object().shape({\n  firstName: yup.string().required(),\n  lastName: yup.string().required(),\n  username: yup.string().required(),\n  city: yup.string().required(),\n  state: yup.string().required(),\n  zip: yup.string().required(),\n  file: yup.mixed().required(),\n  terms: yup.bool().required().oneOf([true], \'terms must be accepted\'),\n});\n\nfunction FormExample() {\n  return (\n    <Formik\n      validationSchema={schema}\n      onSubmit={console.log}\n      initialValues={{\n        firstName: \'Mark\',\n        lastName: \'Otto\',\n        username: \'\',\n        city: \'\',\n        state: \'\',\n        zip: \'\',\n        file: null,\n        terms: false,\n      }}\n    >\n      {({\n        handleSubmit,\n        handleChange,\n        handleBlur,\n        values,\n        touched,\n        isValid,\n        errors,\n      }) => (\n        <Form noValidate onSubmit={handleSubmit}>\n          <Row className="mb-3">\n            <Form.Group\n              as={Col}\n              md="4"\n              controlId="validationFormik101"\n              className="position-relative"\n            >\n              <Form.Label>First name</Form.Label>\n              <Form.Control\n                type="text"\n                name="firstName"\n                value={values.firstName}\n                onChange={handleChange}\n                isValid={touched.firstName && !errors.firstName}\n              />\n              <Form.Control.Feedback tooltip>Looks good!</Form.Control.Feedback>\n            </Form.Group>\n            <Form.Group\n              as={Col}\n              md="4"\n              controlId="validationFormik102"\n              className="position-relative"\n            >\n              <Form.Label>Last name</Form.Label>\n              <Form.Control\n                type="text"\n                name="lastName"\n                value={values.lastName}\n                onChange={handleChange}\n                isValid={touched.lastName && !errors.lastName}\n              />\n\n              <Form.Control.Feedback tooltip>Looks good!</Form.Control.Feedback>\n            </Form.Group>\n            <Form.Group as={Col} md="4" controlId="validationFormikUsername2">\n              <Form.Label>Username</Form.Label>\n              <InputGroup hasValidation>\n                <InputGroup.Text id="inputGroupPrepend">@</InputGroup.Text>\n                <Form.Control\n                  type="text"\n                  placeholder="Username"\n                  aria-describedby="inputGroupPrepend"\n                  name="username"\n                  value={values.username}\n                  onChange={handleChange}\n                  isInvalid={!!errors.username}\n                />\n                <Form.Control.Feedback type="invalid" tooltip>\n                  {errors.username}\n                </Form.Control.Feedback>\n              </InputGroup>\n            </Form.Group>\n          </Row>\n          <Row className="mb-3">\n            <Form.Group\n              as={Col}\n              md="6"\n              controlId="validationFormik103"\n              className="position-relative"\n            >\n              <Form.Label>City</Form.Label>\n              <Form.Control\n                type="text"\n                placeholder="City"\n                name="city"\n                value={values.city}\n                onChange={handleChange}\n                isInvalid={!!errors.city}\n              />\n\n              <Form.Control.Feedback type="invalid" tooltip>\n                {errors.city}\n              </Form.Control.Feedback>\n            </Form.Group>\n            <Form.Group\n              as={Col}\n              md="3"\n              controlId="validationFormik104"\n              className="position-relative"\n            >\n              <Form.Label>State</Form.Label>\n              <Form.Control\n                type="text"\n                placeholder="State"\n                name="state"\n                value={values.state}\n                onChange={handleChange}\n                isInvalid={!!errors.state}\n              />\n              <Form.Control.Feedback type="invalid" tooltip>\n                {errors.state}\n              </Form.Control.Feedback>\n            </Form.Group>\n            <Form.Group\n              as={Col}\n              md="3"\n              controlId="validationFormik105"\n              className="position-relative"\n            >\n              <Form.Label>Zip</Form.Label>\n              <Form.Control\n                type="text"\n                placeholder="Zip"\n                name="zip"\n                value={values.zip}\n                onChange={handleChange}\n                isInvalid={!!errors.zip}\n              />\n\n              <Form.Control.Feedback type="invalid" tooltip>\n                {errors.zip}\n              </Form.Control.Feedback>\n            </Form.Group>\n          </Row>\n          <Form.Group className="position-relative mb-3">\n            <Form.Label>File</Form.Label>\n            <Form.Control\n              type="file"\n              required\n              name="file"\n              onChange={handleChange}\n              isInvalid={!!errors.file}\n            />\n            <Form.Control.Feedback type="invalid" tooltip>\n              {errors.file}\n            </Form.Control.Feedback>\n          </Form.Group>\n          <Form.Group className="position-relative mb-3">\n            <Form.Check\n              required\n              name="terms"\n              label="Agree to terms and conditions"\n              onChange={handleChange}\n              isInvalid={!!errors.terms}\n              feedback={errors.terms}\n              feedbackType="invalid"\n              id="validationFormik106"\n              feedbackTooltip\n            />\n          </Form.Group>\n          <Button type="submit">Submit form</Button>\n        </Form>\n      )}\n    </Formik>\n  );\n}\n\nrender(<FormExample />);\n'},"6Kon":function(n,e){n.exports="import Form from 'react-bootstrap/Form';\nimport InputGroup from 'react-bootstrap/InputGroup';\n\nfunction ValidationInputGroupExample() {\n  return (\n    <InputGroup hasValidation>\n      <InputGroup.Text>@</InputGroup.Text>\n      <Form.Control type=\"text\" required isInvalid />\n      <Form.Control.Feedback type=\"invalid\">\n        Please choose a username.\n      </Form.Control.Feedback>\n    </InputGroup>\n  );\n}\n\nexport default ValidationInputGroupExample;\n"},"7Yuw":function(n,e){n.exports='import React, { useState } from \'react\';\nimport Button from \'react-bootstrap/Button\';\nimport Col from \'react-bootstrap/Col\';\nimport Form from \'react-bootstrap/Form\';\nimport InputGroup from \'react-bootstrap/InputGroup\';\nimport Row from \'react-bootstrap/Row\';\n\nfunction FormExample() {\n  const [validated, setValidated] = useState(false);\n\n  const handleSubmit = (event) => {\n    const form = event.currentTarget;\n    if (form.checkValidity() === false) {\n      event.preventDefault();\n      event.stopPropagation();\n    }\n\n    setValidated(true);\n  };\n\n  return (\n    <Form noValidate validated={validated} onSubmit={handleSubmit}>\n      <Row className="mb-3">\n        <Form.Group as={Col} md="4" controlId="validationCustom01">\n          <Form.Label>First name</Form.Label>\n          <Form.Control\n            required\n            type="text"\n            placeholder="First name"\n            defaultValue="Mark"\n          />\n          <Form.Control.Feedback>Looks good!</Form.Control.Feedback>\n        </Form.Group>\n        <Form.Group as={Col} md="4" controlId="validationCustom02">\n          <Form.Label>Last name</Form.Label>\n          <Form.Control\n            required\n            type="text"\n            placeholder="Last name"\n            defaultValue="Otto"\n          />\n          <Form.Control.Feedback>Looks good!</Form.Control.Feedback>\n        </Form.Group>\n        <Form.Group as={Col} md="4" controlId="validationCustomUsername">\n          <Form.Label>Username</Form.Label>\n          <InputGroup hasValidation>\n            <InputGroup.Text id="inputGroupPrepend">@</InputGroup.Text>\n            <Form.Control\n              type="text"\n              placeholder="Username"\n              aria-describedby="inputGroupPrepend"\n              required\n            />\n            <Form.Control.Feedback type="invalid">\n              Please choose a username.\n            </Form.Control.Feedback>\n          </InputGroup>\n        </Form.Group>\n      </Row>\n      <Row className="mb-3">\n        <Form.Group as={Col} md="6" controlId="validationCustom03">\n          <Form.Label>City</Form.Label>\n          <Form.Control type="text" placeholder="City" required />\n          <Form.Control.Feedback type="invalid">\n            Please provide a valid city.\n          </Form.Control.Feedback>\n        </Form.Group>\n        <Form.Group as={Col} md="3" controlId="validationCustom04">\n          <Form.Label>State</Form.Label>\n          <Form.Control type="text" placeholder="State" required />\n          <Form.Control.Feedback type="invalid">\n            Please provide a valid state.\n          </Form.Control.Feedback>\n        </Form.Group>\n        <Form.Group as={Col} md="3" controlId="validationCustom05">\n          <Form.Label>Zip</Form.Label>\n          <Form.Control type="text" placeholder="Zip" required />\n          <Form.Control.Feedback type="invalid">\n            Please provide a valid zip.\n          </Form.Control.Feedback>\n        </Form.Group>\n      </Row>\n      <Form.Group className="mb-3">\n        <Form.Check\n          required\n          label="Agree to terms and conditions"\n          feedback="You must agree before submitting."\n          feedbackType="invalid"\n        />\n      </Form.Group>\n      <Button type="submit">Submit form</Button>\n    </Form>\n  );\n}\n\nrender(<FormExample />);\n'},"9j97":function(n,e,o){"use strict";o.r(e),o.d(e,"_frontmatter",(function(){return f})),o.d(e,"default",(function(){return g}));var r,t=o("wx14"),a=o("zLVn"),l=(o("mXGw"),o("7ljp")),i=o("Snbm"),m=o("h55t"),d=o("vXRK"),s=o("1u5/"),p=o("/GzF"),u=o.n(p),c=o("6Kon"),F=o.n(c),b=o("7Yuw"),C=o.n(b),h=o("0Cdi"),v=o.n(h),y=["components"],f={},x=(r="PageHeader",function(n){return console.warn("Component "+r+" was not imported, exported, or provided by MDXProvider as global scope"),Object(l.mdx)("div",n)}),k={query:"1464975548",_frontmatter:f},G=i.a;function g(n){var e=n.components,o=Object(a.a)(n,y);return Object(l.mdx)(G,Object(t.a)({},k,o,{components:e,mdxType:"MDXLayout"}),Object(l.mdx)(x,{title:"Validation",subTitle:"Provide valuable, actionable feedback to your users with HTML5 form validation, via browser default behaviors or custom styles and JavaScript.",mdxType:"PageHeader"}),Object(l.mdx)("h2",{id:"native-html5-form-validation"},"Native HTML5 form validation"),Object(l.mdx)("p",null,"For native HTML form validation–",Object(l.mdx)("a",{parentName:"p",href:"https://caniuse.com/#feat=form-validation"},"available in all our supported browsers"),",\nthe ",Object(l.mdx)("inlineCode",{parentName:"p"},":valid")," and ",Object(l.mdx)("inlineCode",{parentName:"p"},":invalid")," pseudo selectors are used to apply validation\nstyles as well as display feedback messages."),Object(l.mdx)("p",null,"Bootstrap scopes the ",Object(l.mdx)("inlineCode",{parentName:"p"},":valid")," and ",Object(l.mdx)("inlineCode",{parentName:"p"},":invalid")," styles to parent ",Object(l.mdx)("inlineCode",{parentName:"p"},".was-validated"),"\nclass, usually applied to the ",Object(l.mdx)("inlineCode",{parentName:"p"},"<Form>")," (you can use the ",Object(l.mdx)("inlineCode",{parentName:"p"},"validated")," prop\nas a shortcut). Otherwise, any required field without a value shows up\nas invalid on page load. This way, you may choose when to activate them\n(typically after form submission is attempted)."),Object(l.mdx)(m.a,{mdxType:"Callout"},"Watch out! Browsers provide their own validation UI by default on"," ",Object(l.mdx)("code",null,"form"),"s. You can disable the default UI by adding the HTML"," ",Object(l.mdx)("code",null,"noValidate")," attribute to your ",Object(l.mdx)("code",null,"<Form>")," or"," ",Object(l.mdx)("code",null,"<form>")," element."),Object(l.mdx)(s.a,{codeText:C.a,mdxType:"ReactPlayground"}),Object(l.mdx)("h2",{id:"form-libraries-and-server-rendered-styles"},"Form libraries and server-rendered styles"),Object(l.mdx)("p",null,"It's often beneficial (especially in React) to handle form validation\nvia a library like Formik, or react-formal. In those cases, ",Object(l.mdx)("inlineCode",{parentName:"p"},"isValid"),"\nand ",Object(l.mdx)("inlineCode",{parentName:"p"},"isInvalid")," props can be added to form controls to manually apply\nvalidation styles. Below is a quick example integrating with\n",Object(l.mdx)("a",{parentName:"p",href:"https://github.com/jaredpalmer/formik"},"Formik"),"."),Object(l.mdx)(s.a,{codeText:u.a,mdxType:"ReactPlayground"}),Object(l.mdx)("h2",{id:"tooltips"},"Tooltips"),Object(l.mdx)("p",null,"If your form layout allows it, you can use the ",Object(l.mdx)("inlineCode",{parentName:"p"},"tooltip")," prop to display\nvalidation feedback in a styled tooltip. Be sure to have a parent with\n",Object(l.mdx)("inlineCode",{parentName:"p"},"position: relative")," on it for tooltip positioning. In the example below,\nour column classes have this already, but your project may require an\nalternative setup."),Object(l.mdx)(s.a,{codeText:v.a,mdxType:"ReactPlayground"}),Object(l.mdx)("h2",{id:"input-group-validation"},"Input group validation"),Object(l.mdx)("p",null,"To properly show rounded corners in an ",Object(l.mdx)("inlineCode",{parentName:"p"},"<InputGroup>")," with validation,\nthe ",Object(l.mdx)("inlineCode",{parentName:"p"},"<InputGroup>")," requires the ",Object(l.mdx)("inlineCode",{parentName:"p"},"hasValidation")," prop."),Object(l.mdx)(s.a,{codeText:F.a,mdxType:"ReactPlayground"}),Object(l.mdx)("h2",{id:"api"},"API"),Object(l.mdx)(d.a,{metadata:o.data.Feedback,exportedBy:o.data.FormControl,mdxType:"ComponentApi"}))}g.isMDXComponent=!0},Q6D8:function(n,e,o){n.exports={callout:"Callout-styles-module--callout--1_K3h",warning:"Callout-styles-module--warning--39Zw- Callout-styles-module--callout--1_K3h",danger:"Callout-styles-module--danger--19388 Callout-styles-module--callout--1_K3h"}},h55t:function(n,e,o){"use strict";var r=o("oYCi"),t=o("Q6D8");e.a=function(n){var e=n.title,o=n.children,a=n.theme;return Object(r.jsxs)("aside",{role:"note",className:t[a||"warning"],children:[e&&Object(r.jsx)("header",{className:"h5",children:e}),Object(r.jsx)("div",{children:o})]})}}}]);
//# sourceMappingURL=component---src-pages-forms-validation-mdx-089a1dcb2752d16022d6.js.map