{"version":3,"sources":["webpack:///./src/examples/Form/ValidationFormik.js","webpack:///./src/examples/Form/ValidationTooltips.js","webpack:///./src/examples/Form/ValidationInputGroup.js","webpack:///./src/examples/Form/ValidationNative.js","webpack:///./src/pages/forms/validation.mdx","webpack:///./src/components/Callout-styles.module.scss","webpack:///./src/components/Callout.js"],"names":["module","exports","name","_frontmatter","PageHeader","props","console","warn","layoutProps","query","MDXLayout","DefaultLayout","MDXContent","components","mdxType","title","subTitle","parentName","codeText","ValidationNative","ValidationFormik","ValidationTooltips","ValidationInputGroup","metadata","data","Feedback","exportedBy","FormControl","isMDXComponent","require"],"mappings":"+EAAAA,EAAOC,QAAU,qhK,qBCAjBD,EAAOC,QAAU,moM,qBCAjBD,EAAOC,QAAU,+d,qBCAjBD,EAAOC,QAAU,01G,oIC4BKC,E,qMAFTC,EAAe,GAOtBC,GALgBF,EAKW,aALH,SAA6BG,GAEzD,OADAC,QAAQC,KAAK,aAAeL,EAAO,2EAC5B,oBAASG,KAIZG,EAAc,CAClBC,MAnBmB,aAoBnBN,gBAEIO,EAAYC,IACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGR,EACF,iBACD,OAAO,cAACK,EAAD,eAAeF,EAAiBH,EAAhC,CAAuCQ,WAAYA,EAAYC,QAAQ,cAM5E,cAACV,EAAD,CAAYW,MAAM,aAAaC,SAAS,iJACkCF,QAAQ,eAClF,oBACE,GAAM,gCADR,gCAGA,0DAAuC,mBAAGG,WAAW,IACjD,KAAQ,6CAD2B,2CAAvC,UAGE,4BAAYA,WAAW,KAAvB,UAHF,QAG6D,4BAAYA,WAAW,KAAvB,YAH7D,gGAKA,+CAA4B,4BAAYA,WAAW,KAAvB,UAA5B,QAAuF,4BAAYA,WAAW,KAAvB,YAAvF,qBAAiK,4BAAYA,WAAW,KAAvB,kBAAjK,mCAC4B,4BAAYA,WAAW,KAAvB,UAD5B,qBACoG,4BAAYA,WAAW,KAAvB,aADpG,2MAKA,cAAC,IAAD,CAASH,QAAQ,WAAjB,oEACgE,IAClE,kCAFE,uDAEoE,IACtE,wCAHE,sBAGwC,0BAAO,UAH/C,MAGmE,IACrE,0BAAO,UAJL,aAMA,cAAC,IAAD,CAAiBI,SAAUC,IAAkBL,QAAQ,oBACrD,oBACE,GAAM,6CADR,6CAGA,6JAC0D,4BAAYG,WAAW,KAAvB,WAD1D,SAEE,4BAAYA,WAAW,KAAvB,aAFF,yHAIF,mBAAGA,WAAW,IACR,KAAQ,yCADd,UAJE,KAOA,cAAC,IAAD,CAAiBC,SAAUE,IAAkBN,QAAQ,oBACrD,oBACE,GAAM,YADR,YAGA,yEAAsD,4BAAYG,WAAW,KAAvB,WAAtD,6FAEF,4BAAYA,WAAW,KAAvB,sBAFE,oJAKA,cAAC,IAAD,CAAiBC,SAAUG,IAAoBP,QAAQ,oBACvD,oBACE,GAAM,0BADR,0BAGA,iEAA8C,4BAAYG,WAAW,KAAvB,gBAA9C,0BACE,4BAAYA,WAAW,KAAvB,gBADF,iBAC4E,4BAAYA,WAAW,KAAvB,iBAD5E,UAEA,cAAC,IAAD,CAAiBC,SAAUI,IAAsBR,QAAQ,oBACzD,oBACE,GAAM,OADR,OAGA,cAAC,IAAD,CAAcS,SAAUlB,EAAMmB,KAAKC,SAAUC,WAAYrB,EAAMmB,KAAKG,YAAab,QAAQ,kBAM7FF,EAAWgB,gBAAiB,G,qBCzG5B5B,EAAOC,QAAU,CAAC,QAAU,wCAAwC,QAAU,8EAA8E,OAAS,+E,kDCGrK,EAAe4B,UAuCA,IAXf,SAAiB,GAAjB,qCACA,OACA,wEACAd,uDACA","file":"component---src-pages-forms-validation-mdx-cd8232ebdfabd4e112ab.js","sourcesContent":["module.exports = \"import Button from 'react-bootstrap/Button';\\nimport Col from 'react-bootstrap/Col';\\nimport Form from 'react-bootstrap/Form';\\nimport InputGroup from 'react-bootstrap/InputGroup';\\nimport Row from 'react-bootstrap/Row';\\n\\nconst { Formik } = formik;\\n\\nconst schema = yup.object().shape({\\n  firstName: yup.string().required(),\\n  lastName: yup.string().required(),\\n  username: yup.string().required(),\\n  city: yup.string().required(),\\n  state: yup.string().required(),\\n  zip: yup.string().required(),\\n  terms: yup.bool().required().oneOf([true], 'Terms must be accepted'),\\n});\\n\\nfunction FormExample() {\\n  return (\\n    <Formik\\n      validationSchema={schema}\\n      onSubmit={console.log}\\n      initialValues={{\\n        firstName: 'Mark',\\n        lastName: 'Otto',\\n        username: '',\\n        city: '',\\n        state: '',\\n        zip: '',\\n        terms: false,\\n      }}\\n    >\\n      {({\\n        handleSubmit,\\n        handleChange,\\n        handleBlur,\\n        values,\\n        touched,\\n        isValid,\\n        errors,\\n      }) => (\\n        <Form noValidate onSubmit={handleSubmit}>\\n          <Row className=\\\"mb-3\\\">\\n            <Form.Group as={Col} md=\\\"4\\\" controlId=\\\"validationFormik01\\\">\\n              <Form.Label>First name</Form.Label>\\n              <Form.Control\\n                type=\\\"text\\\"\\n                name=\\\"firstName\\\"\\n                value={values.firstName}\\n                onChange={handleChange}\\n                isValid={touched.firstName && !errors.firstName}\\n              />\\n              <Form.Control.Feedback>Looks good!</Form.Control.Feedback>\\n            </Form.Group>\\n            <Form.Group as={Col} md=\\\"4\\\" controlId=\\\"validationFormik02\\\">\\n              <Form.Label>Last name</Form.Label>\\n              <Form.Control\\n                type=\\\"text\\\"\\n                name=\\\"lastName\\\"\\n                value={values.lastName}\\n                onChange={handleChange}\\n                isValid={touched.lastName && !errors.lastName}\\n              />\\n\\n              <Form.Control.Feedback>Looks good!</Form.Control.Feedback>\\n            </Form.Group>\\n            <Form.Group as={Col} md=\\\"4\\\" controlId=\\\"validationFormikUsername\\\">\\n              <Form.Label>Username</Form.Label>\\n              <InputGroup hasValidation>\\n                <InputGroup.Text id=\\\"inputGroupPrepend\\\">@</InputGroup.Text>\\n                <Form.Control\\n                  type=\\\"text\\\"\\n                  placeholder=\\\"Username\\\"\\n                  aria-describedby=\\\"inputGroupPrepend\\\"\\n                  name=\\\"username\\\"\\n                  value={values.username}\\n                  onChange={handleChange}\\n                  isInvalid={!!errors.username}\\n                />\\n                <Form.Control.Feedback type=\\\"invalid\\\">\\n                  {errors.username}\\n                </Form.Control.Feedback>\\n              </InputGroup>\\n            </Form.Group>\\n          </Row>\\n          <Row className=\\\"mb-3\\\">\\n            <Form.Group as={Col} md=\\\"6\\\" controlId=\\\"validationFormik03\\\">\\n              <Form.Label>City</Form.Label>\\n              <Form.Control\\n                type=\\\"text\\\"\\n                placeholder=\\\"City\\\"\\n                name=\\\"city\\\"\\n                value={values.city}\\n                onChange={handleChange}\\n                isInvalid={!!errors.city}\\n              />\\n\\n              <Form.Control.Feedback type=\\\"invalid\\\">\\n                {errors.city}\\n              </Form.Control.Feedback>\\n            </Form.Group>\\n            <Form.Group as={Col} md=\\\"3\\\" controlId=\\\"validationFormik04\\\">\\n              <Form.Label>State</Form.Label>\\n              <Form.Control\\n                type=\\\"text\\\"\\n                placeholder=\\\"State\\\"\\n                name=\\\"state\\\"\\n                value={values.state}\\n                onChange={handleChange}\\n                isInvalid={!!errors.state}\\n              />\\n              <Form.Control.Feedback type=\\\"invalid\\\">\\n                {errors.state}\\n              </Form.Control.Feedback>\\n            </Form.Group>\\n            <Form.Group as={Col} md=\\\"3\\\" controlId=\\\"validationFormik05\\\">\\n              <Form.Label>Zip</Form.Label>\\n              <Form.Control\\n                type=\\\"text\\\"\\n                placeholder=\\\"Zip\\\"\\n                name=\\\"zip\\\"\\n                value={values.zip}\\n                onChange={handleChange}\\n                isInvalid={!!errors.zip}\\n              />\\n\\n              <Form.Control.Feedback type=\\\"invalid\\\">\\n                {errors.zip}\\n              </Form.Control.Feedback>\\n            </Form.Group>\\n          </Row>\\n          <Form.Group className=\\\"mb-3\\\">\\n            <Form.Check\\n              required\\n              name=\\\"terms\\\"\\n              label=\\\"Agree to terms and conditions\\\"\\n              onChange={handleChange}\\n              isInvalid={!!errors.terms}\\n              feedback={errors.terms}\\n              feedbackType=\\\"invalid\\\"\\n              id=\\\"validationFormik0\\\"\\n            />\\n          </Form.Group>\\n          <Button type=\\\"submit\\\">Submit form</Button>\\n        </Form>\\n      )}\\n    </Formik>\\n  );\\n}\\n\\nrender(<FormExample />);\\n\"","module.exports = \"import Button from 'react-bootstrap/Button';\\nimport Col from 'react-bootstrap/Col';\\nimport Form from 'react-bootstrap/Form';\\nimport InputGroup from 'react-bootstrap/InputGroup';\\nimport Row from 'react-bootstrap/Row';\\n\\nconst { Formik } = formik;\\n\\nconst schema = yup.object().shape({\\n  firstName: yup.string().required(),\\n  lastName: yup.string().required(),\\n  username: yup.string().required(),\\n  city: yup.string().required(),\\n  state: yup.string().required(),\\n  zip: yup.string().required(),\\n  file: yup.mixed().required(),\\n  terms: yup.bool().required().oneOf([true], 'terms must be accepted'),\\n});\\n\\nfunction FormExample() {\\n  return (\\n    <Formik\\n      validationSchema={schema}\\n      onSubmit={console.log}\\n      initialValues={{\\n        firstName: 'Mark',\\n        lastName: 'Otto',\\n        username: '',\\n        city: '',\\n        state: '',\\n        zip: '',\\n        file: null,\\n        terms: false,\\n      }}\\n    >\\n      {({\\n        handleSubmit,\\n        handleChange,\\n        handleBlur,\\n        values,\\n        touched,\\n        isValid,\\n        errors,\\n      }) => (\\n        <Form noValidate onSubmit={handleSubmit}>\\n          <Row className=\\\"mb-3\\\">\\n            <Form.Group\\n              as={Col}\\n              md=\\\"4\\\"\\n              controlId=\\\"validationFormik101\\\"\\n              className=\\\"position-relative\\\"\\n            >\\n              <Form.Label>First name</Form.Label>\\n              <Form.Control\\n                type=\\\"text\\\"\\n                name=\\\"firstName\\\"\\n                value={values.firstName}\\n                onChange={handleChange}\\n                isValid={touched.firstName && !errors.firstName}\\n              />\\n              <Form.Control.Feedback tooltip>Looks good!</Form.Control.Feedback>\\n            </Form.Group>\\n            <Form.Group\\n              as={Col}\\n              md=\\\"4\\\"\\n              controlId=\\\"validationFormik102\\\"\\n              className=\\\"position-relative\\\"\\n            >\\n              <Form.Label>Last name</Form.Label>\\n              <Form.Control\\n                type=\\\"text\\\"\\n                name=\\\"lastName\\\"\\n                value={values.lastName}\\n                onChange={handleChange}\\n                isValid={touched.lastName && !errors.lastName}\\n              />\\n\\n              <Form.Control.Feedback tooltip>Looks good!</Form.Control.Feedback>\\n            </Form.Group>\\n            <Form.Group as={Col} md=\\\"4\\\" controlId=\\\"validationFormikUsername2\\\">\\n              <Form.Label>Username</Form.Label>\\n              <InputGroup hasValidation>\\n                <InputGroup.Text id=\\\"inputGroupPrepend\\\">@</InputGroup.Text>\\n                <Form.Control\\n                  type=\\\"text\\\"\\n                  placeholder=\\\"Username\\\"\\n                  aria-describedby=\\\"inputGroupPrepend\\\"\\n                  name=\\\"username\\\"\\n                  value={values.username}\\n                  onChange={handleChange}\\n                  isInvalid={!!errors.username}\\n                />\\n                <Form.Control.Feedback type=\\\"invalid\\\" tooltip>\\n                  {errors.username}\\n                </Form.Control.Feedback>\\n              </InputGroup>\\n            </Form.Group>\\n          </Row>\\n          <Row className=\\\"mb-3\\\">\\n            <Form.Group\\n              as={Col}\\n              md=\\\"6\\\"\\n              controlId=\\\"validationFormik103\\\"\\n              className=\\\"position-relative\\\"\\n            >\\n              <Form.Label>City</Form.Label>\\n              <Form.Control\\n                type=\\\"text\\\"\\n                placeholder=\\\"City\\\"\\n                name=\\\"city\\\"\\n                value={values.city}\\n                onChange={handleChange}\\n                isInvalid={!!errors.city}\\n              />\\n\\n              <Form.Control.Feedback type=\\\"invalid\\\" tooltip>\\n                {errors.city}\\n              </Form.Control.Feedback>\\n            </Form.Group>\\n            <Form.Group\\n              as={Col}\\n              md=\\\"3\\\"\\n              controlId=\\\"validationFormik104\\\"\\n              className=\\\"position-relative\\\"\\n            >\\n              <Form.Label>State</Form.Label>\\n              <Form.Control\\n                type=\\\"text\\\"\\n                placeholder=\\\"State\\\"\\n                name=\\\"state\\\"\\n                value={values.state}\\n                onChange={handleChange}\\n                isInvalid={!!errors.state}\\n              />\\n              <Form.Control.Feedback type=\\\"invalid\\\" tooltip>\\n                {errors.state}\\n              </Form.Control.Feedback>\\n            </Form.Group>\\n            <Form.Group\\n              as={Col}\\n              md=\\\"3\\\"\\n              controlId=\\\"validationFormik105\\\"\\n              className=\\\"position-relative\\\"\\n            >\\n              <Form.Label>Zip</Form.Label>\\n              <Form.Control\\n                type=\\\"text\\\"\\n                placeholder=\\\"Zip\\\"\\n                name=\\\"zip\\\"\\n                value={values.zip}\\n                onChange={handleChange}\\n                isInvalid={!!errors.zip}\\n              />\\n\\n              <Form.Control.Feedback type=\\\"invalid\\\" tooltip>\\n                {errors.zip}\\n              </Form.Control.Feedback>\\n            </Form.Group>\\n          </Row>\\n          <Form.Group className=\\\"position-relative mb-3\\\">\\n            <Form.Label>File</Form.Label>\\n            <Form.Control\\n              type=\\\"file\\\"\\n              required\\n              name=\\\"file\\\"\\n              onChange={handleChange}\\n              isInvalid={!!errors.file}\\n            />\\n            <Form.Control.Feedback type=\\\"invalid\\\" tooltip>\\n              {errors.file}\\n            </Form.Control.Feedback>\\n          </Form.Group>\\n          <Form.Group className=\\\"position-relative mb-3\\\">\\n            <Form.Check\\n              required\\n              name=\\\"terms\\\"\\n              label=\\\"Agree to terms and conditions\\\"\\n              onChange={handleChange}\\n              isInvalid={!!errors.terms}\\n              feedback={errors.terms}\\n              feedbackType=\\\"invalid\\\"\\n              id=\\\"validationFormik106\\\"\\n              feedbackTooltip\\n            />\\n          </Form.Group>\\n          <Button type=\\\"submit\\\">Submit form</Button>\\n        </Form>\\n      )}\\n    </Formik>\\n  );\\n}\\n\\nrender(<FormExample />);\\n\"","module.exports = \"import Form from 'react-bootstrap/Form';\\nimport InputGroup from 'react-bootstrap/InputGroup';\\n\\nfunction ValidationInputGroupExample() {\\n  return (\\n    <InputGroup hasValidation>\\n      <InputGroup.Text>@</InputGroup.Text>\\n      <Form.Control type=\\\"text\\\" required isInvalid />\\n      <Form.Control.Feedback type=\\\"invalid\\\">\\n        Please choose a username.\\n      </Form.Control.Feedback>\\n    </InputGroup>\\n  );\\n}\\n\\nexport default ValidationInputGroupExample;\\n\"","module.exports = \"import React, { useState } from 'react';\\nimport Button from 'react-bootstrap/Button';\\nimport Col from 'react-bootstrap/Col';\\nimport Form from 'react-bootstrap/Form';\\nimport InputGroup from 'react-bootstrap/InputGroup';\\nimport Row from 'react-bootstrap/Row';\\n\\nfunction FormExample() {\\n  const [validated, setValidated] = useState(false);\\n\\n  const handleSubmit = (event) => {\\n    const form = event.currentTarget;\\n    if (form.checkValidity() === false) {\\n      event.preventDefault();\\n      event.stopPropagation();\\n    }\\n\\n    setValidated(true);\\n  };\\n\\n  return (\\n    <Form noValidate validated={validated} onSubmit={handleSubmit}>\\n      <Row className=\\\"mb-3\\\">\\n        <Form.Group as={Col} md=\\\"4\\\" controlId=\\\"validationCustom01\\\">\\n          <Form.Label>First name</Form.Label>\\n          <Form.Control\\n            required\\n            type=\\\"text\\\"\\n            placeholder=\\\"First name\\\"\\n            defaultValue=\\\"Mark\\\"\\n          />\\n          <Form.Control.Feedback>Looks good!</Form.Control.Feedback>\\n        </Form.Group>\\n        <Form.Group as={Col} md=\\\"4\\\" controlId=\\\"validationCustom02\\\">\\n          <Form.Label>Last name</Form.Label>\\n          <Form.Control\\n            required\\n            type=\\\"text\\\"\\n            placeholder=\\\"Last name\\\"\\n            defaultValue=\\\"Otto\\\"\\n          />\\n          <Form.Control.Feedback>Looks good!</Form.Control.Feedback>\\n        </Form.Group>\\n        <Form.Group as={Col} md=\\\"4\\\" controlId=\\\"validationCustomUsername\\\">\\n          <Form.Label>Username</Form.Label>\\n          <InputGroup hasValidation>\\n            <InputGroup.Text id=\\\"inputGroupPrepend\\\">@</InputGroup.Text>\\n            <Form.Control\\n              type=\\\"text\\\"\\n              placeholder=\\\"Username\\\"\\n              aria-describedby=\\\"inputGroupPrepend\\\"\\n              required\\n            />\\n            <Form.Control.Feedback type=\\\"invalid\\\">\\n              Please choose a username.\\n            </Form.Control.Feedback>\\n          </InputGroup>\\n        </Form.Group>\\n      </Row>\\n      <Row className=\\\"mb-3\\\">\\n        <Form.Group as={Col} md=\\\"6\\\" controlId=\\\"validationCustom03\\\">\\n          <Form.Label>City</Form.Label>\\n          <Form.Control type=\\\"text\\\" placeholder=\\\"City\\\" required />\\n          <Form.Control.Feedback type=\\\"invalid\\\">\\n            Please provide a valid city.\\n          </Form.Control.Feedback>\\n        </Form.Group>\\n        <Form.Group as={Col} md=\\\"3\\\" controlId=\\\"validationCustom04\\\">\\n          <Form.Label>State</Form.Label>\\n          <Form.Control type=\\\"text\\\" placeholder=\\\"State\\\" required />\\n          <Form.Control.Feedback type=\\\"invalid\\\">\\n            Please provide a valid state.\\n          </Form.Control.Feedback>\\n        </Form.Group>\\n        <Form.Group as={Col} md=\\\"3\\\" controlId=\\\"validationCustom05\\\">\\n          <Form.Label>Zip</Form.Label>\\n          <Form.Control type=\\\"text\\\" placeholder=\\\"Zip\\\" required />\\n          <Form.Control.Feedback type=\\\"invalid\\\">\\n            Please provide a valid zip.\\n          </Form.Control.Feedback>\\n        </Form.Group>\\n      </Row>\\n      <Form.Group className=\\\"mb-3\\\">\\n        <Form.Check\\n          required\\n          label=\\\"Agree to terms and conditions\\\"\\n          feedback=\\\"You must agree before submitting.\\\"\\n          feedbackType=\\\"invalid\\\"\\n        />\\n      </Form.Group>\\n      <Button type=\\\"submit\\\">Submit form</Button>\\n    </Form>\\n  );\\n}\\n\\nrender(<FormExample />);\\n\"","import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport DefaultLayout from \"/Users/kyletsang/Documents/Kyle/Code/react-bootstrap/www/src/layouts/ApiLayout.js\";\nimport { graphql } from 'gatsby';\nimport Callout from '../../components/Callout';\nimport ComponentApi from '../../components/ComponentApi';\nimport ReactPlayground from '../../components/ReactPlayground';\nimport ValidationFormik from '../../examples/Form/ValidationFormik';\nimport ValidationInputGroup from '../../examples/Form/ValidationInputGroup';\nimport ValidationNative from '../../examples/Form/ValidationNative';\nimport ValidationTooltips from '../../examples/Form/ValidationTooltips';\nexport const query = graphql`\n  query FormValidationQuery {\n    Form: componentMetadata(displayName: { eq: \"Form\" }) {\n      ...ComponentApi_metadata\n    }\n    Feedback: componentMetadata(displayName: { eq: \"Feedback\" }) {\n      ...ComponentApi_metadata\n    }\n  }\n`;\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst PageHeader = makeShortcode(\"PageHeader\");\nconst layoutProps = {\n  query,\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n\n\n\n    <PageHeader title=\"Validation\" subTitle=\"Provide valuable, actionable feedback to your users with HTML5 form\n  validation, via browser default behaviors or custom styles and JavaScript.\" mdxType=\"PageHeader\" />\n    <h2 {...{\n      \"id\": \"native-html5-form-validation\"\n    }}>{`Native HTML5 form validation`}</h2>\n    <p>{`For native HTML form validation–`}<a parentName=\"p\" {...{\n        \"href\": \"https://caniuse.com/#feat=form-validation\"\n      }}>{`available in all our supported browsers`}</a>{`,\nthe `}<inlineCode parentName=\"p\">{`:valid`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`:invalid`}</inlineCode>{` pseudo selectors are used to apply validation\nstyles as well as display feedback messages.`}</p>\n    <p>{`Bootstrap scopes the `}<inlineCode parentName=\"p\">{`:valid`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`:invalid`}</inlineCode>{` styles to parent `}<inlineCode parentName=\"p\">{`.was-validated`}</inlineCode>{`\nclass, usually applied to the `}<inlineCode parentName=\"p\">{`<Form>`}</inlineCode>{` (you can use the `}<inlineCode parentName=\"p\">{`validated`}</inlineCode>{` prop\nas a shortcut). Otherwise, any required field without a value shows up\nas invalid on page load. This way, you may choose when to activate them\n(typically after form submission is attempted).`}</p>\n    <Callout mdxType=\"Callout\">\n  Watch out! Browsers provide their own validation UI by default on{' '}\n  <code>form</code>s. You can disable the default UI by adding the HTML{' '}\n  <code>noValidate</code> attribute to your <code>{'<Form>'}</code> or{' '}\n  <code>{'<form>'}</code> element.\n    </Callout>\n    <ReactPlayground codeText={ValidationNative} mdxType=\"ReactPlayground\" />\n    <h2 {...{\n      \"id\": \"form-libraries-and-server-rendered-styles\"\n    }}>{`Form libraries and server-rendered styles`}</h2>\n    <p>{`It's often beneficial (especially in React) to handle form validation\nvia a library like Formik, or react-formal. In those cases, `}<inlineCode parentName=\"p\">{`isValid`}</inlineCode>{`\nand `}<inlineCode parentName=\"p\">{`isInvalid`}</inlineCode>{` props can be added to form controls to manually apply\nvalidation styles. Below is a quick example integrating with\n`}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/jaredpalmer/formik\"\n      }}>{`Formik`}</a>{`.`}</p>\n    <ReactPlayground codeText={ValidationFormik} mdxType=\"ReactPlayground\" />\n    <h2 {...{\n      \"id\": \"tooltips\"\n    }}>{`Tooltips`}</h2>\n    <p>{`If your form layout allows it, you can use the `}<inlineCode parentName=\"p\">{`tooltip`}</inlineCode>{` prop to display\nvalidation feedback in a styled tooltip. Be sure to have a parent with\n`}<inlineCode parentName=\"p\">{`position: relative`}</inlineCode>{` on it for tooltip positioning. In the example below,\nour column classes have this already, but your project may require an\nalternative setup.`}</p>\n    <ReactPlayground codeText={ValidationTooltips} mdxType=\"ReactPlayground\" />\n    <h2 {...{\n      \"id\": \"input-group-validation\"\n    }}>{`Input group validation`}</h2>\n    <p>{`To properly show rounded corners in an `}<inlineCode parentName=\"p\">{`<InputGroup>`}</inlineCode>{` with validation,\nthe `}<inlineCode parentName=\"p\">{`<InputGroup>`}</inlineCode>{` requires the `}<inlineCode parentName=\"p\">{`hasValidation`}</inlineCode>{` prop.`}</p>\n    <ReactPlayground codeText={ValidationInputGroup} mdxType=\"ReactPlayground\" />\n    <h2 {...{\n      \"id\": \"api\"\n    }}>{`API`}</h2>\n    <ComponentApi metadata={props.data.Feedback} exportedBy={props.data.FormControl} mdxType=\"ComponentApi\" />\n\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      ","// extracted by mini-css-extract-plugin\nmodule.exports = {\"callout\":\"Callout-styles-module--callout--1_K3h\",\"warning\":\"Callout-styles-module--warning--39Zw- Callout-styles-module--callout--1_K3h\",\"danger\":\"Callout-styles-module--danger--19388 Callout-styles-module--callout--1_K3h\"};","import PropTypes from 'prop-types';\n\nimport { css } from 'astroturf';\n\nconst styles = css`\n  @import '../css/theme';\n\n  .callout {\n    border-left: 4px solid transparent;\n    padding: 1.2rem 1.2rem 1.2rem calc(1rem - 4px);\n    margin-left: -1rem;\n    margin-bottom: 2rem;\n  }\n\n  .warning {\n    composes: callout;\n    background-color: transparentize($note, 0.7);\n    border-left-color: $note;\n  }\n  .danger {\n    composes: callout;\n    background-color: transparentize($error, 0.7);\n    border-left-color: $error;\n  }\n`;\n\nconst propTypes = {\n  title: PropTypes.node,\n  children: PropTypes.node,\n  theme: PropTypes.oneOf(['danger', 'warning']),\n};\n\nfunction Callout({ title, children, theme }) {\n  return (\n    <aside role=\"note\" className={styles[theme || 'warning']}>\n      {title && <header className=\"h5\">{title}</header>}\n      <div>{children}</div>\n    </aside>\n  );\n}\n\nCallout.propTypes = propTypes;\n\nexport default Callout;\n"],"sourceRoot":""}