{"version":3,"sources":["webpack:///./src/examples/Theming/Variants.js","webpack:///./src/examples/Theming/Prefixes.js","webpack:///./src/components/Callout-styles.module.scss","webpack:///./src/pages/getting-started/theming.js","webpack:///./src/components/Callout.js","webpack:///./src/withLayout.js"],"names":["module","exports","withLayout","h","id","codeText","Variants","theme","Prefixes","Component","props","pathname","location","Layout","DefaultLayout","startsWith","ApiLayout"],"mappings":"+EAAAA,EAAOC,QAAU,yS,mBCAjBD,EAAOC,QAAU,iS,qBCCjBD,EAAOC,QAAU,CAAC,QAAU,wCAAwC,QAAU,8EAA8E,OAAS,+E,mJCMtJC,uBAAW,WACxB,OACE,qCACE,cAAC,UAAD,CAAeC,EAAE,IAAIC,GAAG,gBAAxB,4CAIA,8PAMA,cAAC,UAAD,CAAeD,EAAE,IAAIC,GAAG,yBAAxB,oCAGA,wJAEuD,IACrD,+CAHF,yCAGiE,IAC/D,8CAJF,iFAOA,cAAC,IAAD,CAAiBC,SAAUC,MAE3B,cAAC,UAAD,CAAeH,EAAE,IAAIC,GAAG,uBAAxB,kCAGA,sMAG0B,4CAH1B,6BAG0E,IACxE,iDAJF,iBAMA,cAAC,IAAD,CAASG,MAAM,UAAf,mFAGA,cAAC,IAAD,CAAiBF,SAAUG,a,kDCxCjC,EAAe,UAuCf,IAXA,SAAiB,GAAjB,qCACA,OACA,wEACA,uDACA,uC,msBCjCe,SAASN,EAAWO,GACjC,OAAO,SAACC,GAAW,IACTC,EAAaD,EAAME,SAAnBD,SACJE,EAASC,IAUb,OAREH,EAASI,WAAW,qBACpBJ,EAASI,WAAW,YACpBJ,EAASI,WAAW,gBACpBJ,EAASI,WAAW,iBAEpBF,EAASG,KAIT,cAACH,EAAD,CAAQD,SAAUF,EAAME,SAAxB,SACE,cAACH,EAAD,KAAeC","file":"component---src-pages-getting-started-theming-js-ba12f42641c9ae59b078.js","sourcesContent":["module.exports = \"<>\\n  <style type=\\\"text/css\\\">\\n    {`\\n    .btn-flat {\\n      background-color: purple;\\n      color: white;\\n    }\\n\\n    .btn-xxl {\\n      padding: 1rem 1.5rem;\\n      font-size: 1.5rem;\\n    }\\n    `}\\n  </style>\\n\\n  <Button variant=\\\"flat\\\" size=\\\"xxl\\\">\\n    flat button\\n  </Button>\\n</>;\\n\"","module.exports = \"<>\\n  {/* Hint: inspect the markup to see how the classes differ */}\\n  <ThemeProvider prefixes={{ btn: 'my-btn' }}>\\n    <Button variant=\\\"primary\\\">My Button</Button>\\n  </ThemeProvider>{' '}\\n  <Button bsPrefix=\\\"super-btn\\\" variant=\\\"primary\\\">\\n    Super button\\n  </Button>\\n</>;\\n\"","// extracted by mini-css-extract-plugin\nmodule.exports = {\"callout\":\"Callout-styles-module--callout--1_K3h\",\"warning\":\"Callout-styles-module--warning--39Zw- Callout-styles-module--callout--1_K3h\",\"danger\":\"Callout-styles-module--danger--19388 Callout-styles-module--callout--1_K3h\"};","import Callout from '../../components/Callout';\nimport LinkedHeading from '../../components/LinkedHeading';\nimport ReactPlayground from '../../components/ReactPlayground';\nimport Prefixes from '../../examples/Theming/Prefixes';\nimport Variants from '../../examples/Theming/Variants';\nimport withLayout from '../../withLayout';\n\nexport default withLayout(function ThemingSection() {\n  return (\n    <>\n      <LinkedHeading h=\"1\" id=\"custom-styles\">\n        Theming and customizing styles\n      </LinkedHeading>\n\n      <p>\n        Generally, if you stick to the Bootstrap defined classes and variants,\n        there isn't anything you need to do to use a custom theme with\n        React-Bootstrap. It just works. But we also make coloring outside the\n        lines easy to do.\n      </p>\n      <LinkedHeading h=\"2\" id=\"custom-styles-variants\">\n        New variants and sizes\n      </LinkedHeading>\n      <p>\n        Custom variants and sizes should follow the pattern of the default\n        bootstrap variants, and define css classes matching:{' '}\n        <code>component-*</code>. React bootstrap builds the component{' '}\n        <code>classNames</code> in a consistent way that you can rely on. For\n        instance this custom Button.\n      </p>\n      <ReactPlayground codeText={Variants} />\n\n      <LinkedHeading h=\"2\" id=\"custom-styles-prefix\">\n        Prefixing components\n      </LinkedHeading>\n      <p>\n        In some cases you may need to change the base class \"prefix\" of one or\n        more Components. You can control how a Component prefixes its classes\n        locally by changing the <code>bsPrefix</code> prop. Or globally via the{' '}\n        <code>ThemeProvider</code> Component.\n      </p>\n      <Callout theme=\"warning\">\n        Changing prefixes is an escape hatch and generally shouldn't be used.\n      </Callout>\n      <ReactPlayground codeText={Prefixes} />\n    </>\n  );\n});\n","import PropTypes from 'prop-types';\n\nimport { css } from 'astroturf';\n\nconst styles = css`\n  @import '../css/theme';\n\n  .callout {\n    border-left: 4px solid transparent;\n    padding: 1.2rem 1.2rem 1.2rem calc(1rem - 4px);\n    margin-left: -1rem;\n    margin-bottom: 2rem;\n  }\n\n  .warning {\n    composes: callout;\n    background-color: transparentize($note, 0.7);\n    border-left-color: $note;\n  }\n  .danger {\n    composes: callout;\n    background-color: transparentize($error, 0.7);\n    border-left-color: $error;\n  }\n`;\n\nconst propTypes = {\n  title: PropTypes.node,\n  children: PropTypes.node,\n  theme: PropTypes.oneOf(['danger', 'warning']),\n};\n\nfunction Callout({ title, children, theme }) {\n  return (\n    <aside role=\"note\" className={styles[theme || 'warning']}>\n      {title && <header className=\"h5\">{title}</header>}\n      <div>{children}</div>\n    </aside>\n  );\n}\n\nCallout.propTypes = propTypes;\n\nexport default Callout;\n","import ApiLayout from './layouts/ApiLayout';\nimport DefaultLayout from './layouts';\n\nexport default function withLayout(Component) {\n  return (props) => {\n    const { pathname } = props.location;\n    let Layout = DefaultLayout;\n    if (\n      pathname.startsWith('/getting-started') ||\n      pathname.startsWith('/layout') ||\n      pathname.startsWith('/components') ||\n      pathname.startsWith('/utilities')\n    ) {\n      Layout = ApiLayout;\n    }\n\n    return (\n      <Layout location={props.location}>\n        <Component {...props} />\n      </Layout>\n    );\n  };\n}\n"],"sourceRoot":""}