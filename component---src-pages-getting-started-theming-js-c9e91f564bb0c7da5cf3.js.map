{"version":3,"sources":["webpack:///./src/examples/Theming/Variants.js","webpack:///./src/examples/Theming/Prefixes.js","webpack:///./src/pages/getting-started/theming.js","webpack:///./src/components/Callout.js"],"names":["module","exports","withLayout","h","id","codeText","Variants","theme","Prefixes","styles","require","Callout","title","children","role","className"],"mappings":"+EAAAA,EAAOC,QAAU,yS,mBCAjBD,EAAOC,QAAU,iS,kCCAjB,0HASeC,uBAAW,WACxB,OACE,oCACE,kBAAC,UAAD,CAAeC,EAAE,IAAIC,GAAG,iBAAxB,mCAIA,4PAMA,kBAAC,UAAD,CAAeD,EAAE,IAAIC,GAAG,0BAAxB,0BAGA,qJAEuD,IACrD,6CAHF,yCAGiE,IAC/D,4CAJF,+EAOA,kBAAC,IAAD,CAAiBC,SAAUC,MAE3B,kBAAC,UAAD,CAAeH,EAAE,IAAIC,GAAG,wBAAxB,wBAGA,mMAG0B,0CAH1B,6BAG0E,IACxE,+CAJF,eAMA,kBAAC,IAAD,CAASG,MAAM,WAAf,yEAGA,kBAAC,IAAD,CAAiBF,SAAUG,W,kCC7CjC,yBAIMC,EAASC,EAAQ,QAmBRC,IAXf,YAA8C,IAA3BC,EAA0B,EAA1BA,MAAOC,EAAmB,EAAnBA,SAAUN,EAAS,EAATA,MAClC,OACE,2BAAOO,KAAK,OAAOC,UAAWN,EAAOF,GAAS,YAC3CK,GAAS,4BAAQG,UAAU,MAAMH,GAClC,6BAAMC","file":"component---src-pages-getting-started-theming-js-c9e91f564bb0c7da5cf3.js","sourcesContent":["module.exports = \"<>\\n  <style type=\\\"text/css\\\">\\n    {`\\n    .btn-flat {\\n      background-color: purple;\\n      color: white;\\n    }\\n\\n    .btn-xxl {\\n      padding: 1rem 1.5rem;\\n      font-size: 1.5rem;\\n    }\\n    `}\\n  </style>\\n\\n  <Button variant=\\\"flat\\\" size=\\\"xxl\\\">\\n    flat button\\n  </Button>\\n</>;\\n\"","module.exports = \"<>\\n  {/* Hint: inspect the markup to see how the classes differ */}\\n  <ThemeProvider prefixes={{ btn: 'my-btn' }}>\\n    <Button variant=\\\"primary\\\">My Button</Button>\\n  </ThemeProvider>{' '}\\n  <Button bsPrefix=\\\"super-btn\\\" variant=\\\"primary\\\">\\n    Super button\\n  </Button>\\n</>;\\n\"","import React from 'react';\n\nimport Callout from '../../components/Callout';\nimport LinkedHeading from '../../components/LinkedHeading';\nimport ReactPlayground from '../../components/ReactPlayground';\nimport Prefixes from '../../examples/Theming/Prefixes';\nimport Variants from '../../examples/Theming/Variants';\nimport withLayout from '../../withLayout';\n\nexport default withLayout(function ThemingSection() {\n  return (\n    <>\n      <LinkedHeading h=\"1\" id=\"custom-styles\">\n        Theming and Customizing styles.\n      </LinkedHeading>\n\n      <p>\n        Generally, if you stick to the Bootstrap defined classes and variants,\n        there isn't anything you need to do to use a custom theme with\n        React-Bootstrap. It just works. But we also make coloring outside the\n        lines easy to do.\n      </p>\n      <LinkedHeading h=\"2\" id=\"custom-styles-variants\">\n        New variants and sizes\n      </LinkedHeading>\n      <p>\n        Custom variants and sizes should follow the pattern of the default\n        bootstrap variants, and define css classes matching:{' '}\n        <code>component-*</code>. React bootstrap builds the component{' '}\n        <code>classNames</code> in a consistent way that you can rely on. For\n        instance this custom Button.\n      </p>\n      <ReactPlayground codeText={Variants} />\n\n      <LinkedHeading h=\"2\" id=\"custom-styles-prefix\">\n        Prefixing components\n      </LinkedHeading>\n      <p>\n        In some cases you may need to change the base class \"prefix\" of one or\n        more Components. You can control how a Component prefixes its classes\n        locally by changing the <code>bsPrefix</code> prop. Or globally via the{' '}\n        <code>ThemeProvider</code> Component.\n      </p>\n      <Callout theme=\"warning\">\n        Changing prefixes is an escape hatch and generally shouldn't be used.\n      </Callout>\n      <ReactPlayground codeText={Prefixes} />\n    </>\n  );\n});\n","import PropTypes from 'prop-types';\nimport React from 'react';\n\n\n\nconst styles = require('./Callout-styles.module.scss');\n\nconst propTypes = {\n  title: PropTypes.node,\n  children: PropTypes.node,\n  theme: PropTypes.oneOf(['danger', 'warning']),\n};\n\nfunction Callout({ title, children, theme }) {\n  return (\n    <aside role=\"note\" className={styles[theme || 'warning']}>\n      {title && <header className=\"h5\">{title}</header>}\n      <div>{children}</div>\n    </aside>\n  );\n}\n\nCallout.propTypes = propTypes;\n\nexport default Callout;\n"],"sourceRoot":""}