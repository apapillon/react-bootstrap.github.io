{"version":3,"sources":["webpack:///./src/examples/Grid/ContainerFluidBreakpoint.js","webpack:///./src/examples/Grid/RowColLayout.js","webpack:///./src/examples/Grid/ContainerFluid.js","webpack:///./src/examples/Grid/RowColLayoutColWidthBreakpoint.js","webpack:///./src/examples/Grid/ResponsiveAuto.js","webpack:///./src/pages/layout/grid.mdx","webpack:///./src/examples/Grid/Ordering.js","webpack:///./src/examples/Grid/AutoLayout.js","webpack:///./src/examples/Grid/Responsive.js","webpack:///./src/examples/Grid/AutoLayoutSizing.js","webpack:///./src/examples/Grid/Offsetting.js","webpack:///./src/examples/Grid/Container.js","webpack:///./src/examples/Grid/AutoLayoutVariable.js","webpack:///./src/examples/Grid/OrderingFirstLast.js"],"names":["module","exports","_frontmatter","layoutProps","query","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","codeText","GridContainer","exampleClassName","GridContainerFluid","GridContainerFluidBreakpoint","GridAutoLayout","GridAutoLayoutSizing","GridAutoLayoutVariable","GridResponsiveAuto","GridResponsive","GridOrdering","GridOrderingFirstLast","GridOffsetting","GridRowColLayout","GridRowColLayoutColWidthBreakpoint","metadata","data","Container","Row","Col","isMDXComponent"],"mappings":"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","file":"component---src-pages-layout-grid-mdx-5530847880b94c0aac80.js","sourcesContent":["module.exports = \"<Container fluid=\\\"md\\\">\\n  <Row>\\n    <Col>1 of 1</Col>\\n  </Row>\\n</Container>;\\n\"","module.exports = \"<Container>\\n  <Row xs={2} md={4} lg={6}>\\n    <Col>1 of 2</Col>\\n    <Col>2 of 2</Col>\\n  </Row>\\n  <Row xs={1} md={2}>\\n    <Col>1 of 3</Col>\\n    <Col>2 of 3</Col>\\n    <Col>3 of 3</Col>\\n  </Row>\\n  <Row xs=\\\"auto\\\">\\n    <Col>1 of 3</Col>\\n    <Col>2 of 3</Col>\\n    <Col>3 of 3</Col>\\n  </Row>\\n</Container>;\\n\"","module.exports = \"<Container fluid>\\n  <Row>\\n    <Col>1 of 1</Col>\\n  </Row>\\n</Container>;\\n\"","module.exports = \"<Container>\\n  <Row md={4}>\\n    <Col>1 of 3</Col>\\n    <Col xs={6}>2 of 3</Col>\\n    <Col>3 of 3</Col>\\n  </Row>\\n</Container>;\\n\"","module.exports = \"<Container>\\n  <Row>\\n    <Col sm={8}>sm=8</Col>\\n    <Col sm={4}>sm=4</Col>\\n  </Row>\\n  <Row>\\n    <Col sm>sm=true</Col>\\n    <Col sm>sm=true</Col>\\n    <Col sm>sm=true</Col>\\n  </Row>\\n</Container>;\\n\"","import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport DefaultLayout from \"/Users/kyletsang/Documents/Kyle/Code/react-bootstrap/www/src/layouts/ApiLayout.js\";\nimport { graphql } from 'gatsby';\nimport ComponentApi from '../../components/ComponentApi';\nimport ReactPlayground from '../../components/ReactPlayground';\nimport GridContainer from '../../examples/Grid/Container';\nimport GridContainerFluid from '../../examples/Grid/ContainerFluid';\nimport GridContainerFluidBreakpoint from '../../examples/Grid/ContainerFluidBreakpoint';\nimport GridAutoLayout from '../../examples/Grid/AutoLayout';\nimport GridRowColLayout from '../../examples/Grid/RowColLayout';\nimport GridRowColLayoutColWidthBreakpoint from '../../examples/Grid/RowColLayoutColWidthBreakpoint';\nimport GridAutoLayoutSizing from '../../examples/Grid/AutoLayoutSizing';\nimport GridAutoLayoutVariable from '../../examples/Grid/AutoLayoutVariable';\nimport GridOffsetting from '../../examples/Grid/Offsetting';\nimport GridOrdering from '../../examples/Grid/Ordering';\nimport GridOrderingFirstLast from '../../examples/Grid/OrderingFirstLast';\nimport GridResponsive from '../../examples/Grid/Responsive';\nimport GridResponsiveAuto from '../../examples/Grid/ResponsiveAuto';\nexport const query = graphql`\n  query GridQuery {\n    Container: componentMetadata(displayName: { eq: \"Container\" }) {\n      ...ComponentApi_metadata\n    }\n    Row: componentMetadata(displayName: { eq: \"Row\" }) {\n      ...ComponentApi_metadata\n    }\n    Col: componentMetadata(displayName: { eq: \"Col\" }) {\n      ...ComponentApi_metadata\n    }\n  }\n`;\nexport const _frontmatter = {};\nconst layoutProps = {\n  query,\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n\n\n    <h1 {...{\n      \"id\": \"grid-system\"\n    }}>{`Grid system`}</h1>\n    <p>{`Bootstrap’s grid system uses a series of containers, rows, and columns\nto layout and align content. It’s built with\n`}<a parentName=\"p\" {...{\n        \"href\": \"https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Flexible_Box_Layout/Using_CSS_flexible_boxes\"\n      }}>{`flexbox`}</a>{`\nand is fully responsive. Below is an example and an in-depth look at how the\ngrid comes together.`}</p>\n    <p><strong parentName=\"p\">{`New to or unfamiliar with flexbox?`}</strong>{` `}<a parentName=\"p\" {...{\n        \"href\": \"https://css-tricks.com/snippets/css/a-guide-to-flexbox/#flexbox-background\"\n      }}>{`Read this CSS Tricks flexbox guide`}</a>{`\nfor background, terminology, guidelines, and code snippets.`}</p>\n    <h2 {...{\n      \"id\": \"container\"\n    }}>{`Container`}</h2>\n    <p>{`Containers provide a means to center and horizontally pad your site’s\ncontents. Use `}<inlineCode parentName=\"p\">{`Container`}</inlineCode>{` for a responsive pixel width.`}</p>\n    <ReactPlayground codeText={GridContainer} exampleClassName=\"show-grid\" mdxType=\"ReactPlayground\" />\n    <h3 {...{\n      \"id\": \"fluid-container\"\n    }}>{`Fluid Container`}</h3>\n    <p>{`You can use `}<inlineCode parentName=\"p\">{`<Container fluid />`}</inlineCode>{` for width: 100% across\nall viewport and device sizes.`}</p>\n    <ReactPlayground codeText={GridContainerFluid} exampleClassName=\"show-grid\" mdxType=\"ReactPlayground\" />\n    <p>{`You can set breakpoints for the `}<inlineCode parentName=\"p\">{`fluid`}</inlineCode>{` prop. Setting it to a\nbreakpoint (`}<inlineCode parentName=\"p\">{`sm, md, lg, xl, xxl`}</inlineCode>{`) will set the\n`}<inlineCode parentName=\"p\">{`Container`}</inlineCode>{` as fluid until the specified breakpoint.`}</p>\n    <ReactPlayground codeText={GridContainerFluidBreakpoint} exampleClassName=\"show-grid\" mdxType=\"ReactPlayground\" />\n    <h2 {...{\n      \"id\": \"auto-layout-columns\"\n    }}>{`Auto-layout columns`}</h2>\n    <p>{`When no column widths are specified the `}<inlineCode parentName=\"p\">{`Col`}</inlineCode>{` component will\nrender equal width columns`}</p>\n    <ReactPlayground codeText={GridAutoLayout} exampleClassName=\"show-grid\" mdxType=\"ReactPlayground\" />\n    <h3 {...{\n      \"id\": \"setting-one-column-width\"\n    }}>{`Setting one column width`}</h3>\n    <p>{`Auto-layout for flexbox grid columns also means you can set the width of\none column and have the sibling columns automatically resize around it.\nYou may use predefined grid classes (as shown below), grid mixins, or\ninline widths. Note that the other columns will resize no matter the\nwidth of the center column.`}</p>\n    <ReactPlayground codeText={GridAutoLayoutSizing} exampleClassName=\"show-grid\" mdxType=\"ReactPlayground\" />\n    <h3 {...{\n      \"id\": \"variable-width-content\"\n    }}>{`Variable width content`}</h3>\n    <p>{`Set the column value (for any breakpoint size) to `}<inlineCode parentName=\"p\">{`auto`}</inlineCode>{` to\nsize columns based on the natural width of their content.`}</p>\n    <ReactPlayground codeText={GridAutoLayoutVariable} exampleClassName=\"show-grid\" mdxType=\"ReactPlayground\" />\n    <h2 {...{\n      \"id\": \"responsive-grids\"\n    }}>{`Responsive grids`}</h2>\n    <p>{`The `}<inlineCode parentName=\"p\">{`Col`}</inlineCode>{` lets you specify column widths across 6 breakpoint\nsizes (xs, sm, md, lg, xl and xxl). For every breakpoint, you can\nspecify the amount of columns to span, or set the prop to\n`}<inlineCode parentName=\"p\">{`<Col lg={true} />`}</inlineCode>{` for auto layout widths.`}</p>\n    <ReactPlayground codeText={GridResponsiveAuto} exampleClassName=\"show-grid\" mdxType=\"ReactPlayground\" />\n    <p>{`You can also mix and match breakpoints to create different grids\ndepending on the screen size.`}</p>\n    <ReactPlayground codeText={GridResponsive} exampleClassName=\"show-grid\" mdxType=\"ReactPlayground\" />\n    <p>{`The `}<inlineCode parentName=\"p\">{`Col`}</inlineCode>{` breakpoint props also have a more complicated\n`}<inlineCode parentName=\"p\">{`object`}</inlineCode>{` prop form: `}<inlineCode parentName=\"p\">{`{span: number, order: number, offset: number}`}</inlineCode>{` for\nspecifying offsets and ordering effects.`}</p>\n    <p>{`You can use the `}<inlineCode parentName=\"p\">{`order`}</inlineCode>{` property to control the `}<strong parentName=\"p\">{`visual order`}</strong>{` of your content.`}</p>\n    <ReactPlayground codeText={GridOrdering} exampleClassName=\"show-grid\" mdxType=\"ReactPlayground\" />\n    <p>{`The `}<inlineCode parentName=\"p\">{`order`}</inlineCode>{` property also supports `}<inlineCode parentName=\"p\">{`first`}</inlineCode>{` (`}<inlineCode parentName=\"p\">{`order: -1`}</inlineCode>{`) and `}<inlineCode parentName=\"p\">{`last`}</inlineCode>{` (`}<inlineCode parentName=\"p\">{`order: $columns+1`}</inlineCode>{`).`}</p>\n    <ReactPlayground codeText={GridOrderingFirstLast} exampleClassName=\"show-grid\" mdxType=\"ReactPlayground\" />\n    <p>{`For offsetting grid columns you can set an `}<inlineCode parentName=\"p\">{`offset`}</inlineCode>{` value or for a\nmore general layout, use the margin class utilities.`}</p>\n    <ReactPlayground codeText={GridOffsetting} exampleClassName=\"show-grid\" mdxType=\"ReactPlayground\" />\n    <h3 {...{\n      \"id\": \"setting-column-widths-in-row\"\n    }}>{`Setting column widths in Row`}</h3>\n    <p>{`The `}<inlineCode parentName=\"p\">{`Row`}</inlineCode>{` lets you specify column widths across 6 breakpoint\nsizes (xs, sm, md, lg, xl and xxl). For every breakpoint, you can\nspecify the amount of columns that will fit next to each other. You can\nalso specify `}<inlineCode parentName=\"p\">{`auto`}</inlineCode>{` to set the columns to their natural\nwidths.`}</p>\n    <ReactPlayground codeText={GridRowColLayout} exampleClassName=\"show-grid\" mdxType=\"ReactPlayground\" />\n    <p>{`Note that `}<inlineCode parentName=\"p\">{`Row`}</inlineCode>{` column widths will override `}<inlineCode parentName=\"p\">{`Col`}</inlineCode>{` widths\nset on lower breakpoints when viewed on larger screens. The\n`}<inlineCode parentName=\"p\">{`<Col xs={6} />`}</inlineCode>{` size will be overriden by `}<inlineCode parentName=\"p\">{`<Row md={4} />`}</inlineCode>{`\non medium and larger screens.`}</p>\n    <ReactPlayground codeText={GridRowColLayoutColWidthBreakpoint} exampleClassName=\"show-grid\" mdxType=\"ReactPlayground\" />\n    <h2 {...{\n      \"id\": \"api\"\n    }}>{`API`}</h2>\n    <ComponentApi metadata={props.data.Container} mdxType=\"ComponentApi\" />\n    <ComponentApi metadata={props.data.Row} mdxType=\"ComponentApi\" />\n    <ComponentApi metadata={props.data.Col} mdxType=\"ComponentApi\" />\n\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      ","module.exports = \"<Container>\\n  <Row>\\n    <Col xs>First, but unordered</Col>\\n    <Col xs={{ order: 12 }}>Second, but last</Col>\\n    <Col xs={{ order: 1 }}>Third, but second</Col>\\n  </Row>\\n</Container>;\\n\"","module.exports = \"<Container>\\n  <Row>\\n    <Col>1 of 2</Col>\\n    <Col>2 of 2</Col>\\n  </Row>\\n  <Row>\\n    <Col>1 of 3</Col>\\n    <Col>2 of 3</Col>\\n    <Col>3 of 3</Col>\\n  </Row>\\n</Container>;\\n\"","module.exports = \"<Container>\\n  {/* Stack the columns on mobile by making one full-width and the other half-width */}\\n  <Row>\\n    <Col xs={12} md={8}>\\n      xs=12 md=8\\n    </Col>\\n    <Col xs={6} md={4}>\\n      xs=6 md=4\\n    </Col>\\n  </Row>\\n\\n  {/* Columns start at 50% wide on mobile and bump up to 33.3% wide on desktop */}\\n  <Row>\\n    <Col xs={6} md={4}>\\n      xs=6 md=4\\n    </Col>\\n    <Col xs={6} md={4}>\\n      xs=6 md=4\\n    </Col>\\n    <Col xs={6} md={4}>\\n      xs=6 md=4\\n    </Col>\\n  </Row>\\n\\n  {/* Columns are always 50% wide, on mobile and desktop */}\\n  <Row>\\n    <Col xs={6}>xs=6</Col>\\n    <Col xs={6}>xs=6</Col>\\n  </Row>\\n</Container>;\\n\"","module.exports = \"<Container>\\n  <Row>\\n    <Col>1 of 3</Col>\\n    <Col xs={6}>2 of 3 (wider)</Col>\\n    <Col>3 of 3</Col>\\n  </Row>\\n  <Row>\\n    <Col>1 of 3</Col>\\n    <Col xs={5}>2 of 3 (wider)</Col>\\n    <Col>3 of 3</Col>\\n  </Row>\\n</Container>;\\n\"","module.exports = \"<Container>\\n  <Row>\\n    <Col md={4}>md=4</Col>\\n    <Col md={{ span: 4, offset: 4 }}>{`md={{ span: 4, offset: 4 }}`}</Col>\\n  </Row>\\n  <Row>\\n    <Col md={{ span: 3, offset: 3 }}>{`md={{ span: 3, offset: 3 }}`}</Col>\\n    <Col md={{ span: 3, offset: 3 }}>{`md={{ span: 3, offset: 3 }}`}</Col>\\n  </Row>\\n  <Row>\\n    <Col md={{ span: 6, offset: 3 }}>{`md={{ span: 6, offset: 3 }}`}</Col>\\n  </Row>\\n</Container>;\\n\"","module.exports = \"<Container>\\n  <Row>\\n    <Col>1 of 1</Col>\\n  </Row>\\n</Container>;\\n\"","module.exports = \"<Container>\\n  <Row className=\\\"justify-content-md-center\\\">\\n    <Col xs lg=\\\"2\\\">\\n      1 of 3\\n    </Col>\\n    <Col md=\\\"auto\\\">Variable width content</Col>\\n    <Col xs lg=\\\"2\\\">\\n      3 of 3\\n    </Col>\\n  </Row>\\n  <Row>\\n    <Col>1 of 3</Col>\\n    <Col md=\\\"auto\\\">Variable width content</Col>\\n    <Col xs lg=\\\"2\\\">\\n      3 of 3\\n    </Col>\\n  </Row>\\n</Container>;\\n\"","module.exports = \"<Container>\\n  <Row>\\n    <Col xs={{ order: 'last' }}>First, but last</Col>\\n    <Col xs>Second, but unordered</Col>\\n    <Col xs={{ order: 'first' }}>Third, but first</Col>\\n  </Row>\\n</Container>;\\n\""],"sourceRoot":""}