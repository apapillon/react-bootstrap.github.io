{"componentChunkName":"component---src-pages-components-dropdowns-mdx","path":"/components/dropdowns/","result":{"data":{"DropdownButton":{"displayName":"DropdownButton","composes":null,"description":{"childMarkdownRemark":{"html":"<p>A convenience component for simple or general use dropdowns. Renders a <code class=\"language-text\">Button</code> toggle and all <code class=\"language-text\">children</code>\nare passed directly to the default <code class=\"language-text\">Dropdown.Menu</code>. This component accepts all of\n<a href=\"#dropdown-props\"><code class=\"language-text\">Dropdown</code>'s props</a>.</p>\n<p><em>All unknown props are passed through to the <code class=\"language-text\">Dropdown</code> component.</em> Only\nthe Button <code class=\"language-text\">variant</code>, <code class=\"language-text\">size</code> and <code class=\"language-text\">bsPrefix</code> props are passed to the toggle,\nalong with menu-related props are passed to the <code class=\"language-text\">Dropdown.Menu</code></p>"}},"props":[{"name":"id","doclets":[{"tag":"type","value":"{string}"}],"defaultValue":null,"description":{"childMarkdownRemark":{"html":"<p>An html id attribute for the Toggle button, necessary for assistive technologies, such as screen readers.</p>"}},"required":false,"type":{"name":"string","value":null,"raw":null}},{"name":"href","doclets":[],"defaultValue":null,"description":{"childMarkdownRemark":{"html":"<p>An <code class=\"language-text\">href</code> passed to the Toggle component</p>"}},"required":false,"type":{"name":"string","value":null,"raw":null}},{"name":"onClick","doclets":[],"defaultValue":null,"description":{"childMarkdownRemark":{"html":"<p>An <code class=\"language-text\">onClick</code> handler passed to the Toggle component</p>"}},"required":false,"type":{"name":"func","value":null,"raw":null}},{"name":"title","doclets":[],"defaultValue":null,"description":{"childMarkdownRemark":{"html":"<p>The content of the non-toggle Button.</p>"}},"required":true,"type":{"name":"node","value":null,"raw":null}},{"name":"disabled","doclets":[],"defaultValue":null,"description":{"childMarkdownRemark":{"html":"<p>Disables both Buttons</p>"}},"required":false,"type":{"name":"bool","value":null,"raw":null}},{"name":"align","doclets":[{"tag":"type","value":"{\"start\"|\"end\"|{ sm: \"start\"|\"end\" }|{ md: \"start\"|\"end\" }|{ lg: \"start\"|\"end\" }|{ xl: \"start\"|\"end\"}|{ xxl: \"start\"|\"end\"} }"}],"defaultValue":null,"description":{"childMarkdownRemark":{"html":"<p>Aligns the dropdown menu.</p>\n<p><em>see <a href=\"#dropdown-menu-props\">DropdownMenu</a> for more details</em></p>"}},"required":false,"type":{"name":"\"start\"|\"end\"|{ sm: \"start\"|\"end\" }|{ md: \"start\"|\"end\" }|{ lg: \"start\"|\"end\" }|{ xl: \"start\"|\"end\"}|{ xxl: \"start\"|\"end\"} ","value":null,"raw":"alignPropType"}},{"name":"menuRole","doclets":[],"defaultValue":null,"description":{"childMarkdownRemark":{"html":"<p>An ARIA accessible role applied to the Menu component. When set to 'menu', The dropdown</p>"}},"required":false,"type":{"name":"string","value":null,"raw":null}},{"name":"renderMenuOnMount","doclets":[],"defaultValue":null,"description":{"childMarkdownRemark":{"html":"<p>Whether to render the dropdown menu in the DOM before the first time it is shown</p>"}},"required":false,"type":{"name":"bool","value":null,"raw":null}},{"name":"rootCloseEvent","doclets":[],"defaultValue":null,"description":{"childMarkdownRemark":{"html":"<p>Which event when fired outside the component will cause it to be closed.</p>\n<p><em>see <a href=\"#dropdown-menu-props\">DropdownMenu</a> for more details</em></p>"}},"required":false,"type":{"name":"string","value":null,"raw":null}},{"name":"menuVariant","doclets":[],"defaultValue":null,"description":{"childMarkdownRemark":{"html":"<p>Menu color variant.</p>\n<p>Omitting this will use the default light color.</p>"}},"required":false,"type":{"name":"enum","value":[{"value":"'dark'","computed":false}],"raw":null}},{"name":"bsPrefix","doclets":[{"tag":"ignore","value":true}],"defaultValue":null,"description":{"childMarkdownRemark":{"html":"<p>Change the underlying component CSS base class name and modifier class names prefix. <strong>This is an escape hatch</strong> for working with heavily customized bootstrap css.</p>"}},"required":false,"type":{"name":"string","value":null,"raw":null}},{"name":"variant","doclets":[{"tag":"ignore","value":true}],"defaultValue":null,"description":{"childMarkdownRemark":{"html":"<p>Component visual or contextual style variants.</p>"}},"required":false,"type":{"name":"string","value":null,"raw":null}},{"name":"size","doclets":[{"tag":"ignore","value":true}],"defaultValue":null,"description":{"childMarkdownRemark":{"html":"<p>Component size variations.</p>"}},"required":false,"type":{"name":"string","value":null,"raw":null}}]},"SplitButton":{"displayName":"SplitButton","composes":null,"description":{"childMarkdownRemark":{"html":"<p>A convenience component for simple or general use split button dropdowns. Renders a\n<code class=\"language-text\">ButtonGroup</code> containing a <code class=\"language-text\">Button</code> and a <code class=\"language-text\">Button</code> toggle for the <code class=\"language-text\">Dropdown</code>. All <code class=\"language-text\">children</code>\nare passed directly to the default <code class=\"language-text\">Dropdown.Menu</code>. This component accepts all of <a href=\"#dropdown-props\"><code class=\"language-text\">Dropdown</code>'s\nprops</a>.</p>\n<p><em>All unknown props are passed through to the <code class=\"language-text\">Dropdown</code> component.</em>\nThe Button <code class=\"language-text\">variant</code>, <code class=\"language-text\">size</code> and <code class=\"language-text\">bsPrefix</code> props are passed to the button and toggle,\nand menu-related props are passed to the <code class=\"language-text\">Dropdown.Menu</code></p>"}},"props":[{"name":"id","doclets":[{"tag":"type","value":"{string}"},{"tag":"required","value":true}],"defaultValue":null,"description":{"childMarkdownRemark":{"html":"<p>An html id attribute for the Toggle button, necessary for assistive technologies, such as screen readers.</p>"}},"required":true,"type":{"name":"string","value":null,"raw":null}},{"name":"toggleLabel","doclets":[],"defaultValue":{"value":"'Toggle dropdown'","computed":false},"description":{"childMarkdownRemark":{"html":"<p>Accessible label for the toggle; the value of <code class=\"language-text\">title</code> if not specified.</p>"}},"required":false,"type":{"name":"string","value":null,"raw":null}},{"name":"href","doclets":[],"defaultValue":null,"description":{"childMarkdownRemark":{"html":"<p>An <code class=\"language-text\">href</code> passed to the non-toggle Button</p>"}},"required":false,"type":{"name":"string","value":null,"raw":null}},{"name":"target","doclets":[],"defaultValue":null,"description":{"childMarkdownRemark":{"html":"<p>An anchor <code class=\"language-text\">target</code> passed to the non-toggle Button</p>"}},"required":false,"type":{"name":"string","value":null,"raw":null}},{"name":"onClick","doclets":[],"defaultValue":null,"description":{"childMarkdownRemark":{"html":"<p>An <code class=\"language-text\">onClick</code> handler passed to the non-toggle Button</p>"}},"required":false,"type":{"name":"func","value":null,"raw":null}},{"name":"title","doclets":[],"defaultValue":null,"description":{"childMarkdownRemark":{"html":"<p>The content of the non-toggle Button.</p>"}},"required":true,"type":{"name":"node","value":null,"raw":null}},{"name":"type","doclets":[],"defaultValue":{"value":"'button'","computed":false},"description":{"childMarkdownRemark":{"html":"<p>A <code class=\"language-text\">type</code> passed to the non-toggle Button</p>"}},"required":false,"type":{"name":"string","value":null,"raw":null}},{"name":"disabled","doclets":[],"defaultValue":null,"description":{"childMarkdownRemark":{"html":"<p>Disables both Buttons</p>"}},"required":false,"type":{"name":"bool","value":null,"raw":null}},{"name":"align","doclets":[{"tag":"type","value":"{\"start\"|\"end\"|{ sm: \"start\"|\"end\" }|{ md: \"start\"|\"end\" }|{ lg: \"start\"|\"end\" }|{ xl: \"start\"|\"end\"}|{ xxl: \"start\"|\"end\"} }"}],"defaultValue":null,"description":{"childMarkdownRemark":{"html":"<p>Aligns the dropdown menu.</p>\n<p><em>see <a href=\"#dropdown-menu-props\">DropdownMenu</a> for more details</em></p>"}},"required":false,"type":{"name":"\"start\"|\"end\"|{ sm: \"start\"|\"end\" }|{ md: \"start\"|\"end\" }|{ lg: \"start\"|\"end\" }|{ xl: \"start\"|\"end\"}|{ xxl: \"start\"|\"end\"} ","value":null,"raw":"alignPropType"}},{"name":"menuRole","doclets":[],"defaultValue":null,"description":{"childMarkdownRemark":{"html":"<p>An ARIA accessible role applied to the Menu component. When set to 'menu', The dropdown</p>"}},"required":false,"type":{"name":"string","value":null,"raw":null}},{"name":"renderMenuOnMount","doclets":[],"defaultValue":null,"description":{"childMarkdownRemark":{"html":"<p>Whether to render the dropdown menu in the DOM before the first time it is shown</p>"}},"required":false,"type":{"name":"bool","value":null,"raw":null}},{"name":"rootCloseEvent","doclets":[],"defaultValue":null,"description":{"childMarkdownRemark":{"html":"<p>Which event when fired outside the component will cause it to be closed.</p>\n<p><em>see <a href=\"#dropdown-menu-props\">DropdownMenu</a> for more details</em></p>"}},"required":false,"type":{"name":"string","value":null,"raw":null}},{"name":"bsPrefix","doclets":[{"tag":"ignore","value":true}],"defaultValue":null,"description":{"childMarkdownRemark":{"html":"<p>Change the underlying component CSS base class name and modifier class names prefix. <strong>This is an escape hatch</strong> for working with heavily customized bootstrap css.</p>"}},"required":false,"type":{"name":"string","value":null,"raw":null}},{"name":"variant","doclets":[{"tag":"ignore","value":true}],"defaultValue":null,"description":{"childMarkdownRemark":{"html":"<p>Component visual or contextual style variants.</p>"}},"required":false,"type":{"name":"string","value":null,"raw":null}},{"name":"size","doclets":[{"tag":"ignore","value":true}],"defaultValue":null,"description":{"childMarkdownRemark":{"html":"<p>Component size variations.</p>"}},"required":false,"type":{"name":"string","value":null,"raw":null}}]},"Dropdown":{"displayName":"Dropdown","composes":null,"description":{"childMarkdownRemark":{"html":""}},"props":[{"name":"bsPrefix","doclets":[{"tag":"default","value":"'dropdown'"}],"defaultValue":{"value":"'dropdown'","computed":false},"description":{"childMarkdownRemark":{"html":"<p>Change the underlying component CSS base class name and modifier class names prefix. <strong>This is an escape hatch</strong> for working with heavily customized bootstrap css.</p>"}},"required":false,"type":{"name":"string","value":null,"raw":null}},{"name":"drop","doclets":[],"defaultValue":null,"description":{"childMarkdownRemark":{"html":"<p>Determines the direction and location of the Menu in relation to it's Toggle.</p>"}},"required":false,"type":{"name":"enum","value":[{"value":"'up'","computed":false},{"value":"'start'","computed":false},{"value":"'end'","computed":false},{"value":"'down'","computed":false}],"raw":null}},{"name":"as","doclets":[],"defaultValue":null,"description":{"childMarkdownRemark":{"html":"<p>You can use a custom element type for this component.</p>"}},"required":false,"type":{"name":"elementType","value":null,"raw":null}},{"name":"align","doclets":[{"tag":"type","value":"{\"start\"|\"end\"|{ sm: \"start\"|\"end\" }|{ md: \"start\"|\"end\" }|{ lg: \"start\"|\"end\" }|{ xl: \"start\"|\"end\"}|{ xxl: \"start\"|\"end\"} }"}],"defaultValue":{"value":"'start'","computed":false},"description":{"childMarkdownRemark":{"html":"<p>Aligns the dropdown menu to the specified side of the Dropdown toggle. You can\nalso align the menu responsively for breakpoints starting at <code class=\"language-text\">sm</code> and up.\nThe alignment direction will affect the specified breakpoint or larger.</p>\n<p><em>Note: Using responsive alignment will disable Popper usage for positioning.</em></p>"}},"required":false,"type":{"name":"\"start\"|\"end\"|{ sm: \"start\"|\"end\" }|{ md: \"start\"|\"end\" }|{ lg: \"start\"|\"end\" }|{ xl: \"start\"|\"end\"}|{ xxl: \"start\"|\"end\"} ","value":null,"raw":"alignPropType"}},{"name":"show","doclets":[{"tag":"controllable","value":"onToggle"}],"defaultValue":null,"description":{"childMarkdownRemark":{"html":"<p>Whether or not the Dropdown is visible.</p>"}},"required":false,"type":{"name":"bool","value":null,"raw":null}},{"name":"flip","doclets":[],"defaultValue":null,"description":{"childMarkdownRemark":{"html":"<p>Allow Dropdown to flip in case of an overlapping on the reference element. For more information refer to\nPopper.js's flip <a href=\"https://popper.js.org/docs/v2/modifiers/flip/\">docs</a>.</p>"}},"required":false,"type":{"name":"bool","value":null,"raw":null}},{"name":"onToggle","doclets":[{"tag":"controllable","value":"show"}],"defaultValue":null,"description":{"childMarkdownRemark":{"html":"<p>A callback fired when the Dropdown wishes to change visibility. Called with the requested\n<code class=\"language-text\">show</code> value, the DOM event, and the source that fired it: <code class=\"language-text\">'click'</code>,<code class=\"language-text\">'keydown'</code>,<code class=\"language-text\">'rootClose'</code>, or <code class=\"language-text\">'select'</code>.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>\n  <span class=\"token literal-property property\">isOpen</span><span class=\"token operator\">:</span> boolean<span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">event</span><span class=\"token operator\">:</span> SyntheticEvent<span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">metadata</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">source</span><span class=\"token operator\">:</span> <span class=\"token string\">'select'</span> <span class=\"token operator\">|</span> <span class=\"token string\">'click'</span> <span class=\"token operator\">|</span> <span class=\"token string\">'rootClose'</span> <span class=\"token operator\">|</span> <span class=\"token string\">'keydown'</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token keyword\">void</span></code></pre></div>"}},"required":false,"type":{"name":"func","value":null,"raw":null}},{"name":"onSelect","doclets":[],"defaultValue":null,"description":{"childMarkdownRemark":{"html":"<p>A callback fired when a menu item is selected.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token literal-property property\">eventKey</span><span class=\"token operator\">:</span> any<span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">event</span><span class=\"token operator\">:</span> Object</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> any</code></pre></div>"}},"required":false,"type":{"name":"func","value":null,"raw":null}},{"name":"focusFirstItemOnShow","doclets":[],"defaultValue":null,"description":{"childMarkdownRemark":{"html":"<p>Controls the focus behavior for when the Dropdown is opened. Set to\n<code class=\"language-text\">true</code> to always focus the first menu item, <code class=\"language-text\">keyboard</code> to focus only when\nnavigating via the keyboard, or <code class=\"language-text\">false</code> to disable completely</p>\n<p>The Default behavior is <code class=\"language-text\">false</code> <strong>unless</strong> the Menu has a <code class=\"language-text\">role=\"menu\"</code>\nwhere it will default to <code class=\"language-text\">keyboard</code> to match the recommended <a href=\"https://www.w3.org/TR/wai-aria-practices-1.1/#menubutton\">ARIA Authoring practices</a>.</p>"}},"required":false,"type":{"name":"enum","value":[{"value":"false","computed":false},{"value":"true","computed":false},{"value":"'keyboard'","computed":false}],"raw":null}},{"name":"navbar","doclets":[{"tag":"private","value":true}],"defaultValue":{"value":"false","computed":false},"description":{"childMarkdownRemark":{"html":""}},"required":false,"type":{"name":"bool","value":null,"raw":null}},{"name":"autoClose","doclets":[],"defaultValue":{"value":"true","computed":false},"description":{"childMarkdownRemark":{"html":"<p>Controls the auto close behaviour of the dropdown when clicking outside of\nthe button or the list.</p>"}},"required":false,"type":{"name":"enum","value":[{"value":"true","computed":false},{"value":"'outside'","computed":false},{"value":"'inside'","computed":false},{"value":"false","computed":false}],"raw":null}}]},"DropdownToggle":{"displayName":"DropdownToggle","composes":["Omit"],"description":{"childMarkdownRemark":{"html":""}},"props":[{"name":"bsPrefix","doclets":[{"tag":"default","value":"'dropdown-toggle'"}],"defaultValue":{"value":"'dropdown-toggle'","computed":false},"description":{"childMarkdownRemark":{"html":"<p>Change the underlying component CSS base class name and modifier class names prefix. <strong>This is an escape hatch</strong> for working with heavily customized bootstrap css.</p>"}},"required":false,"type":{"name":"string","value":null,"raw":null}},{"name":"id","doclets":[{"tag":"type","value":"{string|number}"}],"defaultValue":null,"description":{"childMarkdownRemark":{"html":"<p>An html id attribute, necessary for assistive technologies, such as screen readers.</p>"}},"required":false,"type":{"name":"string|number","value":null,"raw":null}},{"name":"split","doclets":[],"defaultValue":null,"description":{"childMarkdownRemark":{"html":""}},"required":false,"type":{"name":"bool","value":null,"raw":null}},{"name":"as","doclets":[],"defaultValue":{"value":"Button","computed":true},"description":{"childMarkdownRemark":{"html":"<p>You can use a custom element type for this component.</p>"}},"required":false,"type":{"name":"elementType","value":null,"raw":null}},{"name":"childBsPrefix","doclets":[{"tag":"private","value":true}],"defaultValue":null,"description":{"childMarkdownRemark":{"html":"<p>to passthrough to the underlying button or whatever from DropdownButton</p>"}},"required":false,"type":{"name":"string","value":null,"raw":null}}]},"DropdownMenu":{"displayName":"DropdownMenu","composes":null,"description":{"childMarkdownRemark":{"html":""}},"props":[{"name":"bsPrefix","doclets":[{"tag":"default","value":"'dropdown-menu'"}],"defaultValue":{"value":"'dropdown-menu'","computed":false},"description":{"childMarkdownRemark":{"html":"<p>Change the underlying component CSS base class name and modifier class names prefix. <strong>This is an escape hatch</strong> for working with heavily customized bootstrap css.</p>"}},"required":false,"type":{"name":"string","value":null,"raw":null}},{"name":"show","doclets":[],"defaultValue":null,"description":{"childMarkdownRemark":{"html":"<p>Controls the visibility of the Dropdown menu</p>"}},"required":false,"type":{"name":"bool","value":null,"raw":null}},{"name":"renderOnMount","doclets":[],"defaultValue":null,"description":{"childMarkdownRemark":{"html":"<p>Whether to render the dropdown menu in the DOM before the first time it is shown</p>"}},"required":false,"type":{"name":"bool","value":null,"raw":null}},{"name":"flip","doclets":[],"defaultValue":{"value":"true","computed":false},"description":{"childMarkdownRemark":{"html":"<p>Have the dropdown switch to it's opposite placement when necessary to stay on screen.</p>"}},"required":false,"type":{"name":"bool","value":null,"raw":null}},{"name":"align","doclets":[{"tag":"type","value":"{\"start\"|\"end\"|{ sm: \"start\"|\"end\" }|{ md: \"start\"|\"end\" }|{ lg: \"start\"|\"end\" }|{ xl: \"start\"|\"end\"}|{ xxl: \"start\"|\"end\"} }"}],"defaultValue":null,"description":{"childMarkdownRemark":{"html":"<p>Aligns the dropdown menu to the specified side of the container. You can also align\nthe menu responsively for breakpoints starting at <code class=\"language-text\">sm</code> and up. The alignment\ndirection will affect the specified breakpoint or larger.</p>\n<p><em>Note: Using responsive alignment will disable Popper usage for positioning.</em></p>"}},"required":false,"type":{"name":"\"start\"|\"end\"|{ sm: \"start\"|\"end\" }|{ md: \"start\"|\"end\" }|{ lg: \"start\"|\"end\" }|{ xl: \"start\"|\"end\"}|{ xxl: \"start\"|\"end\"} ","value":null,"raw":"alignPropType"}},{"name":"rootCloseEvent","doclets":[],"defaultValue":null,"description":{"childMarkdownRemark":{"html":"<p>Which event when fired outside the component will cause it to be closed</p>\n<p><em>Note: For custom dropdown components, you will have to pass the\n<code class=\"language-text\">rootCloseEvent</code> to <code class=\"language-text\">&lt;RootCloseWrapper></code> in your custom dropdown menu\ncomponent (<a href=\"https://github.com/react-bootstrap/react-bootstrap/blob/v0.31.5/src/DropdownMenu.js#L115-L119\">similarly to how it is implemented in <code class=\"language-text\">&lt;Dropdown.Menu></code></a>).</em></p>"}},"required":false,"type":{"name":"enum","value":[{"value":"'click'","computed":false},{"value":"'mousedown'","computed":false}],"raw":null}},{"name":"as","doclets":[],"defaultValue":{"value":"'div'","computed":false},"description":{"childMarkdownRemark":{"html":"<p>Control the rendering of the DropdownMenu. All non-menu props\n(listed here) are passed through to the <code class=\"language-text\">as</code> Component.</p>\n<p>If providing a custom, non DOM, component. the <code class=\"language-text\">show</code>, <code class=\"language-text\">close</code> and <code class=\"language-text\">align</code> props\nare also injected and should be handled appropriately.</p>"}},"required":false,"type":{"name":"elementType","value":null,"raw":null}},{"name":"popperConfig","doclets":[],"defaultValue":null,"description":{"childMarkdownRemark":{"html":"<p>A set of popper options and props passed directly to Popper.</p>"}},"required":false,"type":{"name":"object","value":null,"raw":null}},{"name":"variant","doclets":[],"defaultValue":null,"description":{"childMarkdownRemark":{"html":"<p>Menu color variant.</p>\n<p>Omitting this will use the default light color.</p>"}},"required":false,"type":{"name":"string","value":null,"raw":null}}]},"DropdownItem":{"displayName":"DropdownItem","composes":null,"description":{"childMarkdownRemark":{"html":""}},"props":[{"name":"bsPrefix","doclets":[{"tag":"default","value":"'dropdown-item'"}],"defaultValue":{"value":"'dropdown-item'","computed":false},"description":{"childMarkdownRemark":{"html":"<p>Change the underlying component CSS base class name and modifier class names prefix. <strong>This is an escape hatch</strong> for working with heavily customized bootstrap css.</p>"}},"required":false,"type":{"name":"string","value":null,"raw":null}},{"name":"active","doclets":[],"defaultValue":null,"description":{"childMarkdownRemark":{"html":"<p>Highlight the menu item as active.</p>"}},"required":false,"type":{"name":"bool","value":null,"raw":null}},{"name":"disabled","doclets":[],"defaultValue":{"value":"false","computed":false},"description":{"childMarkdownRemark":{"html":"<p>Disable the menu item, making it unselectable.</p>"}},"required":false,"type":{"name":"bool","value":null,"raw":null}},{"name":"eventKey","doclets":[],"defaultValue":null,"description":{"childMarkdownRemark":{"html":"<p>Value passed to the <code class=\"language-text\">onSelect</code> handler, useful for identifying the selected menu item.</p>"}},"required":false,"type":{"name":"union","value":[{"name":"string"},{"name":"number"}],"raw":null}},{"name":"href","doclets":[],"defaultValue":null,"description":{"childMarkdownRemark":{"html":"<p>HTML <code class=\"language-text\">href</code> attribute corresponding to <code class=\"language-text\">a.href</code>.</p>"}},"required":false,"type":{"name":"string","value":null,"raw":null}},{"name":"onClick","doclets":[],"defaultValue":null,"description":{"childMarkdownRemark":{"html":"<p>Callback fired when the menu item is clicked.</p>"}},"required":false,"type":{"name":"func","value":null,"raw":null}},{"name":"as","doclets":[],"defaultValue":{"value":"Anchor","computed":true},"description":{"childMarkdownRemark":{"html":"<p>You can use a custom element type for this component.</p>"}},"required":false,"type":{"name":"elementType","value":null,"raw":null}}]},"DropdownHeader":{"displayName":"DropdownHeader","composes":null,"description":{"childMarkdownRemark":{"html":""}},"props":[{"name":"bsPrefix","doclets":[{"tag":"default","value":"'dropdown-header'"}],"defaultValue":{"value":"'dropdown-header'","computed":false},"description":{"childMarkdownRemark":{"html":"<p>Change the underlying component CSS base class name and modifier class names prefix. <strong>This is an escape hatch</strong> for working with heavily customized bootstrap css.</p>"}},"required":true,"type":{"name":"string","value":null,"raw":null}},{"name":"as","doclets":[],"defaultValue":{"value":"\"div\"","computed":false},"description":{"childMarkdownRemark":{"html":"<p>You can use a custom element type for this component.</p>"}},"required":false,"type":{"name":"elementType","value":null,"raw":null}}]},"DropdownDivider":{"displayName":"DropdownDivider","composes":null,"description":{"childMarkdownRemark":{"html":""}},"props":[{"name":"bsPrefix","doclets":[{"tag":"default","value":"'dropdown-divider'"}],"defaultValue":{"value":"'dropdown-divider'","computed":false},"description":{"childMarkdownRemark":{"html":"<p>Change the underlying component CSS base class name and modifier class names prefix. <strong>This is an escape hatch</strong> for working with heavily customized bootstrap css.</p>"}},"required":true,"type":{"name":"string","value":null,"raw":null}},{"name":"as","doclets":[],"defaultValue":{"value":"'hr'","computed":false},"description":{"childMarkdownRemark":{"html":"<p>You can use a custom element type for this component.</p>"}},"required":false,"type":{"name":"elementType","value":null,"raw":null}}]}},"pageContext":{"frontmatter":{}}},"staticQueryHashes":["1633686484"]}