{"componentChunkName":"component---src-pages-components-offcanvas-mdx","path":"/components/offcanvas/","result":{"data":{"Offcanvas":{"displayName":"Offcanvas","composes":null,"description":{"childMarkdownRemark":{"html":""}},"props":[{"name":"bsPrefix","doclets":[{"tag":"default","value":"'offcanvas'"}],"defaultValue":{"value":"'offcanvas'","computed":false},"description":{"childMarkdownRemark":{"html":"<p>Change the underlying component CSS base class name and modifier class names prefix. <strong>This is an escape hatch</strong> for working with heavily customized bootstrap css.</p>"}},"required":false,"type":{"name":"string","value":null,"raw":null}},{"name":"backdrop","doclets":[],"defaultValue":{"value":"true","computed":false},"description":{"childMarkdownRemark":{"html":"<p>Include a backdrop component. Specify 'static' for a backdrop that doesn't\ntrigger an \"onHide\" when clicked.</p>"}},"required":false,"type":{"name":"enum","value":[{"value":"'static'","computed":false},{"value":"true","computed":false},{"value":"false","computed":false}],"raw":null}},{"name":"backdropClassName","doclets":[],"defaultValue":null,"description":{"childMarkdownRemark":{"html":"<p>Add an optional extra class name to .offcanvas-backdrop.</p>"}},"required":false,"type":{"name":"string","value":null,"raw":null}},{"name":"keyboard","doclets":[],"defaultValue":{"value":"true","computed":false},"description":{"childMarkdownRemark":{"html":"<p>Closes the offcanvas when escape key is pressed.</p>"}},"required":false,"type":{"name":"bool","value":null,"raw":null}},{"name":"scroll","doclets":[],"defaultValue":{"value":"false","computed":false},"description":{"childMarkdownRemark":{"html":"<p>Allow body scrolling while offcanvas is open.</p>"}},"required":false,"type":{"name":"bool","value":null,"raw":null}},{"name":"placement","doclets":[],"defaultValue":{"value":"'start'","computed":false},"description":{"childMarkdownRemark":{"html":"<p>Which side of the viewport the offcanvas will appear from.</p>"}},"required":false,"type":{"name":"enum","value":[{"value":"'start'","computed":false},{"value":"'end'","computed":false},{"value":"'top'","computed":false},{"value":"'bottom'","computed":false}],"raw":null}},{"name":"responsive","doclets":[{"tag":"type","value":"{(\"sm\"|\"md\"|\"lg\"|\"xl\"|\"xxl\")}"}],"defaultValue":null,"description":{"childMarkdownRemark":{"html":"<p>Hide content outside the viewport from a specified breakpoint and down.</p>"}},"required":false,"type":{"name":"enum","value":[{"value":"\"sm\"","computed":false},{"value":"\"md\"","computed":false},{"value":"\"lg\"","computed":false},{"value":"\"xl\"","computed":false},{"value":"\"xxl\"","computed":false}],"raw":null}},{"name":"autoFocus","doclets":[],"defaultValue":{"value":"true","computed":false},"description":{"childMarkdownRemark":{"html":"<p>When <code class=\"language-text\">true</code> The offcanvas will automatically shift focus to itself when it\nopens, and replace it to the last focused element when it closes.\nGenerally this should never be set to false as it makes the offcanvas less\naccessible to assistive technologies, like screen-readers.</p>"}},"required":false,"type":{"name":"bool","value":null,"raw":null}},{"name":"enforceFocus","doclets":[],"defaultValue":{"value":"true","computed":false},"description":{"childMarkdownRemark":{"html":"<p>When <code class=\"language-text\">true</code> The offcanvas will prevent focus from leaving the offcanvas while\nopen. Consider leaving the default value here, as it is necessary to make\nthe offcanvas work well with assistive technologies, such as screen readers.</p>"}},"required":false,"type":{"name":"bool","value":null,"raw":null}},{"name":"restoreFocus","doclets":[],"defaultValue":{"value":"true","computed":false},"description":{"childMarkdownRemark":{"html":"<p>When <code class=\"language-text\">true</code> The offcanvas will restore focus to previously focused element once\noffcanvas is hidden</p>"}},"required":false,"type":{"name":"bool","value":null,"raw":null}},{"name":"restoreFocusOptions","doclets":[{"tag":"link","value":" https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/focus#Parameters"}],"defaultValue":null,"description":{"childMarkdownRemark":{"html":"<p>Options passed to focus function when <code class=\"language-text\">restoreFocus</code> is set to <code class=\"language-text\">true</code></p>"}},"required":false,"type":{"name":"shape","value":{"preventScroll":{"name":"bool","required":false}},"raw":null}},{"name":"show","doclets":[],"defaultValue":{"value":"false","computed":false},"description":{"childMarkdownRemark":{"html":"<p>When <code class=\"language-text\">true</code> The offcanvas will show itself.</p>"}},"required":false,"type":{"name":"bool","value":null,"raw":null}},{"name":"onShow","doclets":[],"defaultValue":null,"description":{"childMarkdownRemark":{"html":"<p>A callback fired when the offcanvas is opening.</p>"}},"required":false,"type":{"name":"func","value":null,"raw":null}},{"name":"onHide","doclets":[],"defaultValue":null,"description":{"childMarkdownRemark":{"html":"<p>A callback fired when the header closeButton or backdrop is\nclicked. Required if either are specified.</p>"}},"required":false,"type":{"name":"func","value":null,"raw":null}},{"name":"onEscapeKeyDown","doclets":[],"defaultValue":null,"description":{"childMarkdownRemark":{"html":"<p>A callback fired when the escape key, if specified in <code class=\"language-text\">keyboard</code>, is pressed.</p>"}},"required":false,"type":{"name":"func","value":null,"raw":null}},{"name":"onEnter","doclets":[],"defaultValue":null,"description":{"childMarkdownRemark":{"html":"<p>Callback fired before the offcanvas transitions in</p>"}},"required":false,"type":{"name":"func","value":null,"raw":null}},{"name":"onEntering","doclets":[],"defaultValue":null,"description":{"childMarkdownRemark":{"html":"<p>Callback fired as the offcanvas begins to transition in</p>"}},"required":false,"type":{"name":"func","value":null,"raw":null}},{"name":"onEntered","doclets":[],"defaultValue":null,"description":{"childMarkdownRemark":{"html":"<p>Callback fired after the offcanvas finishes transitioning in</p>"}},"required":false,"type":{"name":"func","value":null,"raw":null}},{"name":"onExit","doclets":[],"defaultValue":null,"description":{"childMarkdownRemark":{"html":"<p>Callback fired right before the offcanvas transitions out</p>"}},"required":false,"type":{"name":"func","value":null,"raw":null}},{"name":"onExiting","doclets":[],"defaultValue":null,"description":{"childMarkdownRemark":{"html":"<p>Callback fired as the offcanvas begins to transition out</p>"}},"required":false,"type":{"name":"func","value":null,"raw":null}},{"name":"onExited","doclets":[],"defaultValue":null,"description":{"childMarkdownRemark":{"html":"<p>Callback fired after the offcanvas finishes transitioning out</p>"}},"required":false,"type":{"name":"func","value":null,"raw":null}},{"name":"container","doclets":[{"tag":"private","value":true}],"defaultValue":null,"description":{"childMarkdownRemark":{"html":""}},"required":false,"type":{"name":"any","value":null,"raw":null}},{"name":"aria-labelledby","doclets":[],"defaultValue":null,"description":{"childMarkdownRemark":{"html":""}},"required":false,"type":{"name":"string","value":null,"raw":null}}]},"OffcanvasHeader":{"composes":null,"displayName":"OffcanvasHeader","description":{"childMarkdownRemark":{"html":""}},"props":[{"name":"bsPrefix","doclets":[{"tag":"default","value":"'offcanvas-header'"}],"defaultValue":{"value":"'offcanvas-header'","computed":false},"description":{"childMarkdownRemark":{"html":"<p>Change the underlying component CSS base class name and modifier class names prefix. <strong>This is an escape hatch</strong> for working with heavily customized bootstrap css.</p>"}},"required":false,"type":{"name":"string","value":null,"raw":null}},{"name":"closeLabel","doclets":[],"defaultValue":{"value":"'Close'","computed":false},"description":{"childMarkdownRemark":{"html":"<p>Provides an accessible label for the close\nbutton. It is used for Assistive Technology when the label text is not\nreadable.</p>"}},"required":false,"type":{"name":"string","value":null,"raw":null}},{"name":"closeVariant","doclets":[],"defaultValue":null,"description":{"childMarkdownRemark":{"html":"<p>Sets the variant for close button.</p>"}},"required":false,"type":{"name":"enum","value":[{"value":"'white'","computed":false}],"raw":null}},{"name":"closeButton","doclets":[],"defaultValue":{"value":"false","computed":false},"description":{"childMarkdownRemark":{"html":"<p>Specify whether the Component should contain a close button</p>"}},"required":false,"type":{"name":"bool","value":null,"raw":null}},{"name":"onHide","doclets":[],"defaultValue":null,"description":{"childMarkdownRemark":{"html":"<p>A Callback fired when the close button is clicked. If used directly inside\na Offcanvas component, the onHide will automatically be propagated up to the\nparent Offcanvas <code class=\"language-text\">onHide</code>.</p>"}},"required":false,"type":{"name":"func","value":null,"raw":null}}]},"OffcanvasTitle":{"composes":null,"displayName":"OffcanvasTitle","description":{"childMarkdownRemark":{"html":""}},"props":[{"name":"bsPrefix","doclets":[{"tag":"default","value":"'offcanvas-title'"}],"defaultValue":{"value":"'offcanvas-title'","computed":false},"description":{"childMarkdownRemark":{"html":"<p>Change the underlying component CSS base class name and modifier class names prefix. <strong>This is an escape hatch</strong> for working with heavily customized bootstrap css.</p>"}},"required":true,"type":{"name":"string","value":null,"raw":null}},{"name":"as","doclets":[],"defaultValue":{"value":"DivStyledAsH5","computed":true},"description":{"childMarkdownRemark":{"html":"<p>You can use a custom element type for this component.</p>"}},"required":false,"type":{"name":"elementType","value":null,"raw":null}}]},"OffcanvasBody":{"composes":null,"displayName":"OffcanvasBody","description":{"childMarkdownRemark":{"html":""}},"props":[{"name":"bsPrefix","doclets":[{"tag":"default","value":"'offcanvas-body'"}],"defaultValue":{"value":"'offcanvas-body'","computed":false},"description":{"childMarkdownRemark":{"html":"<p>Change the underlying component CSS base class name and modifier class names prefix. <strong>This is an escape hatch</strong> for working with heavily customized bootstrap css.</p>"}},"required":true,"type":{"name":"string","value":null,"raw":null}},{"name":"as","doclets":[],"defaultValue":{"value":"\"div\"","computed":false},"description":{"childMarkdownRemark":{"html":"<p>You can use a custom element type for this component.</p>"}},"required":false,"type":{"name":"elementType","value":null,"raw":null}}]}},"pageContext":{"frontmatter":{}}},"staticQueryHashes":["1633686484"]}