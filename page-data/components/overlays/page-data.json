{"componentChunkName":"component---src-pages-components-overlays-mdx","path":"/components/overlays/","result":{"data":{"Tooltip":{"composes":["BsPrefixProps"],"displayName":"Tooltip","description":{"childMarkdownRemark":{"html":""}},"props":[{"name":"bsPrefix","doclets":[{"tag":"default","value":"'tooltip'"}],"defaultValue":{"value":"'tooltip'","computed":false},"description":{"childMarkdownRemark":{"html":"<p>Change the underlying component CSS base class name and modifier class names prefix. <strong>This is an escape hatch</strong> for working with heavily customized bootstrap css.</p>"}},"required":false,"type":{"name":"string","value":null,"raw":null}},{"name":"id","doclets":[{"tag":"type","value":"{string}"},{"tag":"required","value":true}],"defaultValue":null,"description":{"childMarkdownRemark":{"html":"<p>An html id attribute, necessary for accessibility</p>"}},"required":true,"type":{"name":"string","value":null,"raw":null}},{"name":"placement","doclets":[],"defaultValue":{"value":"'right'","computed":false},"description":{"childMarkdownRemark":{"html":"<p>Sets the direction the Tooltip is positioned towards.</p>\n<blockquote>\n<p>This is generally provided by the <code class=\"language-text\">Overlay</code> component positioning the tooltip</p>\n</blockquote>"}},"required":false,"type":{"name":"enum","value":[{"value":"'auto-start'","computed":false},{"value":"'auto'","computed":false},{"value":"'auto-end'","computed":false},{"value":"'top-start'","computed":false},{"value":"'top'","computed":false},{"value":"'top-end'","computed":false},{"value":"'right-start'","computed":false},{"value":"'right'","computed":false},{"value":"'right-end'","computed":false},{"value":"'bottom-end'","computed":false},{"value":"'bottom'","computed":false},{"value":"'bottom-start'","computed":false},{"value":"'left-end'","computed":false},{"value":"'left'","computed":false},{"value":"'left-start'","computed":false}],"raw":null}},{"name":"arrowProps","doclets":[{"tag":"type","value":"{{ ref: ReactRef, style: Object }}"}],"defaultValue":null,"description":{"childMarkdownRemark":{"html":"<p>An Overlay injected set of props for positioning the tooltip arrow.</p>\n<blockquote>\n<p>This is generally provided by the <code class=\"language-text\">Overlay</code> component positioning the tooltip</p>\n</blockquote>"}},"required":false,"type":{"name":"{ ref: ReactRef, style: Object }","value":{"ref":{"name":"any","required":false},"style":{"name":"object","required":false}},"raw":null}},{"name":"hasDoneInitialMeasure","doclets":[],"defaultValue":null,"description":{"childMarkdownRemark":{"html":"<p>Whether or not Popper has done its initial measurement and positioning.</p>"}},"required":false,"type":{"name":"bool","value":null,"raw":null}},{"name":"popper","doclets":[{"tag":"private","value":true}],"defaultValue":null,"description":{"childMarkdownRemark":{"html":""}},"required":false,"type":{"name":"object","value":null,"raw":null}},{"name":"show","doclets":[{"tag":"private","value":true}],"defaultValue":null,"description":{"childMarkdownRemark":{"html":""}},"required":false,"type":{"name":"any","value":null,"raw":null}}]},"Popover":{"composes":null,"displayName":"Popover","description":{"childMarkdownRemark":{"html":""}},"props":[{"name":"bsPrefix","doclets":[{"tag":"default","value":"'popover'"}],"defaultValue":{"value":"'popover'","computed":false},"description":{"childMarkdownRemark":{"html":"<p>Change the underlying component CSS base class name and modifier class names prefix. <strong>This is an escape hatch</strong> for working with heavily customized bootstrap css.</p>"}},"required":false,"type":{"name":"string","value":null,"raw":null}},{"name":"id","doclets":[{"tag":"type","value":"{string}"},{"tag":"required","value":true}],"defaultValue":null,"description":{"childMarkdownRemark":{"html":"<p>An html id attribute, necessary for accessibility</p>"}},"required":true,"type":{"name":"string","value":null,"raw":null}},{"name":"placement","doclets":[],"defaultValue":{"value":"'right'","computed":false},"description":{"childMarkdownRemark":{"html":"<p>Sets the direction the Popover is positioned towards.</p>\n<blockquote>\n<p>This is generally provided by the <code class=\"language-text\">Overlay</code> component positioning the popover</p>\n</blockquote>"}},"required":false,"type":{"name":"enum","value":[{"value":"'auto-start'","computed":false},{"value":"'auto'","computed":false},{"value":"'auto-end'","computed":false},{"value":"'top-start'","computed":false},{"value":"'top'","computed":false},{"value":"'top-end'","computed":false},{"value":"'right-start'","computed":false},{"value":"'right'","computed":false},{"value":"'right-end'","computed":false},{"value":"'bottom-end'","computed":false},{"value":"'bottom'","computed":false},{"value":"'bottom-start'","computed":false},{"value":"'left-end'","computed":false},{"value":"'left'","computed":false},{"value":"'left-start'","computed":false}],"raw":null}},{"name":"arrowProps","doclets":[],"defaultValue":null,"description":{"childMarkdownRemark":{"html":"<p>An Overlay injected set of props for positioning the popover arrow.</p>\n<blockquote>\n<p>This is generally provided by the <code class=\"language-text\">Overlay</code> component positioning the popover</p>\n</blockquote>"}},"required":false,"type":{"name":"shape","value":{"ref":{"name":"any","required":false},"style":{"name":"object","required":false}},"raw":null}},{"name":"body","doclets":[],"defaultValue":null,"description":{"childMarkdownRemark":{"html":"<p>When this prop is set, it creates a Popover with a Popover.Body inside\npassing the children directly to it</p>"}},"required":false,"type":{"name":"bool","value":null,"raw":null}},{"name":"hasDoneInitialMeasure","doclets":[],"defaultValue":null,"description":{"childMarkdownRemark":{"html":"<p>Whether or not Popper has done its initial measurement and positioning.</p>"}},"required":false,"type":{"name":"bool","value":null,"raw":null}},{"name":"popper","doclets":[{"tag":"private","value":true}],"defaultValue":null,"description":{"childMarkdownRemark":{"html":""}},"required":false,"type":{"name":"object","value":null,"raw":null}},{"name":"show","doclets":[{"tag":"private","value":true}],"defaultValue":null,"description":{"childMarkdownRemark":{"html":""}},"required":false,"type":{"name":"bool","value":null,"raw":null}}]},"PopoverBody":{"composes":null,"displayName":"PopoverBody","description":{"childMarkdownRemark":{"html":""}},"props":[{"name":"bsPrefix","doclets":[{"tag":"default","value":"'popover-body'"}],"defaultValue":{"value":"'popover-body'","computed":false},"description":{"childMarkdownRemark":{"html":"<p>Change the underlying component CSS base class name and modifier class names prefix. <strong>This is an escape hatch</strong> for working with heavily customized bootstrap css.</p>"}},"required":true,"type":{"name":"string","value":null,"raw":null}},{"name":"as","doclets":[],"defaultValue":{"value":"\"div\"","computed":false},"description":{"childMarkdownRemark":{"html":"<p>You can use a custom element type for this component.</p>"}},"required":false,"type":{"name":"elementType","value":null,"raw":null}}]},"PopoverHeader":{"composes":null,"displayName":"PopoverHeader","description":{"childMarkdownRemark":{"html":""}},"props":[{"name":"bsPrefix","doclets":[{"tag":"default","value":"'popover-header'"}],"defaultValue":{"value":"'popover-header'","computed":false},"description":{"childMarkdownRemark":{"html":"<p>Change the underlying component CSS base class name and modifier class names prefix. <strong>This is an escape hatch</strong> for working with heavily customized bootstrap css.</p>"}},"required":true,"type":{"name":"string","value":null,"raw":null}},{"name":"as","doclets":[],"defaultValue":{"value":"\"div\"","computed":false},"description":{"childMarkdownRemark":{"html":"<p>You can use a custom element type for this component.</p>"}},"required":false,"type":{"name":"elementType","value":null,"raw":null}}]},"Overlay":{"composes":null,"displayName":"Overlay","description":{"childMarkdownRemark":{"html":""}},"props":[{"name":"container","doclets":[],"defaultValue":null,"description":{"childMarkdownRemark":{"html":"<p>A component instance, DOM node, or function that returns either.\nThe <code class=\"language-text\">container</code> element will have the Overlay appended to it via a React portal.</p>"}},"required":false,"type":{"name":"union","value":[{"name":"custom","raw":"componentOrElement"},{"name":"func"}],"raw":null}},{"name":"target","doclets":[],"defaultValue":null,"description":{"childMarkdownRemark":{"html":"<p>A component instance, DOM node, or function that returns either.\nThe overlay will be positioned in relation to the <code class=\"language-text\">target</code></p>"}},"required":false,"type":{"name":"union","value":[{"name":"custom","raw":"componentOrElement"},{"name":"func"}],"raw":null}},{"name":"show","doclets":[],"defaultValue":{"value":"false","computed":false},"description":{"childMarkdownRemark":{"html":"<p>Set the visibility of the Overlay</p>"}},"required":false,"type":{"name":"bool","value":null,"raw":null}},{"name":"popperConfig","doclets":[],"defaultValue":{"value":"{}","computed":false},"description":{"childMarkdownRemark":{"html":"<p>A set of popper options and props passed directly to Popper.</p>"}},"required":false,"type":{"name":"object","value":null,"raw":null}},{"name":"rootClose","doclets":[],"defaultValue":{"value":"false","computed":false},"description":{"childMarkdownRemark":{"html":"<p>Specify whether the overlay should trigger onHide when the user clicks outside the overlay</p>"}},"required":false,"type":{"name":"bool","value":null,"raw":null}},{"name":"rootCloseEvent","doclets":[],"defaultValue":null,"description":{"childMarkdownRemark":{"html":"<p>Specify event for triggering a \"root close\" toggle.</p>"}},"required":false,"type":{"name":"enum","value":[{"value":"'click'","computed":false},{"value":"'mousedown'","computed":false}],"raw":null}},{"name":"onHide","doclets":[],"defaultValue":null,"description":{"childMarkdownRemark":{"html":"<p>A callback invoked by the overlay when it wishes to be hidden. Required if\n<code class=\"language-text\">rootClose</code> is specified.</p>"}},"required":false,"type":{"name":"func","value":null,"raw":null}},{"name":"transition","doclets":[],"defaultValue":{"value":"Fade","computed":true},"description":{"childMarkdownRemark":{"html":"<p>Animate the entering and exiting of the Overlay. <code class=\"language-text\">true</code> will use the <code class=\"language-text\">&lt;Fade></code> transition,\nor a custom react-transition-group <code class=\"language-text\">&lt;Transition></code> component can be provided.</p>"}},"required":false,"type":{"name":"union","value":[{"name":"bool"},{"name":"elementType"}],"raw":null}},{"name":"onEnter","doclets":[],"defaultValue":null,"description":{"childMarkdownRemark":{"html":"<p>Callback fired before the Overlay transitions in</p>"}},"required":false,"type":{"name":"func","value":null,"raw":null}},{"name":"onEntering","doclets":[],"defaultValue":null,"description":{"childMarkdownRemark":{"html":"<p>Callback fired as the Overlay begins to transition in</p>"}},"required":false,"type":{"name":"func","value":null,"raw":null}},{"name":"onEntered","doclets":[],"defaultValue":null,"description":{"childMarkdownRemark":{"html":"<p>Callback fired after the Overlay finishes transitioning in</p>"}},"required":false,"type":{"name":"func","value":null,"raw":null}},{"name":"onExit","doclets":[],"defaultValue":null,"description":{"childMarkdownRemark":{"html":"<p>Callback fired right before the Overlay transitions out</p>"}},"required":false,"type":{"name":"func","value":null,"raw":null}},{"name":"onExiting","doclets":[],"defaultValue":null,"description":{"childMarkdownRemark":{"html":"<p>Callback fired as the Overlay begins to transition out</p>"}},"required":false,"type":{"name":"func","value":null,"raw":null}},{"name":"onExited","doclets":[],"defaultValue":null,"description":{"childMarkdownRemark":{"html":"<p>Callback fired after the Overlay finishes transitioning out</p>"}},"required":false,"type":{"name":"func","value":null,"raw":null}},{"name":"placement","doclets":[],"defaultValue":{"value":"'top'","computed":false},"description":{"childMarkdownRemark":{"html":"<p>The placement of the Overlay in relation to it's <code class=\"language-text\">target</code>.</p>"}},"required":false,"type":{"name":"enum","value":[{"value":"'auto-start'","computed":false},{"value":"'auto'","computed":false},{"value":"'auto-end'","computed":false},{"value":"'top-start'","computed":false},{"value":"'top'","computed":false},{"value":"'top-end'","computed":false},{"value":"'right-start'","computed":false},{"value":"'right'","computed":false},{"value":"'right-end'","computed":false},{"value":"'bottom-end'","computed":false},{"value":"'bottom'","computed":false},{"value":"'bottom-start'","computed":false},{"value":"'left-end'","computed":false},{"value":"'left'","computed":false},{"value":"'left-start'","computed":false}],"raw":null}}]},"OverlayTrigger":{"composes":["Omit"],"displayName":"OverlayTrigger","description":{"childMarkdownRemark":{"html":""}},"props":[{"name":"children","doclets":[],"defaultValue":null,"description":{"childMarkdownRemark":{"html":""}},"required":true,"type":{"name":"union","value":[{"name":"element"},{"name":"func"}],"raw":null}},{"name":"trigger","doclets":[{"tag":"type","value":"{'hover' | 'click' |'focus' | Array<'hover' | 'click' |'focus'>}"}],"defaultValue":{"value":"['hover', 'focus']","computed":false},"description":{"childMarkdownRemark":{"html":"<p>Specify which action or actions trigger Overlay visibility</p>\n<p>The <code class=\"language-text\">click</code> trigger ignores the configured <code class=\"language-text\">delay</code>.</p>"}},"required":false,"type":{"name":"'hover' | 'click' |'focus' | Array<'hover' | 'click' |'focus'>","value":[{"name":"custom","raw":"triggerType"},{"name":"arrayOf","value":{"name":"custom","raw":"triggerType"}}],"raw":null}},{"name":"delay","doclets":[],"defaultValue":null,"description":{"childMarkdownRemark":{"html":"<p>A millisecond delay amount to show and hide the Overlay once triggered</p>"}},"required":false,"type":{"name":"union","value":[{"name":"number"},{"name":"shape","value":{"show":{"name":"number","required":false},"hide":{"name":"number","required":false}}}],"raw":null}},{"name":"show","doclets":[{"tag":"controllable","value":"onToggle"}],"defaultValue":null,"description":{"childMarkdownRemark":{"html":"<p>The visibility of the Overlay. <code class=\"language-text\">show</code> is a <em>controlled</em> prop so should be paired\nwith <code class=\"language-text\">onToggle</code> to avoid breaking user interactions.</p>\n<p>Manually toggling <code class=\"language-text\">show</code> does <strong>not</strong> wait for <code class=\"language-text\">delay</code> to change the visibility.</p>"}},"required":false,"type":{"name":"bool","value":null,"raw":null}},{"name":"defaultShow","doclets":[],"defaultValue":{"value":"false","computed":false},"description":{"childMarkdownRemark":{"html":"<p>The initial visibility state of the Overlay.</p>"}},"required":false,"type":{"name":"bool","value":null,"raw":null}},{"name":"onToggle","doclets":[{"tag":"controllable","value":"`show`"}],"defaultValue":null,"description":{"childMarkdownRemark":{"html":"<p>A callback that fires when the user triggers a change in tooltip visibility.</p>\n<p><code class=\"language-text\">onToggle</code> is called with the desired next <code class=\"language-text\">show</code>, and generally should be passed\nback to the <code class=\"language-text\">show</code> prop. <code class=\"language-text\">onToggle</code> fires <em>after</em> the configured <code class=\"language-text\">delay</code></p>"}},"required":false,"type":{"name":"func","value":null,"raw":null}},{"name":"flip","doclets":[],"defaultValue":{"value":"placement && placement.indexOf('auto') !== -1","computed":false},"description":{"childMarkdownRemark":{"html":"<p>The initial flip state of the Overlay.</p>"}},"required":false,"type":{"name":"bool","value":null,"raw":null}},{"name":"overlay","doclets":[],"defaultValue":null,"description":{"childMarkdownRemark":{"html":"<p>An element or text to overlay next to the target.</p>"}},"required":true,"type":{"name":"union","value":[{"name":"func"},{"name":"element"}],"raw":null}},{"name":"popperConfig","doclets":[],"defaultValue":{"value":"{}","computed":false},"description":{"childMarkdownRemark":{"html":"<p>A Popper.js config object passed to the the underlying popper instance.</p>"}},"required":false,"type":{"name":"object","value":null,"raw":null}},{"name":"target","doclets":[{"tag":"private","value":true}],"defaultValue":null,"description":{"childMarkdownRemark":{"html":""}},"required":false,"type":{"name":"enum","value":[{"value":"null","computed":false}],"raw":null}},{"name":"onHide","doclets":[{"tag":"private","value":true}],"defaultValue":null,"description":{"childMarkdownRemark":{"html":""}},"required":false,"type":{"name":"enum","value":[{"value":"null","computed":false}],"raw":null}},{"name":"placement","doclets":[],"defaultValue":null,"description":{"childMarkdownRemark":{"html":"<p>The placement of the Overlay in relation to it's <code class=\"language-text\">target</code>.</p>"}},"required":false,"type":{"name":"enum","value":[{"value":"'auto-start'","computed":false},{"value":"'auto'","computed":false},{"value":"'auto-end'","computed":false},{"value":"'top-start'","computed":false},{"value":"'top'","computed":false},{"value":"'top-end'","computed":false},{"value":"'right-start'","computed":false},{"value":"'right'","computed":false},{"value":"'right-end'","computed":false},{"value":"'bottom-end'","computed":false},{"value":"'bottom'","computed":false},{"value":"'bottom-start'","computed":false},{"value":"'left-end'","computed":false},{"value":"'left'","computed":false},{"value":"'left-start'","computed":false}],"raw":null}}]}},"pageContext":{"frontmatter":{}}},"staticQueryHashes":["1633686484"]}