{"componentChunkName":"component---src-pages-forms-overview-mdx","path":"/forms/overview/","result":{"data":{"Form":{"composes":null,"displayName":"Form","description":{"childMarkdownRemark":{"html":""}},"props":[{"name":"_ref","doclets":[{"tag":"type","value":"{ReactRef}"},{"tag":"alias","value":"ref"}],"defaultValue":null,"description":{"childMarkdownRemark":{"html":"<p>The Form <code class=\"language-text\">ref</code> will be forwarded to the underlying element,\nwhich means, unless it's rendered <code class=\"language-text\">as</code> a composite component,\nit will be a DOM node, when resolved.</p>"}},"required":false,"type":{"name":"ReactRef","value":null,"raw":null}},{"name":"validated","doclets":[],"defaultValue":null,"description":{"childMarkdownRemark":{"html":"<p>Mark a form as having been validated. Setting it to <code class=\"language-text\">true</code> will\ntoggle any validation styles on the forms elements.</p>"}},"required":false,"type":{"name":"bool","value":null,"raw":null}},{"name":"as","doclets":[],"defaultValue":{"value":"'form'","computed":false},"description":{"childMarkdownRemark":{"html":"<p>You can use a custom element type for this component.</p>"}},"required":false,"type":{"name":"elementType","value":null,"raw":null}}]},"FormLabel":{"composes":null,"displayName":"FormLabel","description":{"childMarkdownRemark":{"html":""}},"props":[{"name":"bsPrefix","doclets":[{"tag":"default","value":"'form-label'"}],"defaultValue":{"value":"'form-label'","computed":false},"description":{"childMarkdownRemark":{"html":"<p>Change the underlying component CSS base class name and modifier class names prefix. <strong>This is an escape hatch</strong> for working with heavily customized bootstrap css.</p>"}},"required":false,"type":{"name":"string","value":null,"raw":null}},{"name":"htmlFor","doclets":[],"defaultValue":null,"description":{"childMarkdownRemark":{"html":"<p>Uses <code class=\"language-text\">controlId</code> from <code class=\"language-text\">&lt;FormGroup></code> if not explicitly specified.</p>"}},"required":false,"type":{"name":"string","value":null,"raw":null}},{"name":"column","doclets":[],"defaultValue":{"value":"false","computed":false},"description":{"childMarkdownRemark":{"html":"<p>Renders the FormLabel as a <code class=\"language-text\">&lt;Col></code> component (accepting all the same props),\nas well as adding additional styling for horizontal forms.</p>"}},"required":false,"type":{"name":"union","value":[{"name":"bool"},{"name":"enum","value":[{"value":"'sm'","computed":false},{"value":"'lg'","computed":false}]}],"raw":null}},{"name":"_ref","doclets":[{"tag":"type","value":"{ReactRef}"},{"tag":"alias","value":"ref"}],"defaultValue":null,"description":{"childMarkdownRemark":{"html":"<p>The FormLabel <code class=\"language-text\">ref</code> will be forwarded to the underlying element.\nUnless the FormLabel is rendered <code class=\"language-text\">as</code> a composite component,\nit will be a DOM node, when resolved.</p>"}},"required":false,"type":{"name":"ReactRef","value":null,"raw":null}},{"name":"visuallyHidden","doclets":[],"defaultValue":{"value":"false","computed":false},"description":{"childMarkdownRemark":{"html":"<p>Hides the label visually while still allowing it to be\nread by assistive technologies.</p>"}},"required":false,"type":{"name":"bool","value":null,"raw":null}},{"name":"as","doclets":[],"defaultValue":{"value":"'label'","computed":false},"description":{"childMarkdownRemark":{"html":"<p>Set a custom element for this component</p>"}},"required":false,"type":{"name":"elementType","value":null,"raw":null}}]}},"pageContext":{"frontmatter":{}}},"staticQueryHashes":["1633686484"]}